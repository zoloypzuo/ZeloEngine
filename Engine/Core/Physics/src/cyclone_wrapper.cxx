/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef
SWIGPYTHON
#define
SWIGPYTHON
#endif

#define
SWIG_DIRECTORS
#define
SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef
__cplusplus

/* SwigValueWrapper is described in swig.swg */
template<typename T>
class SwigValueWrapper {
struct SwigMovePointer {
T *ptr;

SwigMovePointer(T *p) : ptr(p) {
}

~SwigMovePointer() {
delete ptr; }

SwigMovePointer &operator=(SwigMovePointer &rhs) {
T *oldptr = ptr;
ptr = 0;
delete oldptr;
ptr = rhs.ptr;
rhs.ptr = 0;
return *this;
}
} pointer;

SwigValueWrapper &operator=(const SwigValueWrapper<T> &rhs);

SwigValueWrapper(const SwigValueWrapper<T> &rhs);

public:
SwigValueWrapper() : pointer(0) {
}

SwigValueWrapper &operator=(const T &t) {
SwigMovePointer tmp(new T(t));
pointer = tmp;
return *this;
}

operator T &() const {
return *pointer.ptr; }

T *operator&() {
return pointer.ptr; }
};

template<typename T>
T SwigValueInit() {
return T();
}

#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef
SWIGTEMPLATEDISAMBIGUATOR
# if
defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define
SWIGTEMPLATEDISAMBIGUATOR template
# elif
defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define
SWIGTEMPLATEDISAMBIGUATOR
template
# else
#  define
SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef
SWIGINLINE
# if
defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define
SWIGINLINE inline
# else
#   define
SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef
SWIGUNUSED
# if
defined(__GNUC__)
#   if
!(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define
SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif
defined(__ICC)
#   define
SWIGUNUSED __attribute__ ((__unused__))
# else
#   define
SWIGUNUSED
# endif
#endif

#ifndef
SWIG_MSC_UNSUPPRESS_4505
# if
defined(_MSC_VER)
#   pragma
warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef
SWIGUNUSEDPARM
# ifdef
__cplusplus
#   define
SWIGUNUSEDPARM(p)
# else
#   define
SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef
SWIGINTERN
# define
SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef
SWIGINTERNINLINE
# define
SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if
defined(__GNUC__)
#  if
(__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef
GCC_HASCLASSVISIBILITY
#      define
GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef
SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if
defined(STATIC_LINKED)
#     define
SWIGEXPORT
#   else
#     define
SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if
defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define
SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define
SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef
SWIGSTDCALL
# if
defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define
SWIGSTDCALL __stdcall
# else
#   define
SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if
!defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if
!defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define
_SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if
defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define
__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef
__INTEL_COMPILER
# pragma
warning disable 592
#endif


#if
defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include
<math.h>
#endif

#if
defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef
_DEBUG
# include
<Python.h>
# define
_DEBUG 1
#else

# include
<Python.h>

#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define
SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef
SWIG_TYPE_TABLE
# define
SWIG_QUOTE_STRING(x)
#
x
# define
SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define
SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define
SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef
SWIGRUNTIME
# define
SWIGRUNTIME SWIGINTERN
#endif

#ifndef
SWIGRUNTIMEINLINE
# define
SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef
SWIG_BUFFER_SIZE
# define
SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define
SWIG_POINTER_DISOWN        0x1
#define
SWIG_CAST_NEW_MEMORY       0x2
#define
SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define
SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define
SWIG_OK                    (0)
#define
SWIG_ERROR                 (-1)
#define
SWIG_IsOK(r)               (r >= 0)
#define
SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define
SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define
SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define
SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define
SWIG_BADOBJ                (SWIG_ERROR)
#define
SWIG_OLDOBJ                (SWIG_OK)
#define
SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define
SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define
SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define
SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define
SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define
SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define
SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define
SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if
defined(SWIG_CASTRANK_MODE)
#  ifndef
SWIG_TypeRank
#    define
SWIG_TypeRank unsigned long
#  endif
#  ifndef
SWIG_MAXCASTRANK            /* Default cast allowed */
#    define
SWIG_MAXCASTRANK          (2)
#  endif
#  define
SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define
SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define
SWIG_AddCast(r) (r)
#  define
SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include
<string.h>

#ifdef
__cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
const char *name;            /* mangled name of this type */
const char *str;            /* human readable name of this type */
swig_dycast_func dcast;        /* dynamic cast function down a hierarchy */
struct swig_cast_info *cast;            /* linked list of types that can cast into this type */
void *clientdata;        /* language specific type data */
int owndata;        /* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
swig_type_info *type;            /* pointer to type that is equivalent to this type */
swig_converter_func converter;        /* function to cast the void pointers */
struct swig_cast_info *next;            /* pointer to next cast in linked list */
struct swig_cast_info *prev;            /* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
swig_type_info **types;        /* Array of pointers to swig_type_info structures that are in this module */
size_t size;                /* Number of types in this module */
struct swig_module_info *next;        /* Pointer to next element in circularly linked list */
swig_type_info **type_initial;    /* Array of initially generated type structures */
swig_cast_info **cast_initial;    /* Array of initially generated casting structures */
void *clientdata;        /* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
const char *f2, const char *l2) {
for (; (f1 != l1) && (f2 != l2); ++f1, ++f2) {
while ((*f1 == ' ') && (f1 != l1)) ++f1;
while ((*f2 == ' ') && (f2 != l2)) ++f2;
if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
}
return (int) ((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
int equiv = 1;
const char *te = tb + strlen(tb);
const char *ne = nb;
while (equiv != 0 && *ne) {
for (nb = ne; *ne; ++ne) {
if (*ne == '|') break;
}
equiv = SWIG_TypeNameComp(nb, ne, tb, te);
if (*ne) ++ne;
}
return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
if (ty) {
swig_cast_info *iter = ty->cast;
while (iter) {
if (strcmp(iter->type->name, c) == 0) {
if (iter == ty->cast)
return iter;
/* Move iter to the top of the linked list */
iter->prev->next = iter->next;
if (iter->next)
iter->next->prev = iter->prev;
iter->next = ty->cast;
iter->prev = 0;
if (ty->cast) ty->cast->prev = iter;
ty->cast = iter;
return iter;
}
iter = iter->next;
}
}
return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
if (ty) {
swig_cast_info *iter = ty->cast;
while (iter) {
if (iter->type == from) {
if (iter == ty->cast)
return iter;
/* Move iter to the top of the linked list */
iter->prev->next = iter->next;
if (iter->next)
iter->next->prev = iter->prev;
iter->next = ty->cast;
iter->prev = 0;
if (ty->cast) ty->cast->prev = iter;
ty->cast = iter;
return iter;
}
iter = iter->next;
}
}
return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
swig_type_info *lastty = ty;
if (!ty || !ty->dcast) return ty;
while (ty && (ty->dcast)) {
ty = (*ty->dcast)(ptr);
if (ty) lastty = ty;
}
return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
/* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
if (!type) return NULL;
if (type->str != NULL) {
const char *last_name = type->str;
const char *s;
for (s = type->str; *s; s++)
if (*s == '|') last_name = s + 1;
return last_name;
} else
return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
swig_cast_info *cast = ti->cast;
/* if (ti->clientdata == clientdata) return; */
ti->clientdata = clientdata;

while (cast) {
if (!cast->converter) {
swig_type_info *tc = cast->type;
if (!tc->clientdata) {
SWIG_TypeClientData(tc, clientdata);
}
}
cast = cast->next;
}
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
SWIG_TypeClientData(ti, clientdata);
ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
swig_module_info *end,
const char *name) {
swig_module_info *iter = start;
do {
if (iter->size) {
size_t l = 0;
size_t r = iter->size - 1;
do {
/* since l+r >= 0, we can (>> 1) instead (/ 2) */
size_t i = (l + r) >> 1;
const char *iname = iter->types[i]->name;
if (iname) {
int compare = strcmp(name, iname);
if (compare == 0) {
return iter->types[i];
} else if (compare < 0) {
if (i) {
r = i - 1;
} else {
break;
}
} else if (compare > 0) {
l = i + 1;
}
} else {
break; /* should never happen */
}
} while (l <= r);
}
iter = iter->next;
} while (iter != end);
return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
swig_module_info *end,
const char *name) {
/* STEP 1: Search the name field using binary search */
swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
if (ret) {
return ret;
} else {
/* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
swig_module_info *iter = start;
do {
size_t i = 0;
for (; i < iter->size; ++i) {
if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
return iter->types[i];
}
iter = iter->next;
} while (iter != end);
}

/* neither found a match */
return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
static const char hex[17] = "0123456789abcdef";
const unsigned char *u = (unsigned char *) ptr;
const unsigned char *eu = u + sz;
for (; u != eu; ++u) {
unsigned char uu = *u;
*(c++) = hex[(uu & 0xf0) >> 4];
*(c++) = hex[uu & 0xf];
}
return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
unsigned char *u = (unsigned char *) ptr;
const unsigned char *eu = u + sz;
for (; u != eu; ++u) {
char d = *(c++);
unsigned char uu;
if ((d >= '0') && (d <= '9'))
uu = (unsigned char) ((d - '0') << 4);
else if ((d >= 'a') && (d <= 'f'))
uu = (unsigned char) ((d - ('a' - 10)) << 4);
else
return (char *) 0;
d = *(c++);
if ((d >= '0') && (d <= '9'))
uu |= (unsigned char) (d - '0');
else if ((d >= 'a') && (d <= 'f'))
uu |= (unsigned char) (d - ('a' - 10));
else
return (char *) 0;
*u = uu;
}
return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
char *r = buff;
if ((2 * sizeof(void *) + 2) > bsz) return 0;
*(r++) = '_';
r = SWIG_PackData(r, &ptr, sizeof(void *));
if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
strcpy(r, name);
return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
if (*c != '_') {
if (strcmp(c, "NULL") == 0) {
*ptr = (void *) 0;
return name;
} else {
return 0;
}
}
return SWIG_UnpackData(++c, ptr, sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
char *r = buff;
size_t lname = (name ? strlen(name) : 0);
if ((2 * sz + 2 + lname) > bsz) return 0;
*(r++) = '_';
r = SWIG_PackData(r, ptr, sz);
if (lname) {
strncpy(r, name, lname + 1);
} else {
*r = 0;
}
return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
if (*c != '_') {
if (strcmp(c, "NULL") == 0) {
memset(ptr, 0, sz);
return name;
} else {
return 0;
}
}
return SWIG_UnpackData(++c, ptr, sz);
}

#ifdef
__cplusplus
}
#endif

/*  Errors in SWIG */
#define
SWIG_UnknownError           -1
#define
SWIG_IOError               -2
#define
SWIG_RuntimeError       -3
#define
SWIG_IndexError           -4
#define
SWIG_TypeError           -5
#define
SWIG_DivisionByZero       -6
#define
SWIG_OverflowError       -7
#define
SWIG_SyntaxError           -8
#define
SWIG_ValueError           -9
#define
SWIG_SystemError           -10
#define
SWIG_AttributeError       -11
#define  SWIG_MemoryError           -12
#define
SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if
PY_VERSION_HEX >= 0x03000000

#define
PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define
PyInt_Check(x) PyLong_Check(x)
#define
PyInt_AsLong(x) PyLong_AsLong(x)
#define
PyInt_FromLong(x) PyLong_FromLong(x)
#define
PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define
PyString_Check(name) PyBytes_Check(name)
#define
PyString_FromString(x) PyUnicode_FromString(x)
#define
PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define
PyString_AsString(str) PyBytes_AsString(str)
#define
PyString_Size(str) PyBytes_Size(str)
#define
PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define
Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define
PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define
_PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef
Py_TYPE
#  define
Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if
PY_VERSION_HEX >= 0x03000000
#  define
SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define
SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char *
SWIG_Python_str_AsChar(PyObject *str) {
#if
PY_VERSION_HEX >= 0x03000000
char *newstr = 0;
str = PyUnicode_AsUTF8String(str);
if (str) {
char *cstr;
Py_ssize_t len;
PyBytes_AsStringAndSize(str, &cstr, &len);
newstr = (char *) malloc(len+1);
memcpy(newstr, cstr, len+1);
Py_XDECREF(str);
}
return newstr;
#else
return PyString_AsString(str);
#endif
}

#if
PY_VERSION_HEX >= 0x03000000
#  define
SWIG_Python_str_DelForPy3(x) free((void*) (x))
#else
#  define
SWIG_Python_str_DelForPy3(x)
#endif


SWIGINTERN PyObject *
SWIG_Python_str_FromChar(const char *c) {
#if
PY_VERSION_HEX >= 0x03000000
return PyUnicode_FromString(c);
#else
return PyString_FromString(c);
#endif
}

#ifndef
PyObject_DEL
# define
PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define
SWIGPY_USE_CAPSULE
# define
SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if
PY_VERSION_HEX < 0x03020000
#define
PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define
PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define
Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject *
SWIG_Python_ErrorType(int code) {
PyObject *type = 0;
switch (code) {
case SWIG_MemoryError:
type = PyExc_MemoryError;
break;
case SWIG_IOError:
type = PyExc_IOError;
break;
case SWIG_RuntimeError:
type = PyExc_RuntimeError;
break;
case SWIG_IndexError:
type = PyExc_IndexError;
break;
case SWIG_TypeError:
type = PyExc_TypeError;
break;
case SWIG_DivisionByZero:
type = PyExc_ZeroDivisionError;
break;
case SWIG_OverflowError:
type = PyExc_OverflowError;
break;
case SWIG_SyntaxError:
type = PyExc_SyntaxError;
break;
case SWIG_ValueError:
type = PyExc_ValueError;
break;
case SWIG_SystemError:
type = PyExc_SystemError;
break;
case SWIG_AttributeError:
type = PyExc_AttributeError;
break;
default:
type = PyExc_RuntimeError;
}
return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char *mesg) {
PyObject *type = 0;
PyObject *value = 0;
PyObject *traceback = 0;

if (PyErr_Occurred())
PyErr_Fetch(&type, &value, &traceback);
if (value) {
PyObject *old_str = PyObject_Str(value);
const char *tmp = SWIG_Python_str_AsChar(old_str);
PyErr_Clear();
Py_XINCREF(type);
if (tmp)
PyErr_Format(type, "%s %s", tmp, mesg);
else
PyErr_Format(type, "%s", mesg);
SWIG_Python_str_DelForPy3(tmp);
Py_DECREF(old_str);
Py_DECREF(value);
} else {
PyErr_SetString(PyExc_RuntimeError, mesg);
}
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj) {
PyObject *error;
if (obj)
return 0;
error = PyErr_Occurred();
return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message) {
if (SWIG_Python_TypeErrorOccurred(NULL)) {
/* Use existing TypeError to preserve stacktrace and enhance with given message */
PyObject *newvalue;
PyObject *type = NULL, *value = NULL, *traceback = NULL;
PyErr_Fetch(&type, &value, &traceback);
#if
PY_VERSION_HEX >= 0x03000000
newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
Py_XDECREF(value);
PyErr_Restore(type, newvalue, traceback);
} else {
/* Raise TypeError using given message */
PyErr_SetString(PyExc_TypeError, message);
}
}

#if
defined(SWIG_PYTHON_NO_THREADS)
#  if
defined(SWIG_PYTHON_THREADS)
#    undef
SWIG_PYTHON_THREADS
#  endif
#endif
#if
defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if
!defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define
SWIG_PYTHON_USE_GIL
#  endif
#  if
defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef
SWIG_PYTHON_INITIALIZE_THREADS
#     define
SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads()
#    endif
#    ifdef __cplusplus /* C++ code */
class SWIG_Python_Thread_Block {
bool status;
PyGILState_STATE state;
public:
void end() {
if (status) {
PyGILState_Release(state); status = false;}
}
SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {
}
~SWIG_Python_Thread_Block() {
end(); }
};
class SWIG_Python_Thread_Allow {
bool status;
PyThreadState *save;
public:
void end() {
if (status) {
PyEval_RestoreThread(save); status = false; }
}
SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {
}
~SWIG_Python_Thread_Allow() {
end(); }
};
#      define
SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define
SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define
SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define
SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define
SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define
SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define
SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define
SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if
!defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define
SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if
!defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define
SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if
!defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define
SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if
!defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define
SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if
!defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define
SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define
SWIG_PYTHON_INITIALIZE_THREADS
#  define
SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define
SWIG_PYTHON_THREAD_END_BLOCK
#  define
SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define
SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef
__cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define
SWIG_PY_POINTER 4
#define
SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
int type;
const char *name;
long lvalue;
double dvalue;
void *pvalue;
swig_type_info **ptype;
} swig_const_info;

#ifdef
__cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if
PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error
"This version of SWIG only supports Python >= 2.7"
#endif

#if
PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error
"This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define
SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define
SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define
SWIG_ConvertPtrAndOwn(obj, pptr, type, flags, own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef
SWIGPYTHON_BUILTIN
#define
SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define
SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define
SWIG_InternalNewPointerObj(ptr, type, flags)    SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define
SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty)
#define
SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define
swig_owntype int

/* for raw packed data */
#define
SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define
SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define
SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define
SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define
SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define
SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define
SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define
SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define
SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define
SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define
SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define
SWIG_SetErrorObj                                SWIG_Python_SetErrorObj
#define
SWIG_SetErrorMsg                            SWIG_Python_SetErrorMsg
#define
SWIG_ErrorType(code)                        SWIG_Python_ErrorType(code)
#define
SWIG_Error(code, msg)                    SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg)
#define
SWIG_fail goto fail


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
PyErr_SetObject(errtype, obj);
Py_DECREF(obj);
SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
PyErr_SetString(errtype, msg);
SWIG_PYTHON_THREAD_END_BLOCK;
}

#define
SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if
defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
PyObject *s = PyString_InternFromString(key);
PyList_Append(seq, s);
Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {
PyDict_SetItemString(d, name, obj);
Py_DECREF(obj);
if (public_interface)
SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {
PyDict_SetItemString(d, name, obj);
Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject *
SWIG_Python_AppendOutput(PyObject *result, PyObject *obj) {
if (!result) {
result = obj;
} else if (result == Py_None) {
Py_DECREF(result);
result = obj;
} else {
if (!PyList_Check(result)) {
PyObject *o2 = result;
result = PyList_New(1);
PyList_SetItem(result, 0, o2);
}
PyList_Append(result, obj);
Py_DECREF(obj);
}
return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs) {
if (!args) {
if (!min && !max) {
return 1;
} else {
PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none",
name, (min == max ? "" : "at least "), (int) min);
return 0;
}
}
if (!PyTuple_Check(args)) {
if (min <= 1 && max >= 1) {
Py_ssize_t i;
objs[0] = args;
for (i = 1; i < max; ++i) {
objs[i] = 0;
}
return 2;
}
PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
return 0;
} else {
Py_ssize_t l = PyTuple_GET_SIZE(args);
if (l < min) {
PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d",
name, (min == max ? "" : "at least "), (int) min, (int) l);
return 0;
} else if (l > max) {
PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d",
name, (min == max ? "" : "at most "), (int) max, (int) l);
return 0;
} else {
Py_ssize_t i;
for (i = 0; i < l; ++i) {
objs[i] = PyTuple_GET_ITEM(args, i);
}
for (; l < max; ++l) {
objs[l] = 0;
}
return i + 1;
}
}
}

/* A functor is a function object with one single object argument */
#define
SWIG_Python_CallFunctor(functor, obj)            PyObject_CallFunction(functor, (char *)"O", obj);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef
__cplusplus
#define
SWIG_STATIC_POINTER(var)  var
#else
#define
SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define
SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define
SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define
SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define
SWIG_BUILTIN_TP_INIT        (SWIG_POINTER_OWN << 2)
#define
SWIG_BUILTIN_INIT        (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef
__cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject *
SWIG_Py_Void(void) {
PyObject *none = Py_None;
Py_INCREF(none);
return none;
}

/* SwigPyClientData */

typedef struct {
PyObject *klass;
PyObject *newraw;
PyObject *newargs;
PyObject *destroy;
int delargs;
int implicitconv;
PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int
SWIG_Python_CheckImplicit(swig_type_info *ty) {
SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
int fail = data ? data->implicitconv : 0;
if (fail)
PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
PyObject *klass = data ? data->klass : 0;
return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData *
SwigPyClientData_New(PyObject *obj) {
if (!obj) {
return 0;
} else {
SwigPyClientData *data = (SwigPyClientData *) malloc(sizeof(SwigPyClientData));
/* the klass element */
data->klass = obj;
Py_INCREF(data->klass);
/* the newraw method and newargs arguments used to create a new raw instance */
if (PyClass_Check(obj)) {
data->newraw = 0;
data->newargs = obj;
Py_INCREF(obj);
} else {
data->newraw = PyObject_GetAttrString(data->klass, "__new__");
if (data->newraw) {
Py_INCREF(data->newraw);
data->newargs = PyTuple_New(1);
PyTuple_SetItem(data->newargs, 0, obj);
} else {
data->newargs = obj;
}
Py_INCREF(data->newargs);
}
/* the destroy method, aka as the C++ delete method */
data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
if (PyErr_Occurred()) {
PyErr_Clear();
data->destroy = 0;
}
if (data->destroy) {
int flags;
Py_INCREF(data->destroy);
flags = PyCFunction_GET_FLAGS(data->destroy);
data->delargs = !(flags & (METH_O));
} else {
data->delargs = 0;
}
data->implicitconv = 0;
data->pytype = 0;
return data;
}
}

SWIGRUNTIME void
SwigPyClientData_Del(SwigPyClientData *data) {
Py_XDECREF(data->newraw);
Py_XDECREF(data->newargs);
Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
PyObject_HEAD
void *ptr;
swig_type_info *ty;
int own;
PyObject *next;
#ifdef
SWIGPYTHON_BUILTIN
PyObject *dict;
#endif
} SwigPyObject;


#ifdef
SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
SwigPyObject *sobj = (SwigPyObject *)v;

if (!sobj->dict)
sobj->dict = PyDict_New();

Py_INCREF(sobj->dict);
return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v) {
return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char *fmt, SwigPyObject *v) {
PyObject *res = NULL;
PyObject *args = PyTuple_New(1);
if (args) {
if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
if (ofmt) {
#if
PY_VERSION_HEX >= 0x03000000
res = PyUnicode_Format(ofmt, args);
#else
res = PyString_Format(ofmt, args);
#endif
Py_DECREF(ofmt);
}
Py_DECREF(args);
}
}
return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v) {
return SwigPyObject_format("%o", v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v) {
return SwigPyObject_format("%x", v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v) {
const char *name = SWIG_TypePrettyName(v->ty);
PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"),
(void *) v);
if (v->next) {
PyObject *nrep = SwigPyObject_repr((SwigPyObject *) v->next);
# if
PY_VERSION_HEX >= 0x03000000
PyObject *joined = PyUnicode_Concat(repr, nrep);
Py_DecRef(repr);
Py_DecRef(nrep);
repr = joined;
# else
PyString_ConcatAndDel(&repr, nrep);
# endif
}
return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args)) {
return SwigPyObject_repr((SwigPyObject *) v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w) {
void *i = v->ptr;
void *j = w->ptr;
return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject *
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op) {
PyObject *res;
if (op != Py_EQ && op != Py_NE) {
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}
res = PyBool_FromLong((SwigPyObject_compare(v, w) == 0) == (op == Py_EQ) ? 1 : 0);
return res;
}


SWIGRUNTIME PyTypeObject *SwigPyObject_TypeOnce(void);

#ifdef
SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
SwigPyClientData *cd;
assert(SwigPyObject_stype);
cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
assert(cd);
assert(cd->pytype);
return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject *
SwigPyObject_type(void) {
static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef
SWIGPYTHON_BUILTIN
PyTypeObject *target_tp = SwigPyObject_type();
if (PyType_IsSubtype(op->ob_type, target_tp))
return 1;
return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
return (Py_TYPE(op) == SwigPyObject_type())
|| (strcmp(Py_TYPE(op)->tp_name, "SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v) {
SwigPyObject *sobj = (SwigPyObject *) v;
PyObject *next = sobj->next;
if (sobj->own == SWIG_POINTER_OWN) {
swig_type_info *ty = sobj->ty;
SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
PyObject *destroy = data ? data->destroy : 0;
if (destroy) {
/* destroy is always a VARARGS method */
PyObject *res;

/* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */

PyObject *type = NULL, *value = NULL, *traceback = NULL;
PyErr_Fetch(&type, &value, &traceback);

if (data->delargs) {
/* we need to create a temporary object to carry the destroy operation */
PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
res = SWIG_Python_CallFunctor(destroy, tmp);
Py_DECREF(tmp);
} else {
PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
PyObject *mself = PyCFunction_GET_SELF(destroy);
res = ((*meth)(mself, v));
}
if (!res)
PyErr_WriteUnraisable(destroy);

PyErr_Restore(type, value, traceback);

Py_XDECREF(res);
}
#if
!defined(SWIG_PYTHON_SILENT_MEMLEAK)
else {
const char *name = SWIG_TypePrettyName(ty);
printf("swig/python detected a memory leak of type '%s', no destructor found.\n",
(name ? name : "unknown"));
}
#endif
}
Py_XDECREF(next);
PyObject_DEL(v);
}

SWIGRUNTIME PyObject *
SwigPyObject_append(PyObject *v, PyObject *next) {
SwigPyObject *sobj = (SwigPyObject *) v;
if (!SwigPyObject_Check(next)) {
PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
return NULL;
}
sobj->next = next;
Py_INCREF(next);
return SWIG_Py_Void();
}

SWIGRUNTIME PyObject *
SwigPyObject_next(PyObject *v, PyObject *SWIGUNUSEDPARM(args)) {
SwigPyObject *sobj = (SwigPyObject *) v;
if (sobj->next) {
Py_INCREF(sobj->next);
return sobj->next;
} else {
return SWIG_Py_Void();
}
}

SWIGINTERN PyObject *
SwigPyObject_disown(PyObject *v, PyObject *SWIGUNUSEDPARM(args)) {
SwigPyObject *sobj = (SwigPyObject *) v;
sobj->own = 0;
return SWIG_Py_Void();
}

SWIGINTERN PyObject *
SwigPyObject_acquire(PyObject *v, PyObject *SWIGUNUSEDPARM(args)) {
SwigPyObject *sobj = (SwigPyObject *) v;
sobj->own = SWIG_POINTER_OWN;
return SWIG_Py_Void();
}

SWIGINTERN PyObject *
SwigPyObject_own(PyObject *v, PyObject *args) {
PyObject *val = 0;
if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
return NULL;
} else {
SwigPyObject *sobj = (SwigPyObject *) v;
PyObject *obj = PyBool_FromLong(sobj->own);
if (val) {
if (PyObject_IsTrue(val)) {
SwigPyObject_acquire(v, args);
} else {
SwigPyObject_disown(v, args);
}
}
return obj;
}
}

static PyMethodDef
swigobject_methods[] = {
{
"disown", SwigPyObject_disown, METH_NOARGS, "releases ownership of the pointer"
},
{
"acquire", SwigPyObject_acquire, METH_NOARGS, "acquires ownership of the pointer"
},
{
"own", SwigPyObject_own, METH_VARARGS, "returns/sets ownership of the pointer"
},
{
"append", SwigPyObject_append, METH_O, "appends another 'this' object"
},
{"next", SwigPyObject_next, METH_NOARGS, "returns the next 'this' object"
},
{
"__repr__", SwigPyObject_repr2, METH_NOARGS, "returns object representation"
},
{
0, 0, 0, 0
}
};

SWIGRUNTIME PyTypeObject *
SwigPyObject_TypeOnce(void) {
static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

static PyNumberMethods SwigPyObject_as_number = {
(binaryfunc) 0, /*nb_add*/
(binaryfunc) 0, /*nb_subtract*/
(binaryfunc) 0, /*nb_multiply*/
/* nb_divide removed in Python 3 */
#if
PY_VERSION_HEX < 0x03000000
(binaryfunc) 0, /*nb_divide*/
#endif
(binaryfunc) 0, /*nb_remainder*/
(binaryfunc) 0, /*nb_divmod*/
(ternaryfunc) 0,/*nb_power*/
(unaryfunc) 0,  /*nb_negative*/
(unaryfunc) 0,  /*nb_positive*/
(unaryfunc) 0,  /*nb_absolute*/
(inquiry) 0,    /*nb_nonzero*/
0,           /*nb_invert*/
0,           /*nb_lshift*/
0,           /*nb_rshift*/
0,           /*nb_and*/
0,           /*nb_xor*/
0,           /*nb_or*/
#if
PY_VERSION_HEX < 0x03000000
0,   /*nb_coerce*/
#endif
(unaryfunc) SwigPyObject_long, /*nb_int*/
#if
PY_VERSION_HEX < 0x03000000
(unaryfunc) SwigPyObject_long, /*nb_long*/
#else
0, /*nb_reserved*/
#endif
(unaryfunc) 0,                 /*nb_float*/
#if
PY_VERSION_HEX < 0x03000000
(unaryfunc) SwigPyObject_oct,  /*nb_oct*/
(unaryfunc) SwigPyObject_hex,  /*nb_hex*/
#endif
#if
PY_VERSION_HEX >= 0x03050000 /* 3.5 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif
PY_VERSION_HEX >= 0x03000000 /* 3.0 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /* nb_inplace_add -> nb_index */
#endif
};

static PyTypeObject swigpyobject_type;
static int type_init = 0;
if (!type_init) {
const PyTypeObject tmp = {
#if
PY_VERSION_HEX >= 0x03000000
PyVarObject_HEAD_INIT(NULL, 0)
#else
PyObject_HEAD_INIT(NULL)
0,                                    /* ob_size */
#endif
"SwigPyObject",                       /* tp_name */
sizeof(SwigPyObject),                 /* tp_basicsize */
0,                                    /* tp_itemsize */
(destructor)SwigPyObject_dealloc,     /* tp_dealloc */
0,                                    /* tp_print */
(getattrfunc)0,                       /* tp_getattr */
(setattrfunc)0,                       /* tp_setattr */
#if
PY_VERSION_HEX >= 0x03000000
0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
(cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
(reprfunc)SwigPyObject_repr,          /* tp_repr */
&SwigPyObject_as_number,              /* tp_as_number */
0,                                    /* tp_as_sequence */
0,                                    /* tp_as_mapping */
(hashfunc)0,                          /* tp_hash */
(ternaryfunc)0,                       /* tp_call */
0,                                    /* tp_str */
PyObject_GenericGetAttr,              /* tp_getattro */
0,                                    /* tp_setattro */
0,                                    /* tp_as_buffer */
Py_TPFLAGS_DEFAULT,                   /* tp_flags */
swigobject_doc,                       /* tp_doc */
0,                                    /* tp_traverse */
0,                                    /* tp_clear */
(richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
0,                                    /* tp_weaklistoffset */
0,                                    /* tp_iter */
0,                                    /* tp_iternext */
swigobject_methods,                   /* tp_methods */
0,                                    /* tp_members */
0,                                    /* tp_getset */
0,                                    /* tp_base */
0,                                    /* tp_dict */
0,                                    /* tp_descr_get */
0,                                    /* tp_descr_set */
0,                                    /* tp_dictoffset */
0,                                    /* tp_init */
0,                                    /* tp_alloc */
0,                                    /* tp_new */
0,                                    /* tp_free */
0,                                    /* tp_is_gc */
0,                                    /* tp_bases */
0,                                    /* tp_mro */
0,                                    /* tp_cache */
0,                                    /* tp_subclasses */
0,                                    /* tp_weaklist */
0,                                    /* tp_del */
0,                                    /* tp_version_tag */
#if
PY_VERSION_HEX >= 0x03040000
0,                                    /* tp_finalize */
#endif
#ifdef
COUNT_ALLOCS
0,                                    /* tp_allocs */
0,                                    /* tp_frees */
0,                                    /* tp_maxalloc */
0,                                    /* tp_prev */
0                                     /* tp_next */
#endif
};
swigpyobject_type = tmp;
type_init = 1;
if (PyType_Ready(&swigpyobject_type) < 0)
return NULL;
}
return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own) {
SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
if (sobj) {
sobj->ptr = ptr;
sobj->ty = ty;
sobj->own = own;
sobj->next = 0;
}
return (PyObject *) sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
PyObject_HEAD
void *pack;
swig_type_info *ty;
size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v) {
char result[SWIG_BUFFER_SIZE];
if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
} else {
return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
}
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v) {
char result[SWIG_BUFFER_SIZE];
if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
} else {
return SWIG_Python_str_FromChar(v->ty->name);
}
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w) {
size_t i = v->size;
size_t j = w->size;
int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
return s ? s : strncmp((const char *) v->pack, (const char *) w->pack, 2 * v->size);
}

SWIGRUNTIME PyTypeObject *SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject *
SwigPyPacked_type(void) {
static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
return ((op)->ob_type == SwigPyPacked_TypeOnce())
|| (strcmp((op)->ob_type->tp_name, "SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v) {
if (SwigPyPacked_Check(v)) {
SwigPyPacked *sobj = (SwigPyPacked *) v;
free(sobj->pack);
}
PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject *
SwigPyPacked_TypeOnce(void) {
static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
static PyTypeObject swigpypacked_type;
static int type_init = 0;
if (!type_init) {
const PyTypeObject tmp = {
#if
PY_VERSION_HEX >= 0x03000000
PyVarObject_HEAD_INIT(NULL, 0)
#else
PyObject_HEAD_INIT(NULL)
0,                                    /* ob_size */
#endif
"SwigPyPacked",                       /* tp_name */
sizeof(SwigPyPacked),                 /* tp_basicsize */
0,                                    /* tp_itemsize */
(destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
0,                                    /* tp_print */
(getattrfunc)0,                       /* tp_getattr */
(setattrfunc)0,                       /* tp_setattr */
#if
PY_VERSION_HEX >= 0x03000000
0, /* tp_reserved in 3.0.1 */
#else
(cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
(reprfunc)SwigPyPacked_repr,          /* tp_repr */
0,                                    /* tp_as_number */
0,                                    /* tp_as_sequence */
0,                                    /* tp_as_mapping */
(hashfunc)0,                          /* tp_hash */
(ternaryfunc)0,                       /* tp_call */
(reprfunc)SwigPyPacked_str,           /* tp_str */
PyObject_GenericGetAttr,              /* tp_getattro */
0,                                    /* tp_setattro */
0,                                    /* tp_as_buffer */
Py_TPFLAGS_DEFAULT,                   /* tp_flags */
swigpacked_doc,                       /* tp_doc */
0,                                    /* tp_traverse */
0,                                    /* tp_clear */
0,                                    /* tp_richcompare */
0,                                    /* tp_weaklistoffset */
0,                                    /* tp_iter */
0,                                    /* tp_iternext */
0,                                    /* tp_methods */
0,                                    /* tp_members */
0,                                    /* tp_getset */
0,                                    /* tp_base */
0,                                    /* tp_dict */
0,                                    /* tp_descr_get */
0,                                    /* tp_descr_set */
0,                                    /* tp_dictoffset */
0,                                    /* tp_init */
0,                                    /* tp_alloc */
0,                                    /* tp_new */
0,                                    /* tp_free */
0,                                    /* tp_is_gc */
0,                                    /* tp_bases */
0,                                    /* tp_mro */
0,                                    /* tp_cache */
0,                                    /* tp_subclasses */
0,                                    /* tp_weaklist */
0,                                    /* tp_del */
0,                                    /* tp_version_tag */
#if
PY_VERSION_HEX >= 0x03040000
0,                                    /* tp_finalize */
#endif
#ifdef
COUNT_ALLOCS
0,                                    /* tp_allocs */
0,                                    /* tp_frees */
0,                                    /* tp_maxalloc */
0,                                    /* tp_prev */
0                                     /* tp_next */
#endif
};
swigpypacked_type = tmp;
type_init = 1;
if (PyType_Ready(&swigpypacked_type) < 0)
return NULL;
}
return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty) {
SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
if (sobj) {
void *pack = malloc(size);
if (pack) {
memcpy(pack, ptr, size);
sobj->pack = pack;
sobj->ty = ty;
sobj->size = size;
} else {
PyObject_DEL((PyObject *) sobj);
sobj = 0;
}
}
return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size) {
if (SwigPyPacked_Check(obj)) {
SwigPyPacked *sobj = (SwigPyPacked *) obj;
if (sobj->size != size) return 0;
memcpy(ptr, sobj->pack, size);
return sobj->ty;
} else {
return 0;
}
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void) {
if (Swig_This_global == NULL)
Swig_This_global = SWIG_Python_str_FromChar("this");
return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if
PY_VERSION_HEX >= 0x03000000
#define
SWIG_PYTHON_SLOW_GETSET_THIS
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) {
PyObject *obj;

if (SwigPyObject_Check(pyobj))
return (SwigPyObject *) pyobj;

#ifdef
SWIGPYTHON_BUILTIN
(void)obj;
# ifdef
PyWeakref_CheckProxy
if (PyWeakref_CheckProxy(pyobj)) {
pyobj = PyWeakref_GET_OBJECT(pyobj);
if (pyobj && SwigPyObject_Check(pyobj))
return (SwigPyObject*) pyobj;
}
# endif
return NULL;
#else

obj = 0;

#if
!defined(SWIG_PYTHON_SLOW_GETSET_THIS)
if (PyInstance_Check(pyobj)) {
obj = _PyInstance_Lookup(pyobj, SWIG_This());
} else {
PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
if (dictptr != NULL) {
PyObject *dict = *dictptr;
obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
} else {
#ifdef
PyWeakref_CheckProxy
if (PyWeakref_CheckProxy(pyobj)) {
PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
}
#endif
obj = PyObject_GetAttr(pyobj, SWIG_This());
if (obj) {
Py_DECREF(obj);
} else {
if (PyErr_Occurred()) PyErr_Clear();
return 0;
}
}
}
#else
obj = PyObject_GetAttr(pyobj, SWIG_This());
if (obj) {
Py_DECREF(obj);
} else {
if (PyErr_Occurred()) PyErr_Clear();
return 0;
}
#endif
if (obj && !SwigPyObject_Check(obj)) {
/* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */
return SWIG_Python_GetSwigThis(obj);
}
return (SwigPyObject *) obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
if (own == SWIG_POINTER_OWN) {
SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
if (sobj) {
int oldown = sobj->own;
sobj->own = own;
return oldown;
}
}
return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
int res;
SwigPyObject *sobj;
int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

if (!obj)
return SWIG_ERROR;
if (obj == Py_None && !implicit_conv) {
if (ptr)
*ptr = 0;
return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
}

res = SWIG_ERROR;

sobj = SWIG_Python_GetSwigThis(obj);
if (own)
*own = 0;
while (sobj) {
void *vptr = sobj->ptr;
if (ty) {
swig_type_info *to = sobj->ty;
if (to == ty) {
/* no type cast needed */
if (ptr) *ptr = vptr;
break;
} else {
swig_cast_info *tc = SWIG_TypeCheck(to->name, ty);
if (!tc) {
sobj = (SwigPyObject *) sobj->next;
} else {
if (ptr) {
int newmemory = 0;
*ptr = SWIG_TypeCast(tc, vptr, &newmemory);
if (newmemory == SWIG_CAST_NEW_MEMORY) {
assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
if (own)
*own = *own | SWIG_CAST_NEW_MEMORY;
}
}
break;
}
}
} else {
if (ptr) *ptr = vptr;
break;
}
}
if (sobj) {
if (own)
*own = *own | sobj->own;
if (flags & SWIG_POINTER_DISOWN) {
sobj->own = 0;
}
res = SWIG_OK;
} else {
if (implicit_conv) {
SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
if (data && !data->implicitconv) {
PyObject *klass = data->klass;
if (klass) {
PyObject *impconv;
data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
impconv = SWIG_Python_CallFunctor(klass, obj);
data->implicitconv = 0;
if (PyErr_Occurred()) {
PyErr_Clear();
impconv = 0;
}
if (impconv) {
SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
if (iobj) {
void *vptr;
res = SWIG_Python_ConvertPtrAndOwn((PyObject *) iobj, &vptr, ty, 0, 0);
if (SWIG_IsOK(res)) {
if (ptr) {
*ptr = vptr;
/* transfer the ownership to 'ptr' */
iobj->own = 0;
res = SWIG_AddCast(res);
res = SWIG_AddNewMask(res);
} else {
res = SWIG_AddCast(res);
}
}
}
Py_DECREF(impconv);
}
}
}
if (!SWIG_IsOK(res) && obj == Py_None) {
if (ptr)
*ptr = 0;
if (PyErr_Occurred())
PyErr_Clear();
res = SWIG_OK;
}
}
}
return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
if (!PyCFunction_Check(obj)) {
return SWIG_ConvertPtr(obj, ptr, ty, 0);
} else {
void *vptr = 0;
swig_cast_info *tc;

/* here we get the method pointer for callbacks */
const char *doc = (((PyCFunctionObject *) obj)->m_ml->ml_doc);
const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
if (desc)
desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
if (!desc)
return SWIG_ERROR;
tc = SWIG_TypeCheck(desc, ty);
if (tc) {
int newmemory = 0;
*ptr = SWIG_TypeCast(tc, vptr, &newmemory);
assert(!newmemory); /* newmemory handling not yet implemented */
} else {
return SWIG_ERROR;
}
return SWIG_OK;
}
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
if (!to) return SWIG_ERROR;
if (ty) {
if (to != ty) {
/* check type cast? */
swig_cast_info *tc = SWIG_TypeCheck(to->name, ty);
if (!tc) return SWIG_ERROR;
}
}
return SWIG_OK;
}

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject *
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this) {
PyObject *inst = 0;
PyObject *newraw = data->newraw;
if (newraw) {
inst = PyObject_Call(newraw, data->newargs, NULL);
if (inst) {
#if
!defined(SWIG_PYTHON_SLOW_GETSET_THIS)
PyObject **dictptr = _PyObject_GetDictPtr(inst);
if (dictptr != NULL) {
PyObject *dict = *dictptr;
if (dict == NULL) {
dict = PyDict_New();
*dictptr = dict;
PyDict_SetItem(dict, SWIG_This(), swig_this);
}
}
#else
PyObject *key = SWIG_This();
PyObject_SetAttr(inst, key, swig_this);
#endif
}
} else {
#if
PY_VERSION_HEX >= 0x03000000
PyObject *empty_args = PyTuple_New(0);
if (empty_args) {
PyObject *empty_kwargs = PyDict_New();
if (empty_kwargs) {
inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
Py_DECREF(empty_kwargs);
if (inst) {
PyObject_SetAttr(inst, SWIG_This(), swig_this);
Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
}
}
Py_DECREF(empty_args);
}
#else
PyObject *dict = PyDict_New();
if (dict) {
PyDict_SetItem(dict, SWIG_This(), swig_this);
inst = PyInstance_NewRaw(data->newargs, dict);
Py_DECREF(dict);
}
#endif
}
return inst;
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this) {
PyObject *dict;
#if
!defined(SWIG_PYTHON_SLOW_GETSET_THIS)
PyObject **dictptr = _PyObject_GetDictPtr(inst);
if (dictptr != NULL) {
dict = *dictptr;
if (dict == NULL) {
dict = PyDict_New();
*dictptr = dict;
}
PyDict_SetItem(dict, SWIG_This(), swig_this);
return;
}
#endif
dict = PyObject_GetAttrString(inst, "__dict__");
PyDict_SetItem(dict, SWIG_This(), swig_this);
Py_DECREF(dict);
}


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
PyObject *obj[2];
if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
return NULL;
} else {
SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
if (sthis) {
SwigPyObject_append((PyObject *) sthis, obj[1]);
} else {
SWIG_Python_SetSwigThis(obj[0], obj[1]);
}
return SWIG_Py_Void();
}
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
SwigPyClientData *clientdata;
PyObject *robj;
int own;

if (!ptr)
return SWIG_Py_Void();

clientdata = type ? (SwigPyClientData *) (type->clientdata) : 0;
own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
if (clientdata && clientdata->pytype) {
SwigPyObject *newobj;
if (flags & SWIG_BUILTIN_TP_INIT) {
newobj = (SwigPyObject *) self;
if (newobj->ptr) {
PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
while (newobj->next)
newobj = (SwigPyObject *) newobj->next;
newobj->next = next_self;
newobj = (SwigPyObject *) next_self;
#ifdef
SWIGPYTHON_BUILTIN
newobj->dict = 0;
#endif
}
} else {
newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef
SWIGPYTHON_BUILTIN
newobj->dict = 0;
#endif
}
if (newobj) {
newobj->ptr = ptr;
newobj->ty = type;
newobj->own = own;
newobj->next = 0;
return (PyObject *) newobj;
}
return SWIG_Py_Void();
}

assert(!(flags & SWIG_BUILTIN_TP_INIT));

robj = SwigPyObject_New(ptr, type, own);
if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
Py_DECREF(robj);
robj = inst;
}
return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list
 * -----------------------------------------------------------------------------*/

#ifdef
SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
static void *type_pointer = (void *) 0;
/* first check if module already created */
if (!type_pointer) {
#ifdef
SWIG_LINK_RUNTIME
type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
if (PyErr_Occurred()) {
PyErr_Clear();
type_pointer = (void *) 0;
}
#endif
}
return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj) {
swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
swig_type_info **types = swig_module->types;
size_t i;
for (i = 0; i < swig_module->size; ++i) {
swig_type_info *ty = types[i];
if (ty->owndata) {
SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
if (data) SwigPyClientData_Del(data);
}
}
Py_DECREF(SWIG_This());
Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if
PY_VERSION_HEX >= 0x03000000
/* Add a dummy module object into sys.modules */
PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
static PyMethodDef swig_empty_runtime_method_table[] = {
{
NULL, NULL, 0, NULL
}
}; /* Sentinel */
PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
if (pointer && module) {
PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
} else {
Py_XDECREF(pointer);
}
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type) {
PyObject *cache = SWIG_Python_TypeCache();
PyObject *key = SWIG_Python_str_FromChar(type);
PyObject *obj = PyDict_GetItem(cache, key);
swig_type_info *descriptor;
if (obj) {
descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
} else {
swig_module_info *swig_module = SWIG_GetModule(0);
descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
if (descriptor) {
obj = PyCapsule_New((void *) descriptor, NULL, NULL);
PyDict_SetItem(cache, key, obj);
Py_DECREF(obj);
}
}
Py_DECREF(key);
return descriptor;
}

/*
   For backward compatibility only
*/
#define
SWIG_POINTER_EXCEPTION  0
#define
SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define
SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char *mesg, int infront) {
if (PyErr_Occurred()) {
PyObject *type = 0;
PyObject *value = 0;
PyObject *traceback = 0;
PyErr_Fetch(&type, &value, &traceback);
if (value) {
PyObject *old_str = PyObject_Str(value);
const char *tmp = SWIG_Python_str_AsChar(old_str);
const char *errmesg = tmp ? tmp : "Invalid error message";
Py_XINCREF(type);
PyErr_Clear();
if (infront) {
PyErr_Format(type, "%s %s", mesg, errmesg);
} else {
PyErr_Format(type, "%s %s", errmesg, mesg);
}
SWIG_Python_str_DelForPy3(tmp);
Py_DECREF(old_str);
}
return 1;
} else {
return 0;
}
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum) {
if (PyErr_Occurred()) {
/* add information about failing argument */
char mesg[256];
PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
return SWIG_Python_AddErrMesg(mesg, 1);
} else {
return 0;
}
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self) {
SwigPyObject *v = (SwigPyObject *) self;
swig_type_info *ty = v ? v->ty : 0;
return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj) {
if (type) {
#if
defined(SWIG_COBJECT_TYPES)
if (obj && SwigPyObject_Check(obj)) {
const char *otype = (const char *) SwigPyObject_GetDesc(obj);
if (otype) {
PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
type, otype);
return;
}
} else
#endif
{
const char *otype = (obj ? obj->ob_type->tp_name : 0);
if (otype) {
PyObject *str = PyObject_Str(obj);
const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
if (cstr) {
PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
type, otype, cstr);
SWIG_Python_str_DelForPy3(cstr);
} else {
PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
type, otype);
}
Py_XDECREF(str);
return;
}
}
PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
} else {
PyErr_Format(PyExc_TypeError, "unexpected type is received");
}
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
void *result;
if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
PyErr_Clear();
#if
SWIG_POINTER_EXCEPTION
if (flags) {
SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
SWIG_Python_ArgFail(argnum);
}
#endif
}
return result;
}

#ifdef
SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
PyTypeObject *tp = obj->ob_type;
PyObject *descr;
PyObject *encoded_name;
descrsetfunc f;
int res = -1;

# ifdef
Py_USING_UNICODE
if (PyString_Check(name)) {
name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
if (!name)
return -1;
} else if (!PyUnicode_Check(name))
# else
if (!PyString_Check(name))
# endif
{
PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
return -1;
} else {
Py_INCREF(name);
}

if (!tp->tp_dict) {
if (PyType_Ready(tp) < 0)
goto done;
}

descr = _PyType_Lookup(tp, name);
f = NULL;
if (descr != NULL)
f = descr->ob_type->tp_descr_set;
if (!f) {
if (PyString_Check(name)) {
encoded_name = name;
Py_INCREF(name);
} else {
encoded_name = PyUnicode_AsUTF8String(name);
if (!encoded_name)
return -1;
}
PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
Py_DECREF(encoded_name);
} else {
res = f(descr, obj, value);
}

done:
Py_DECREF(name);
return res;
}
#endif


#ifdef
__cplusplus
}
#endif


#define
SWIG_exception_fail(code, msg) do {
SWIG_Error(code, msg); SWIG_fail; } while (0)

#define
SWIG_contract_assert(expr, msg) if (!(expr)) {
SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else


#ifdef
__cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef
__cplusplus
}
#endif


#define
SWIG_exception(code, msg) do {
SWIG_Error(code, msg); SWIG_fail;; } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef
SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define
Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef
SWIG_DIRECTOR_PYTHON_HEADER_
#define
SWIG_DIRECTOR_PYTHON_HEADER_

#include
<string>
#include
<iostream>
#include
<exception>
#include
<vector>
#include
<map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef
SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef
SWIG_PYTHON_DIRECTOR_VTABLE
#define
SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef
SWIG_DIRECTOR_NO_UEH
#ifndef
SWIG_DIRECTOR_UEH
#define
SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef
SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef
SWIG_DIRECTOR_RTDIR
# define
SWIG_DIRECTOR_RTDIR

namespace Swig {
class Director;
SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
static std::map<void *, Director *> rtdir_map;
return rtdir_map;
}

SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
get_rtdir_map()[vptr] = rtdir;
}

SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
return rtdir;
}
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define
SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define
SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define
SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define
SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
struct swig_type_info;
}

namespace Swig {

/* memory handler */
struct GCItem {
virtual ~GCItem() {
}

virtual int get_own() const {
return 0;
}
};

struct GCItem_var {
GCItem_var(GCItem *item = 0) : _item(item) {
}

GCItem_var &operator=(GCItem *item) {
GCItem *tmp = _item;
_item = item;
delete tmp;
return *this;
}

~GCItem_var() {
delete _item;
}

GCItem *operator->() const {
return _item;
}

private:
GCItem *_item;
};

struct GCItem_Object : GCItem {
GCItem_Object(int own) : _own(own) {
}

virtual ~GCItem_Object() {
}

int get_own() const {
return _own;
}

private:
int _own;
};

template<typename Type>
struct GCItem_T : GCItem {
GCItem_T(Type *ptr) : _ptr(ptr) {
}

virtual ~GCItem_T() {
delete _ptr;
}

private:
Type *_ptr;
};

template<typename Type>
struct GCArray_T : GCItem {
GCArray_T(Type *ptr) : _ptr(ptr) {
}

virtual ~GCArray_T() {
delete[] _ptr;
}

private:
Type *_ptr;
};

/* base class for director exceptions */
class DirectorException :
public std::exception {
protected:
std::string swig_msg;
public:
DirectorException(PyObject *error, const char *hdr = "", const char *msg = "") : swig_msg(hdr) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
if (msg[0]) {
swig_msg += " ";
swig_msg += msg;
}
if (!PyErr_Occurred()) {
PyErr_SetString(error, what());
}
SWIG_PYTHON_THREAD_END_BLOCK;
}

virtual ~DirectorException() throw() {
}

/* Deprecated, use what() instead */
const char *getMessage() const {
return what();
}

const char *what() const throw() {
return swig_msg.c_str();
}

static void raise(PyObject *error, const char *msg) {
throw DirectorException(error, msg);
}

static void raise(const char *msg) {
raise(PyExc_RuntimeError, msg);
}
};

/* unknown exception handler  */
class UnknownExceptionHandler {
#ifdef
SWIG_DIRECTOR_UEH

static void handler() {
try {
throw;
} catch (DirectorException &e) {
std::cerr << "SWIG Director exception caught:" << std::endl
<< e.what() << std::endl;
} catch (std::exception &e) {
std::cerr << "std::exception caught: " << e.what() << std::endl;
} catch (...) {
std::cerr << "Unknown exception caught." << std::endl;
}

std::cerr << std::endl
<< "Python interpreter traceback:" << std::endl;
PyErr_Print();
std::cerr << std::endl;

std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
<< "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
<< std::endl
<< "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
throw;
}

public:

std::unexpected_handler old;

UnknownExceptionHandler(std::unexpected_handler nh = handler) {
old = std::set_unexpected(nh);
}

~UnknownExceptionHandler() {
std::set_unexpected(old);
}

#endif
};

/* type mismatch in the return value from a python method call */
class DirectorTypeMismatchException :
public DirectorException {
public:
DirectorTypeMismatchException(PyObject *error, const char *msg = "")
: DirectorException(error, "SWIG director type mismatch", msg) {
}

DirectorTypeMismatchException(const char *msg = "")
: DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
}

static void raise(PyObject *error, const char *msg) {
throw DirectorTypeMismatchException(error, msg);
}

static void raise(const char *msg) {
throw DirectorTypeMismatchException(msg);
}
};

/* any python exception that occurs during a director method call */
class DirectorMethodException :
public DirectorException {
public:
DirectorMethodException(const char *msg = "")
: DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
}

static void raise(const char *msg) {
throw DirectorMethodException(msg);
}
};

/* attempt to call a pure virtual method via a director method */
class DirectorPureVirtualException :
public DirectorException {
public:
DirectorPureVirtualException(const char *msg = "")
: DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
}

static void raise(const char *msg) {
throw DirectorPureVirtualException(msg);
}
};


#if
defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if
!defined(__THREAD__)
#   define
__THREAD__ 1
# endif
#endif

#ifdef
__THREAD__
# include
"pythread.h"
class Guard {
PyThread_type_lock &mutex_;

public:
Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
PyThread_acquire_lock(mutex_, WAIT_LOCK);
}

~Guard() {
PyThread_release_lock(mutex_);
}
};
# define
SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define
SWIG_GUARD(mutex)
#endif

/* director base class */
class Director {
private:
/* pointer to the wrapped python object */
PyObject *swig_self;
/* flag indicating whether the object is owned by python or c++ */
mutable bool swig_disown_flag;

/* decrement the reference count of the wrapped python object */
void swig_decref() const {
if (swig_disown_flag) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
Py_DECREF(swig_self);
SWIG_PYTHON_THREAD_END_BLOCK;
}
}

public:
/* wrap a python object. */
Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
}

/* discard our reference at destruction */
virtual ~Director() {
swig_decref();
}

/* return a pointer to the wrapped python object */
PyObject *swig_get_self() const {
return swig_self;
}

/* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
void swig_disown() const {
if (!swig_disown_flag) {
swig_disown_flag = true;
swig_incref();
}
}

/* increase the reference count of the wrapped python object */
void swig_incref() const {
if (swig_disown_flag) {
Py_INCREF(swig_self);
}
}

/* methods to implement pseudo protected director members */
virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
return true;
}

virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
}

/* ownership management */
private:
typedef std::map<void *, GCItem_var> swig_ownership_map;
mutable swig_ownership_map swig_owner;
#ifdef
__THREAD__
static PyThread_type_lock swig_mutex_own;
#endif

public:
template<typename Type>
void swig_acquire_ownership_array(Type *vptr) const {
if (vptr) {
SWIG_GUARD(swig_mutex_own);
swig_owner[vptr] = new GCArray_T<Type>(vptr);
}
}

template<typename Type>
void swig_acquire_ownership(Type *vptr) const {
if (vptr) {
SWIG_GUARD(swig_mutex_own);
swig_owner[vptr] = new GCItem_T<Type>(vptr);
}
}

void swig_acquire_ownership_obj(void *vptr, int own) const {
if (vptr && own) {
SWIG_GUARD(swig_mutex_own);
swig_owner[vptr] = new GCItem_Object(own);
}
}

int swig_release_ownership(void *vptr) const {
int own = 0;
if (vptr) {
SWIG_GUARD(swig_mutex_own);
swig_ownership_map::iterator iter = swig_owner.find(vptr);
if (iter != swig_owner.end()) {
own = iter->second->get_own();
swig_owner.erase(iter);
}
}
return own;
}

template<typename Type>
static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
SwigPyObject *sobj = (SwigPyObject *) pyobj;
sobj->own = 0;
Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
if (d)
d->swig_disown();
return PyWeakref_NewProxy(pyobj, NULL);
}
};

#ifdef
__THREAD__
PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define
SWIGTYPE_p_Contact swig_types[0]
#define
SWIGTYPE_p_ContactGenerators swig_types[1]
#define
SWIGTYPE_p_Particles swig_types[2]
#define
SWIGTYPE_p_allocator_type swig_types[3]
#define
SWIGTYPE_p_char swig_types[4]
#define
SWIGTYPE_p_cyclone__Aero swig_types[5]
#define
SWIGTYPE_p_cyclone__AeroControl swig_types[6]
#define
SWIGTYPE_p_cyclone__AeroEx swig_types[7]
#define
SWIGTYPE_p_cyclone__Buoyancy swig_types[8]
#define
SWIGTYPE_p_cyclone__CollisionBox swig_types[9]
#define
SWIGTYPE_p_cyclone__CollisionData swig_types[10]
#define
SWIGTYPE_p_cyclone__CollisionDataEx swig_types[11]
#define
SWIGTYPE_p_cyclone__CollisionDetector swig_types[12]
#define
SWIGTYPE_p_cyclone__CollisionPlane swig_types[13]
#define
SWIGTYPE_p_cyclone__CollisionPrimitive swig_types[14]
#define
SWIGTYPE_p_cyclone__CollisionSphere swig_types[15]
#define SWIGTYPE_p_cyclone__Contact swig_types[16]
#define
SWIGTYPE_p_cyclone__ContactGenerator swig_types[17]
#define
SWIGTYPE_p_cyclone__ContactResolver swig_types[18]
#define
SWIGTYPE_p_cyclone__ForceGenerator swig_types[19]
#define
SWIGTYPE_p_cyclone__ForceRegistry swig_types[20]
#define
SWIGTYPE_p_cyclone__Gravity swig_types[21]
#define
SWIGTYPE_p_cyclone__GroundContacts swig_types[22]
#define
SWIGTYPE_p_cyclone__IntersectionTests swig_types[23]
#define
SWIGTYPE_p_cyclone__Joint swig_types[24]
#define
SWIGTYPE_p_cyclone__Matrix3 swig_types[25]
#define
SWIGTYPE_p_cyclone__Matrix4 swig_types[26]
#define
SWIGTYPE_p_cyclone__Particle swig_types[27]
#define
SWIGTYPE_p_cyclone__ParticleAnchoredBungee swig_types[28]
#define
SWIGTYPE_p_cyclone__ParticleAnchoredSpring swig_types[29]
#define
SWIGTYPE_p_cyclone__ParticleBungee swig_types[30]
#define
SWIGTYPE_p_cyclone__ParticleBuoyancy swig_types[31]
#define
SWIGTYPE_p_cyclone__ParticleCable swig_types[32]
#define
SWIGTYPE_p_cyclone__ParticleCableConstraint swig_types[33]
#define
SWIGTYPE_p_cyclone__ParticleConstraint swig_types[34]
#define
SWIGTYPE_p_cyclone__ParticleContact swig_types[35]
#define
SWIGTYPE_p_cyclone__ParticleContactGenerator swig_types[36]
#define
SWIGTYPE_p_cyclone__ParticleContactResolver swig_types[37]
#define
SWIGTYPE_p_cyclone__ParticleDrag swig_types[38]
#define
SWIGTYPE_p_cyclone__ParticleFakeSpring swig_types[39]
#define
SWIGTYPE_p_cyclone__ParticleForceGenerator swig_types[40]
#define SWIGTYPE_p_cyclone__ParticleForceRegistry swig_types[41]
#define
SWIGTYPE_p_cyclone__ParticleGravity swig_types[42]
#define
SWIGTYPE_p_cyclone__ParticleLink swig_types[43]
#define
SWIGTYPE_p_cyclone__ParticleRod swig_types[44]
#define
SWIGTYPE_p_cyclone__ParticleRodConstraint swig_types[45]
#define
SWIGTYPE_p_cyclone__ParticleSpring swig_types[46]
#define
SWIGTYPE_p_cyclone__ParticleWorld swig_types[47]
#define
SWIGTYPE_p_cyclone__Quaternion swig_types[48]
#define
SWIGTYPE_p_cyclone__Random swig_types[49]
#define
SWIGTYPE_p_cyclone__RigidBody swig_types[50]
#define
SWIGTYPE_p_cyclone__Spring swig_types[51]
#define
SWIGTYPE_p_cyclone__Vector3 swig_types[52]
#define
SWIGTYPE_p_difference_type swig_types[53]
#define
SWIGTYPE_p_double swig_types[54]
#define
SWIGTYPE_p_float swig_types[55]
#define
SWIGTYPE_p_int swig_types[56]
#define
SWIGTYPE_p_p_PyObject swig_types[57]
#define
SWIGTYPE_p_p_cyclone__Particle swig_types[58]
#define
SWIGTYPE_p_p_cyclone__RigidBody swig_types[59]
#define
SWIGTYPE_p_size_type swig_types[60]
#define
SWIGTYPE_p_std__allocatorT_cyclone__Particle_p_t swig_types[61]
#define
SWIGTYPE_p_std__invalid_argument swig_types[62]
#define
SWIGTYPE_p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t swig_types[63]
#define
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t swig_types[64]
#define
SWIGTYPE_p_swig__SwigPyIterator swig_types[65]
static swig_type_info *swig_types[67];
static swig_module_info swig_module = { swig_types, 66, 0, 0, 0, 0 };
#define
SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define
SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef
SWIG_TypeQuery
# undef
SWIG_TypeQuery
#endif
#define
SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _cyclone.so
  ------------------------------------------------*/
#if
PY_VERSION_HEX >= 0x03000000
#  define
SWIG_init    PyInit__cyclone

#else
#  define
SWIG_init    init_cyclone

#endif
#define
SWIG_name    "_cyclone"

#define
SWIGVERSION 0x040000
#define
SWIG_VERSION SWIGVERSION


#define
SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))
#define
SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a), reinterpret_cast< void** >(a))


#include
<stdexcept>


namespace swig {
class SwigPtr_PyObject {
protected:
PyObject *_obj;

public:
SwigPtr_PyObject() : _obj(0) {
}

SwigPtr_PyObject(const SwigPtr_PyObject &item) : _obj(item._obj) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
Py_XINCREF(_obj);
SWIG_PYTHON_THREAD_END_BLOCK;
}

SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) : _obj(obj) {
if (initial_ref) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
Py_XINCREF(_obj);
SWIG_PYTHON_THREAD_END_BLOCK;
}
}

SwigPtr_PyObject &operator=(const SwigPtr_PyObject &item) {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
Py_XINCREF(item._obj);
Py_XDECREF(_obj);
_obj = item._obj;
SWIG_PYTHON_THREAD_END_BLOCK;
return *this;
}

~SwigPtr_PyObject() {
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
Py_XDECREF(_obj);
SWIG_PYTHON_THREAD_END_BLOCK;
}

operator PyObject *() const {
return _obj;
}

PyObject *operator->() const {
return _obj;
}
};
}


namespace swig {
struct SwigVar_PyObject : SwigPtr_PyObject {
SwigVar_PyObject(PyObject *obj = 0) : SwigPtr_PyObject(obj, false) {
}

SwigVar_PyObject &operator=(PyObject *obj) {
Py_XDECREF(_obj);
_obj = obj;
return *this;
}
};
}


#include
"cyclone/cyclone.h"
#include
"cyclone/precision.h"
#include
"cyclone/core.h"
#include
"cyclone/random.h"
#include
"cyclone/particle.h"
#include
"cyclone/body.h"
#include
"cyclone/pcontacts.h"
#include
"cyclone/plinks.h"
#include
"cyclone/pfgen.h"
#include
"cyclone/pworld.h"
#include
"cyclone/collide_fine.h"
#include
"cyclone/contacts.h"
#include
"cyclone/fgen.h"
#include
"cyclone/joints.h"
#include
"cyclone/contacts.h"

using namespace cyclone;


#include
<iostream>

#if
PY_VERSION_HEX >= 0x03020000
# define
SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define
SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include
<typeinfo>
#include
<stdexcept>


#if
defined(__GNUC__)
#  if
__GNUC__ == 2 && __GNUC_MINOR <= 96
#     define
SWIG_STD_NOMODERN_STL
#  endif
#endif


#include
<string>


#include
<stddef.h>


namespace swig {
struct stop_iteration {
};

struct SwigPyIterator {
private:
SwigPtr_PyObject _seq;

protected:
SwigPyIterator(PyObject *seq) : _seq(seq) {
}

public:
virtual ~SwigPyIterator() {
}

// Access iterator method, required by Python
virtual PyObject *value() const = 0;

// Forward iterator method, required by Python
virtual SwigPyIterator *incr(size_t n = 1) = 0;

// Backward iterator method, very common in C++, but not required in Python
virtual SwigPyIterator *decr(size_t /*n*/ = 1) {
throw stop_iteration();
}

// Random access iterator methods, but not required in Python
virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const {
throw std::invalid_argument("operation not supported");
}

virtual bool equal(const SwigPyIterator &/*x*/) const {
throw std::invalid_argument("operation not supported");
}

// C++ common/needed methods
virtual SwigPyIterator *copy() const = 0;

PyObject *next() {
SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads
PyObject *obj = value();
incr();
SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
return obj;
}

/* Make an alias for Python 3.x */
PyObject *__next__() {
return next();
}

PyObject *previous() {
SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads
decr();
PyObject *obj = value();
SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
return obj;
}

SwigPyIterator *advance(ptrdiff_t n) {
return (n > 0) ? incr(n) : decr(-n);
}

bool operator==(const SwigPyIterator &x) const {
return equal(x);
}

bool operator!=(const SwigPyIterator &x) const {
return !operator==(x);
}

SwigPyIterator &operator+=(ptrdiff_t n) {
return *advance(n);
}

SwigPyIterator &operator-=(ptrdiff_t n) {
return *advance(-n);
}

SwigPyIterator *operator+(ptrdiff_t n) const {
return copy()->advance(n);
}

SwigPyIterator *operator-(ptrdiff_t n) const {
return copy()->advance(-n);
}

ptrdiff_t operator-(const SwigPyIterator &x) const {
return x.distance(*this);
}

static swig_type_info *descriptor() {
static int init = 0;
static swig_type_info *desc = 0;
if (!init) {
desc = SWIG_TypeQuery("swig::SwigPyIterator *");
init = 1;
}
return desc;
}
};

#if
defined(SWIGPYTHON_BUILTIN)
inline PyObject* make_output_iterator_builtin (PyObject *pyself)
{
Py_INCREF(pyself);
return pyself;
}
#endif
}


SWIGINTERN int
SWIG_AsVal_double(PyObject *obj, double *val) {
int res = SWIG_TypeError;
if (PyFloat_Check(obj)) {
if (val) *val = PyFloat_AsDouble(obj);
return SWIG_OK;
#if
PY_VERSION_HEX < 0x03000000
} else if (PyInt_Check(obj)) {
if (val) *val = (double) PyInt_AsLong(obj);
return SWIG_OK;
#endif
} else if (PyLong_Check(obj)) {
double v = PyLong_AsDouble(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_OK;
} else {
PyErr_Clear();
}
}
#ifdef
SWIG_PYTHON_CAST_MODE
{
int dispatch = 0;
double d = PyFloat_AsDouble(obj);
if (!PyErr_Occurred()) {
if (val) *val = d;
return SWIG_AddCast(SWIG_OK);
} else {
PyErr_Clear();
}
if (!dispatch) {
long v = PyLong_AsLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
} else {
PyErr_Clear();
}
}
}
#endif
return res;
}


#include
<float.h>


#include
<math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
double x = *d;
if ((min <= x && x <= max)) {
double fx = floor(x);
double cx = ceil(x);
double rd = ((x - fx) < 0.5) ? fx : cx; /* simple rint */
if ((errno == EDOM) || (errno == ERANGE)) {
errno = 0;
} else {
double summ, reps, diff;
if (rd < x) {
diff = x - rd;
} else if (rd > x) {
diff = rd - x;
} else {
return 1;
}
summ = rd + x;
reps = diff / summ;
if (reps < 8 * DBL_EPSILON) {
*d = rd;
return 1;
}
}
}
return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) {
#if
PY_VERSION_HEX < 0x03000000
if (PyInt_Check(obj)) {
long v = PyInt_AsLong(obj);
if (v >= 0) {
if (val) *val = v;
return SWIG_OK;
} else {
return SWIG_OverflowError;
}
} else
#endif
if (PyLong_Check(obj)) {
unsigned long v = PyLong_AsUnsignedLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_OK;
} else {
PyErr_Clear();
return SWIG_OverflowError;
}
}
#ifdef
SWIG_PYTHON_CAST_MODE
{
int dispatch = 0;
unsigned long v = PyLong_AsUnsignedLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_AddCast(SWIG_OK);
} else {
PyErr_Clear();
}
if (!dispatch) {
double d;
int res = SWIG_AddCast(SWIG_AsVal_double (obj, &d));
if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
if (val) *val = (unsigned long)(d);
return res;
}
}
}
#endif
return SWIG_TypeError;
}


#include
<limits.h>

#if
!defined(SWIG_NO_LLONG_MAX)
# if
!defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define
LLONG_MAX __LONG_LONG_MAX__
#   define
LLONG_MIN (-LLONG_MAX - 1LL)
#   define
ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if
defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define
SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef
SWIG_LONG_LONG_AVAILABLE

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long(PyObject *obj, unsigned long long *val) {
int res = SWIG_TypeError;
if (PyLong_Check(obj)) {
unsigned long long v = PyLong_AsUnsignedLongLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_OK;
} else {
PyErr_Clear();
res = SWIG_OverflowError;
}
} else {
unsigned long v;
res = SWIG_AsVal_unsigned_SS_long(obj, &v);
if (SWIG_IsOK(res)) {
if (val) *val = v;
return res;
}
}
#ifdef
SWIG_PYTHON_CAST_MODE
{
const double mant_max = 1LL << DBL_MANT_DIG;
double d;
res = SWIG_AsVal_double (obj, &d);
if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
return SWIG_OverflowError;
if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
if (val) *val = (unsigned long long)(d);
return SWIG_AddCast(res);
}
res = SWIG_TypeError;
}
#endif
return res;
}

#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t(PyObject *obj, size_t *val) {
int res = SWIG_TypeError;
#ifdef
SWIG_LONG_LONG_AVAILABLE
if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
unsigned long v;
res = SWIG_AsVal_unsigned_SS_long(obj, val ? &v : 0);
if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef
SWIG_LONG_LONG_AVAILABLE
} else if (sizeof(size_t) <= sizeof(unsigned long long)) {
unsigned long long v;
res = SWIG_AsVal_unsigned_SS_long_SS_long(obj, val ? &v : 0);
if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
}
#endif
return res;
}


#define
SWIG_From_long   PyInt_FromLong


#ifdef
SWIG_LONG_LONG_AVAILABLE

SWIGINTERNINLINE PyObject *
SWIG_From_long_SS_long(long long value) {
return ((value < LONG_MIN) || (value > LONG_MAX)) ?
PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}

#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t(ptrdiff_t value) {
#ifdef
SWIG_LONG_LONG_AVAILABLE
if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
return SWIG_From_long(static_cast< long >(value));
#ifdef
SWIG_LONG_LONG_AVAILABLE
} else {
/* assume sizeof(ptrdiff_t) <= sizeof(long long) */
return SWIG_From_long_SS_long(static_cast< long long >(value));
}
#endif
}


SWIGINTERNINLINE PyObject *
SWIG_From_bool(bool value) {
return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long(PyObject *obj, long *val) {
#if
PY_VERSION_HEX < 0x03000000
if (PyInt_Check(obj)) {
if (val) *val = PyInt_AsLong(obj);
return SWIG_OK;
} else
#endif
if (PyLong_Check(obj)) {
long v = PyLong_AsLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_OK;
} else {
PyErr_Clear();
return SWIG_OverflowError;
}
}
#ifdef
SWIG_PYTHON_CAST_MODE
{
int dispatch = 0;
long v = PyInt_AsLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_AddCast(SWIG_OK);
} else {
PyErr_Clear();
}
if (!dispatch) {
double d;
int res = SWIG_AddCast(SWIG_AsVal_double (obj, &d));
if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
if (val) *val = (long)(d);
return res;
}
}
}
#endif
return SWIG_TypeError;
}


#ifdef
SWIG_LONG_LONG_AVAILABLE

SWIGINTERN int
SWIG_AsVal_long_SS_long(PyObject *obj, long long *val) {
int res = SWIG_TypeError;
if (PyLong_Check(obj)) {
long long v = PyLong_AsLongLong(obj);
if (!PyErr_Occurred()) {
if (val) *val = v;
return SWIG_OK;
} else {
PyErr_Clear();
res = SWIG_OverflowError;
}
} else {
long v;
res = SWIG_AsVal_long(obj, &v);
if (SWIG_IsOK(res)) {
if (val) *val = v;
return res;
}
}
#ifdef
SWIG_PYTHON_CAST_MODE
{
const double mant_max = 1LL << DBL_MANT_DIG;
const double mant_min = -mant_max;
double d;
res = SWIG_AsVal_double (obj, &d);
if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
return SWIG_OverflowError;
if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
if (val) *val = (long long)(d);
return SWIG_AddCast(res);
}
res = SWIG_TypeError;
}
#endif
return res;
}

#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t(PyObject *obj, ptrdiff_t *val) {
int res = SWIG_TypeError;
#ifdef
SWIG_LONG_LONG_AVAILABLE
if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
long v;
res = SWIG_AsVal_long(obj, val ? &v : 0);
if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef
SWIG_LONG_LONG_AVAILABLE
} else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
long long v;
res = SWIG_AsVal_long_SS_long(obj, val ? &v : 0);
if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
}
#endif
return res;
}


#include
<algorithm>


#include
<vector>


namespace swig {
template<class Type>
struct noconst_traits {
typedef Type noconst_type;
};

template<class Type>
struct noconst_traits<const Type> {
typedef Type noconst_type;
};

/*
    type categories
  */
struct pointer_category {
};
struct value_category {
};

/*
    General traits that provides type_name and type_info
  */
template<class Type>
struct traits {
};

template<class Type>
inline const char *type_name() {
return traits<typename noconst_traits<Type>::noconst_type>::type_name();
}

template<class Type>
struct traits_info {
static swig_type_info *type_query(std::string name) {
name += " *";
return SWIG_TypeQuery(name.c_str());
}

static swig_type_info *type_info() {
static swig_type_info *info = type_query(type_name<Type>());
return info;
}
};

/*
    Partial specialization for pointers (traits_info)
  */
template<class Type>
struct traits_info<Type *> {
static swig_type_info *type_query(std::string name) {
name += " *";
return SWIG_TypeQuery(name.c_str());
}

static swig_type_info *type_info() {
static swig_type_info *info = type_query(type_name<Type>());
return info;
}
};

template<class Type>
inline swig_type_info *type_info() {
return traits_info<Type>::type_info();
}

/*
    Partial specialization for pointers (traits)
  */
template<class Type>
struct traits<Type *> {
typedef pointer_category category;

static std::string make_ptr_name(const char *name) {
std::string ptrname = name;
ptrname += " *";
return ptrname;
}

static const char *type_name() {
static std::string name = make_ptr_name(swig::type_name<Type>());
return name.c_str();
}
};

template<class Type, class Category>
struct traits_as {
};

template<class Type, class Category>
struct traits_check {
};

}


namespace swig {
/*
    Traits that provides the from method
  */
template<class Type>
struct traits_from_ptr {
static PyObject *from(Type *val, int owner = 0) {
return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
}
};

template<class Type>
struct traits_from {
static PyObject *from(const Type &val) {
return traits_from_ptr<Type>::from(new Type(val), 1);
}
};

template<class Type>
struct traits_from<Type *> {
static PyObject *from(Type *val) {
return traits_from_ptr<Type>::from(val, 0);
}
};

template<class Type>
struct traits_from<const Type *> {
static PyObject *from(const Type *val) {
return traits_from_ptr<Type>::from(const_cast<Type *>(val), 0);
}
};


template<class Type>
inline PyObject *from(const Type &val) {
return traits_from<Type>::from(val);
}

template<class Type>
inline PyObject *from_ptr(Type *val, int owner) {
return traits_from_ptr<Type>::from(val, owner);
}

/*
    Traits that provides the asval/as/check method
  */
template<class Type>
struct traits_asptr {
static int asptr(PyObject *obj, Type **val) {
Type *p = 0;
swig_type_info *descriptor = type_info<Type>();
int res = descriptor ? SWIG_ConvertPtr(obj, (void **) &p, descriptor, 0) : SWIG_ERROR;
if (SWIG_IsOK(res)) {
if (val) *val = p;
}
return res;
}
};

template<class Type>
inline int asptr(PyObject *obj, Type **vptr) {
return traits_asptr<Type>::asptr(obj, vptr);
}

template<class Type>
struct traits_asval {
static int asval(PyObject *obj, Type *val) {
if (val) {
Type *p = 0;
int res = traits_asptr<Type>::asptr(obj, &p);
if (!SWIG_IsOK(res)) return res;
if (p) {
typedef typename noconst_traits<Type>::noconst_type noconst_type;
*(const_cast<noconst_type *>(val)) = *p;
if (SWIG_IsNewObj(res)) {
delete p;
res = SWIG_DelNewMask(res);
}
return res;
} else {
return SWIG_ERROR;
}
} else {
return traits_asptr<Type>::asptr(obj, (Type **) (0));
}
}
};

template<class Type>
struct traits_asval<Type *> {
static int asval(PyObject *obj, Type **val) {
if (val) {
typedef typename noconst_traits<Type>::noconst_type noconst_type;
noconst_type *p = 0;
int res = traits_asptr<noconst_type>::asptr(obj, &p);
if (SWIG_IsOK(res)) {
*(const_cast<noconst_type **>(val)) = p;
}
return res;
} else {
return traits_asptr<Type>::asptr(obj, (Type **) (0));
}
}
};

template<class Type>
inline int asval(PyObject *obj, Type *val) {
return traits_asval<Type>::asval(obj, val);
}

template<class Type>
struct traits_as<Type, value_category> {
static Type as(PyObject *obj) {
Type v;
int res = asval(obj, &v);
if (!obj || !SWIG_IsOK(res)) {
if (!PyErr_Occurred()) {
::SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
}
throw std::invalid_argument("bad type");
}
return v;
}
};

template<class Type>
struct traits_as<Type, pointer_category> {
static Type as(PyObject *obj) {
Type *v = 0;
int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
if (SWIG_IsOK(res) && v) {
if (SWIG_IsNewObj(res)) {
Type r(*v);
delete v;
return r;
} else {
return *v;
}
} else {
if (!PyErr_Occurred()) {
SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
}
throw std::invalid_argument("bad type");
}
}
};

template<class Type>
struct traits_as<Type *, pointer_category> {
static Type *as(PyObject *obj) {
Type *v = 0;
int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
if (SWIG_IsOK(res)) {
return v;
} else {
if (!PyErr_Occurred()) {
SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
}
throw std::invalid_argument("bad type");
}
}
};

template<class Type>
inline Type as(PyObject *obj) {
return traits_as<Type, typename traits<Type>::category>::as(obj);
}

template<class Type>
struct traits_check<Type, value_category> {
static bool check(PyObject *obj) {
int res = obj ? asval(obj, (Type *) (0)) : SWIG_ERROR;
return SWIG_IsOK(res) ? true : false;
}
};

template<class Type>
struct traits_check<Type, pointer_category> {
static bool check(PyObject *obj) {
int res = obj ? asptr(obj, (Type **) (0)) : SWIG_ERROR;
return SWIG_IsOK(res) ? true : false;
}
};

template<class Type>
inline bool check(PyObject *obj) {
return traits_check<Type, typename traits<Type>::category>::check(obj);
}
}


#include
<functional>

namespace std {
template<>
struct less<PyObject *> {
bool
operator()(PyObject *v, PyObject *w) const {
bool res;
SWIG_PYTHON_THREAD_BEGIN_BLOCK;
res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
/* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError)) {
/* Objects can't be compared, this mostly occurred in Python 3.0 */
/* Compare their ptr directly for a workaround */
res = (v < w);
PyErr_Clear();
}
SWIG_PYTHON_THREAD_END_BLOCK;
return res;
}
};

template<>
struct less<swig::SwigPtr_PyObject> {
bool
operator()(const swig::SwigPtr_PyObject &v, const swig::SwigPtr_PyObject &w) const {
return std::less<PyObject *>()(v, w);
}
};

template<>
struct less<swig::SwigVar_PyObject> {
bool
operator()(const swig::SwigVar_PyObject &v, const swig::SwigVar_PyObject &w) const {
return std::less<PyObject *>()(v, w);
}
};

}

namespace swig {
template<>
struct traits<PyObject *> {
typedef value_category category;

static const char *type_name() { return "PyObject *"; }
};

template<>
struct traits_asval<PyObject *> {
typedef PyObject *value_type;

static int asval(PyObject *obj, value_type *val) {
if (val) *val = obj;
return SWIG_OK;
}
};

template<>
struct traits_check<PyObject *, value_category> {
static bool check(PyObject *) {
return true;
}
};

template<>
struct traits_from<PyObject *> {
typedef PyObject *value_type;

static PyObject *from(const value_type &val) {
Py_XINCREF(val);
return val;
}
};

}

namespace swig {
template<class Difference>
inline size_t
check_index(Difference i, size_t size, bool insert = false) {
if (i < 0) {
if ((size_t) (-i) <= size)
return (size_t) (i + size);
} else if ((size_t) i < size) {
return (size_t) i;
} else if (insert && ((size_t) i == size)) {
return size;
}
throw std::out_of_range("index out of range");
}

template<class Difference>
void
slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj,
bool insert = false) {
if (step == 0) {
throw std::invalid_argument("slice step cannot be zero");
} else if (step > 0) {
// Required range: 0 <= i < size, 0 <= j < size, i <= j
if (i < 0) {
ii = 0;
} else if (i < (Difference) size) {
ii = i;
} else if (insert && (i >= (Difference) size)) {
ii = (Difference) size;
}
if (j < 0) {
jj = 0;
} else {
jj = (j < (Difference) size) ? j : (Difference) size;
}
if (jj < ii)
jj = ii;
} else {
// Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
if (i < -1) {
ii = -1;
} else if (i < (Difference) size) {
ii = i;
} else if (i >= (Difference) (size - 1)) {
ii = (Difference) (size - 1);
}
if (j < -1) {
jj = -1;
} else {
jj = (j < (Difference) size) ? j : (Difference) (size - 1);
}
if (ii < jj)
ii = jj;
}
}

template<class Sequence, class Difference>
inline typename Sequence::iterator
getpos(Sequence *self, Difference i) {
typename Sequence::iterator pos = self->begin();
std::advance(pos, check_index(i, self->size()));
return pos;
}

template<class Sequence, class Difference>
inline typename Sequence::const_iterator
cgetpos(const Sequence *self, Difference i) {
typename Sequence::const_iterator pos = self->begin();
std::advance(pos, check_index(i, self->size()));
return pos;
}

template<class Sequence>
inline void
erase(Sequence *seq, const typename Sequence::iterator &position) {
seq->erase(position);
}

template<class Sequence>
struct traits_reserve {
static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
// This should be specialized for types that support reserve
}
};

template<class Sequence, class Difference>
inline Sequence *
getslice(const Sequence *self, Difference i, Difference j, Py_ssize_t step) {
typename Sequence::size_type size = self->size();
Difference ii = 0;
Difference jj = 0;
swig::slice_adjust(i, j, step, size, ii, jj);

if (step > 0) {
typename Sequence::const_iterator sb = self->begin();
typename Sequence::const_iterator se = self->begin();
std::advance(sb, ii);
std::advance(se, jj);
if (step == 1) {
return new Sequence(sb, se);
} else {
Sequence *sequence = new Sequence();
swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
typename Sequence::const_iterator it = sb;
while (it != se) {
sequence->push_back(*it);
for (Py_ssize_t c = 0; c < step && it != se; ++c)
it++;
}
return sequence;
}
} else {
Sequence *sequence = new Sequence();
swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
typename Sequence::const_reverse_iterator sb = self->rbegin();
typename Sequence::const_reverse_iterator se = self->rbegin();
std::advance(sb, size - ii - 1);
std::advance(se, size - jj - 1);
typename Sequence::const_reverse_iterator it = sb;
while (it != se) {
sequence->push_back(*it);
for (Py_ssize_t c = 0; c < -step && it != se; ++c)
it++;
}
return sequence;
}
}

template<class Sequence, class Difference, class InputSeq>
inline void
setslice(Sequence *self, Difference i, Difference j, Py_ssize_t step, const InputSeq &is = InputSeq()) {
typename Sequence::size_type size = self->size();
Difference ii = 0;
Difference jj = 0;
swig::slice_adjust(i, j, step, size, ii, jj, true);
if (step > 0) {
if (step == 1) {
size_t ssize = jj - ii;
if (ssize <= is.size()) {
// expanding/staying the same size
swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
typename Sequence::iterator sb = self->begin();
typename InputSeq::const_iterator isit = is.begin();
std::advance(sb, ii);
std::advance(isit, jj - ii);
self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
} else {
// shrinking
typename Sequence::iterator sb = self->begin();
typename Sequence::iterator se = self->begin();
std::advance(sb, ii);
std::advance(se, jj);
self->erase(sb, se);
sb = self->begin();
std::advance(sb, ii);
self->insert(sb, is.begin(), is.end());
}
} else {
size_t replacecount = (jj - ii + step - 1) / step;
if (is.size() != replacecount) {
char msg[1024];
sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu",
(unsigned long) is.size(), (unsigned long) replacecount);
throw std::invalid_argument(msg);
}
typename Sequence::const_iterator isit = is.begin();
typename Sequence::iterator it = self->begin();
std::advance(it, ii);
for (size_t rc = 0; rc < replacecount && it != self->end(); ++rc) {
*it++ = *isit++;
for (Py_ssize_t c = 0; c < (step - 1) && it != self->end(); ++c)
it++;
}
}
} else {
size_t replacecount = (ii - jj - step - 1) / -step;
if (is.size() != replacecount) {
char msg[1024];
sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu",
(unsigned long) is.size(), (unsigned long) replacecount);
throw std::invalid_argument(msg);
}
typename Sequence::const_iterator isit = is.begin();
typename Sequence::reverse_iterator it = self->rbegin();
std::advance(it, size - ii - 1);
for (size_t rc = 0; rc < replacecount && it != self->rend(); ++rc) {
*it++ = *isit++;
for (Py_ssize_t c = 0; c < (-step - 1) && it != self->rend(); ++c)
it++;
}
}
}

template<class Sequence, class Difference>
inline void
delslice(Sequence *self, Difference i, Difference j, Py_ssize_t step) {
typename Sequence::size_type size = self->size();
Difference ii = 0;
Difference jj = 0;
swig::slice_adjust(i, j, step, size, ii, jj, true);
if (step > 0) {
typename Sequence::iterator sb = self->begin();
std::advance(sb, ii);
if (step == 1) {
typename Sequence::iterator se = self->begin();
std::advance(se, jj);
self->erase(sb, se);
} else {
typename Sequence::iterator it = sb;
size_t delcount = (jj - ii + step - 1) / step;
while (delcount) {
it = self->erase(it);
for (Py_ssize_t c = 0; c < (step - 1) && it != self->end(); ++c)
it++;
delcount--;
}
}
} else {
typename Sequence::reverse_iterator sb = self->rbegin();
std::advance(sb, size - ii - 1);
typename Sequence::reverse_iterator it = sb;
size_t delcount = (ii - jj - step - 1) / -step;
while (delcount) {
it = typename Sequence::reverse_iterator(self->erase((++it).base()));
for (Py_ssize_t c = 0; c < (-step - 1) && it != self->rend(); ++c)
it++;
delcount--;
}
}
}
}


#if
defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if
!defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define
SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if
!defined(SWIG_STD_NOITERATOR_TRAITS_STL)

#include
<iterator>

#else
namespace std {
template <class Iterator>
struct iterator_traits {
typedef ptrdiff_t difference_type;
typedef typename Iterator::value_type value_type;
};

template <class Iterator, class Category, class T, class Reference, class Pointer, class Distance>
struct iterator_traits<__reverse_bi_iterator<Iterator, Category, T, Reference, Pointer, Distance> > {
typedef Distance difference_type;
typedef T value_type;
};

template <class T>
struct iterator_traits<T*> {
typedef T value_type;
typedef ptrdiff_t difference_type;
};

template<typename _InputIterator>
inline typename iterator_traits<_InputIterator>::difference_type
distance(_InputIterator __first, _InputIterator __last)
{
typename iterator_traits<_InputIterator>::difference_type __n = 0;
while (__first != __last) {
++__first; ++__n;
}
return __n;
}
}
#endif


namespace swig {
template<typename OutIterator>
class SwigPyIterator_T :
public SwigPyIterator {
public:
typedef OutIterator out_iterator;
typedef typename std::iterator_traits<out_iterator>::value_type value_type;
typedef SwigPyIterator_T<out_iterator> self_type;

SwigPyIterator_T(out_iterator curr, PyObject *seq)
: SwigPyIterator(seq), current(curr) {
}

const out_iterator &get_current() const {
return current;
}


bool equal(const SwigPyIterator &iter) const {
const self_type *iters = dynamic_cast<const self_type *>(&iter);
if (iters) {
return (current == iters->get_current());
} else {
throw std::invalid_argument("bad iterator type");
}
}

ptrdiff_t distance(const SwigPyIterator &iter) const {
const self_type *iters = dynamic_cast<const self_type *>(&iter);
if (iters) {
return std::distance(current, iters->get_current());
} else {
throw std::invalid_argument("bad iterator type");
}
}

protected:
out_iterator current;
};

template<class ValueType>
struct from_oper {
typedef const ValueType &argument_type;
typedef PyObject *result_type;

result_type operator()(argument_type v) const {
return swig::from(v);
}
};

template<typename OutIterator,
typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
typename FromOper = from_oper<ValueType> >
class SwigPyForwardIteratorOpen_T :
public SwigPyIterator_T<OutIterator> {
public:
FromOper from;
typedef OutIterator out_iterator;
typedef ValueType value_type;
typedef SwigPyIterator_T<out_iterator> base;
typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;

SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
: SwigPyIterator_T<OutIterator>(curr, seq) {
}

PyObject *value() const {
return from(static_cast<const value_type &>(*(base::current)));
}

SwigPyIterator *copy() const {
return new self_type(*this);
}

SwigPyIterator *incr(size_t n = 1) {
while (n--) {
++base::current;
}
return this;
}

};

template<typename OutIterator,
typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
typename FromOper = from_oper<ValueType> >
class SwigPyIteratorOpen_T :
public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> {
public:
FromOper from;
typedef OutIterator out_iterator;
typedef ValueType value_type;
typedef SwigPyIterator_T<out_iterator> base;
typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;

SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
: SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq) {
}

SwigPyIterator *decr(size_t n = 1) {
while (n--) {
--base::current;
}
return this;
}
};

template<typename OutIterator,
typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
typename FromOper = from_oper<ValueType> >
class SwigPyForwardIteratorClosed_T :
public SwigPyIterator_T<OutIterator> {
public:
FromOper from;
typedef OutIterator out_iterator;
typedef ValueType value_type;
typedef SwigPyIterator_T<out_iterator> base;
typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;

SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
: SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last) {
}

PyObject *value() const {
if (base::current == end) {
throw stop_iteration();
} else {
return from(static_cast<const value_type &>(*(base::current)));
}
}

SwigPyIterator *copy() const {
return new self_type(*this);
}

SwigPyIterator *incr(size_t n = 1) {
while (n--) {
if (base::current == end) {
throw stop_iteration();
} else {
++base::current;
}
}
return this;
}

protected:
out_iterator begin;
out_iterator end;
};

template<typename OutIterator,
typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
typename FromOper = from_oper<ValueType> >
class SwigPyIteratorClosed_T :
public SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> {
public:
FromOper from;
typedef OutIterator out_iterator;
typedef ValueType value_type;
typedef SwigPyIterator_T<out_iterator> base;
typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;

SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
: SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper>(curr, first, last, seq) {
}

SwigPyIterator *decr(size_t n = 1) {
while (n--) {
if (base::current == base0::begin) {
throw stop_iteration();
} else {
--base::current;
}
}
return this;
}
};


template<typename OutIter>
inline SwigPyIterator *
make_output_forward_iterator(const OutIter &current, const OutIter &begin, const OutIter &end, PyObject *seq = 0) {
return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
}

template<typename OutIter>
inline SwigPyIterator *
make_output_iterator(const OutIter &current, const OutIter &begin, const OutIter &end, PyObject *seq = 0) {
return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
}

template<typename OutIter>
inline SwigPyIterator *
make_output_forward_iterator(const OutIter &current, PyObject *seq = 0) {
return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
}

template<typename OutIter>
inline SwigPyIterator *
make_output_iterator(const OutIter &current, PyObject *seq = 0) {
return new SwigPyIteratorOpen_T<OutIter>(current, seq);
}

}


namespace swig {
template<class T>
struct SwigPySequence_Ref {
SwigPySequence_Ref(PyObject *seq, Py_ssize_t index)
: _seq(seq), _index(index) {
}

operator T() const {
swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
try {
return swig::as<T>(item);
} catch (const std::invalid_argument &e) {
char msg[1024];
sprintf(msg, "in sequence element %d ", (int) _index);
if (!PyErr_Occurred()) {
::SWIG_Error(SWIG_TypeError, swig::type_name<T>());
}
SWIG_Python_AddErrorMsg(msg);
SWIG_Python_AddErrorMsg(e.what());
throw;
}
}

SwigPySequence_Ref &operator=(const T &v) {
PySequence_SetItem(_seq, _index, swig::from<T>(v));
return *this;
}

private:
PyObject *_seq;
Py_ssize_t _index;
};

template<class T>
struct SwigPySequence_ArrowProxy {
SwigPySequence_ArrowProxy(const T &x) : m_value(x) {
}

const T *operator->() const {
return &m_value; }

operator const T *() const {
return &m_value; }

T m_value;
};

template<class T, class Reference>
struct SwigPySequence_InputIterator {
typedef SwigPySequence_InputIterator<T, Reference> self;

typedef std::random_access_iterator_tag iterator_category;
typedef Reference reference;
typedef T value_type;
typedef T *pointer;
typedef Py_ssize_t difference_type;

SwigPySequence_InputIterator() {
}

SwigPySequence_InputIterator(PyObject *seq, Py_ssize_t index)
: _seq(seq), _index(index) {
}

reference operator*() const {
return reference(_seq, _index);
}

SwigPySequence_ArrowProxy<T>
operator->() const {
return SwigPySequence_ArrowProxy<T>(operator*());
}

bool operator==(const self &ri) const {
return (_index == ri._index) && (_seq == ri._seq);
}

bool operator!=(const self &ri) const {
return !(operator==(ri));
}

self &operator++() {
++_index;
return *this;
}

self &operator--() {
--_index;
return *this;
}

self &operator+=(difference_type n) {
_index += n;
return *this;
}

self operator+(difference_type n) const {
return self(_seq, _index + n);
}

self &operator-=(difference_type n) {
_index -= n;
return *this;
}

self operator-(difference_type n) const {
return self(_seq, _index - n);
}

difference_type operator-(const self &ri) const {
return _index - ri._index;
}

bool operator<(const self &ri) const {
return _index < ri._index;
}

reference
operator[](difference_type n) const {
return reference(_seq, _index + n);
}

private:
PyObject *_seq;
difference_type _index;
};

// STL container wrapper around a Python sequence
template<class T>
struct SwigPySequence_Cont {
typedef SwigPySequence_Ref<T> reference;
typedef const SwigPySequence_Ref<T> const_reference;
typedef T value_type;
typedef T *pointer;
typedef Py_ssize_t difference_type;
typedef size_t size_type;
typedef const pointer const_pointer;
typedef SwigPySequence_InputIterator<T, reference> iterator;
typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

SwigPySequence_Cont(PyObject *seq) : _seq(0) {
if (!PySequence_Check(seq)) {
throw std::invalid_argument("a sequence is expected");
}
_seq = seq;
Py_INCREF(_seq);
}

~SwigPySequence_Cont() {
Py_XDECREF(_seq);
}

size_type size() const {
return static_cast<size_type>(PySequence_Size(_seq));
}

bool empty() const {
return size() == 0;
}

iterator begin() {
return iterator(_seq, 0);
}

const_iterator begin() const {
return const_iterator(_seq, 0);
}

iterator end() {
return iterator(_seq, size());
}

const_iterator end() const {
return const_iterator(_seq, size());
}

reference operator[](difference_type n) {
return reference(_seq, n);
}

const_reference operator[](difference_type n) const {
return const_reference(_seq, n);
}

bool check(bool set_err = true) const {
Py_ssize_t s = size();
for (Py_ssize_t i = 0; i < s; ++i) {
swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
if (!swig::check<value_type>(item)) {
if (set_err) {
char msg[1024];
sprintf(msg, "in sequence element %d", (int) i);
SWIG_Error(SWIG_RuntimeError, msg);
}
return false;
}
}
return true;
}

private:
PyObject *_seq;
};

}


namespace swig {
template<>
struct traits<cyclone::Particle> {
typedef pointer_category category;

static const char *type_name() { return "cyclone::Particle"; }
};
}


namespace swig {
template<class SwigPySeq, class Seq>
inline void
assign(const SwigPySeq &swigpyseq, Seq *seq) {
// seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
typedef typename SwigPySeq::value_type value_type;
typename SwigPySeq::const_iterator it = swigpyseq.begin();
for (; it != swigpyseq.end(); ++it) {
seq->insert(seq->end(), (value_type) (*it));
}
}

template<class Seq, class T = typename Seq::value_type>
struct traits_asptr_stdseq {
typedef Seq sequence;
typedef T value_type;

static int asptr(PyObject *obj, sequence **seq) {
if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
sequence *p;
swig_type_info *descriptor = swig::type_info<sequence>();
if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **) &p, descriptor, 0))) {
if (seq) *seq = p;
return SWIG_OLDOBJ;
}
} else if (PySequence_Check(obj)) {
try {
SwigPySequence_Cont<value_type> swigpyseq(obj);
if (seq) {
sequence *pseq = new sequence();
assign(swigpyseq, pseq);
*seq = pseq;
return SWIG_NEWOBJ;
} else {
return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
}
} catch (std::exception &e) {
if (seq) {
if (!PyErr_Occurred()) {
PyErr_SetString(PyExc_TypeError, e.what());
}
}
return SWIG_ERROR;
}
}
return SWIG_ERROR;
}
};

template<class Seq, class T = typename Seq::value_type>
struct traits_from_stdseq {
typedef Seq sequence;
typedef T value_type;
typedef typename Seq::size_type size_type;
typedef typename sequence::const_iterator const_iterator;

static PyObject *from(const sequence &seq) {
#ifdef
SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
swig_type_info *desc = swig::type_info<sequence>();
if (desc && desc->clientdata) {
return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
}
#endif
size_type size = seq.size();
if (size <= (size_type) INT_MAX) {
PyObject *obj = PyTuple_New((Py_ssize_t) size);
Py_ssize_t i = 0;
for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
PyTuple_SetItem(obj, i, swig::from<value_type>(*it));
}
return obj;
} else {
PyErr_SetString(PyExc_OverflowError, "sequence size not valid in python");
return NULL;
}
}
};
}


namespace swig {
template<class T>
struct traits_reserve<std::vector<T> > {
static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
seq.reserve(n);
}
};

template<class T>
struct traits_asptr<std::vector<T> > {
static int asptr(PyObject *obj, std::vector<T> **vec) {
return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
}
};

template<class T>
struct traits_from<std::vector<T> > {
static PyObject *from(const std::vector<T> &vec) {
return traits_from_stdseq<std::vector<T> >::from(vec);
}
};
}


namespace swig {
template<>
struct traits<std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > > {
typedef value_category category;

static const char *type_name() {
return "std::vector<" "cyclone::Particle" " *," "std::allocator< cyclone::Particle * >" " >";
}
};
}

SWIGINTERN swig::SwigPyIterator *
std_vector_Sl_cyclone_Particle_Sm__Sg__iterator(std::vector<cyclone::Particle *> *self, PyObject **PYTHON_SELF) {
return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
}

SWIGINTERN bool std_vector_Sl_cyclone_Particle_Sm__Sg____nonzero__(std::vector<cyclone::Particle *> const *self) {
return !(self->empty());
}

SWIGINTERN bool std_vector_Sl_cyclone_Particle_Sm__Sg____bool__(std::vector<cyclone::Particle *> const *self) {
return !(self->empty());
}

SWIGINTERN std::vector<cyclone::Particle *>::size_type
std_vector_Sl_cyclone_Particle_Sm__Sg____len__(std::vector<cyclone::Particle *> const *self) {
return self->size();
}

SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_long(unsigned long value) {
return (value > LONG_MAX) ?
PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef
SWIG_LONG_LONG_AVAILABLE

SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_long_SS_long(unsigned long long value) {
return (value > LONG_MAX) ?
PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}

#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t(size_t value) {
#ifdef
SWIG_LONG_LONG_AVAILABLE
if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
return SWIG_From_unsigned_SS_long(static_cast< unsigned long >(value));
#ifdef
SWIG_LONG_LONG_AVAILABLE
} else {
/* assume sizeof(size_t) <= sizeof(unsigned long long) */
return SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(value));
}
#endif
}

SWIGINTERN std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *
std_vector_Sl_cyclone_Particle_Sm__Sg____getslice__(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i,
std::vector<cyclone::Particle *>::difference_type j) {
return swig::getslice(self, i, j, 1);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____setslice____SWIG_0(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i,
std::vector<cyclone::Particle *>::difference_type j) {
swig::setslice(self, i, j, 1, std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >());
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____setslice____SWIG_1(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i,
std::vector<cyclone::Particle *>::difference_type j,
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > const &v) {
swig::setslice(self, i, j, 1, v);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____delslice__(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i,
std::vector<cyclone::Particle *>::difference_type j) {
swig::delslice(self, i, j, 1);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____delitem____SWIG_0(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i) {
swig::erase(self, swig::getpos(self, i));
}

SWIGINTERN std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *
std_vector_Sl_cyclone_Particle_Sm__Sg____getitem____SWIG_0(std::vector<cyclone::Particle *> *self,
PySliceObject *slice) {
Py_ssize_t i, j, step;
if (!PySlice_Check(slice)) {
SWIG_Error(SWIG_TypeError, "Slice object expected.");
return NULL;
}
PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t) self->size(), &i, &j, &step);
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type id = i;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type jd = j;
return swig::getslice(self, id, jd, step);
}

SWIGINTERN void
std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_0(std::vector<cyclone::Particle *> *self, PySliceObject *slice,
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > const &v) {
Py_ssize_t i, j, step;
if (!PySlice_Check(slice)) {
SWIG_Error(SWIG_TypeError, "Slice object expected.");
return;
}
PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t) self->size(), &i, &j, &step);
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type id = i;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type jd = j;
swig::setslice(self, id, jd, step, v);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_1(std::vector<cyclone::Particle *> *self,
PySliceObject *slice) {
Py_ssize_t i, j, step;
if (!PySlice_Check(slice)) {
SWIG_Error(SWIG_TypeError, "Slice object expected.");
return;
}
PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t) self->size(), &i, &j, &step);
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type id = i;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type jd = j;
swig::delslice(self, id, jd, step);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____delitem____SWIG_1(std::vector<cyclone::Particle *> *self,
PySliceObject *slice) {
Py_ssize_t i, j, step;
if (!PySlice_Check(slice)) {
SWIG_Error(SWIG_TypeError, "Slice object expected.");
return;
}
PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t) self->size(), &i, &j, &step);
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type id = i;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::difference_type jd = j;
swig::delslice(self, id, jd, step);
}

SWIGINTERN std::vector<cyclone::Particle *>::value_type
std_vector_Sl_cyclone_Particle_Sm__Sg____getitem____SWIG_1(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i) {
return *(swig::cgetpos(self, i));
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_2(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::difference_type i,
std::vector<cyclone::Particle *>::value_type x) {
*(swig::getpos(self, i)) = x;
}

SWIGINTERN std::vector<cyclone::Particle *>::value_type
std_vector_Sl_cyclone_Particle_Sm__Sg__pop(std::vector<cyclone::Particle *> *self) {
if (self->size() == 0)
throw std::out_of_range("pop from empty container");
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> >::value_type x = self->back();
self->pop_back();
return x;
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg__append(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::value_type x) {
self->push_back(x);
}

SWIGINTERN std::vector<cyclone::Particle *>::iterator
std_vector_Sl_cyclone_Particle_Sm__Sg__erase__SWIG_0(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::iterator pos) {
return self->erase(pos);
}

SWIGINTERN std::vector<cyclone::Particle *>::iterator
std_vector_Sl_cyclone_Particle_Sm__Sg__erase__SWIG_1(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::iterator first,
std::vector<cyclone::Particle *>::iterator last) {
return self->erase(first, last);
}

SWIGINTERN std::vector<cyclone::Particle *>::iterator
std_vector_Sl_cyclone_Particle_Sm__Sg__insert__SWIG_0(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::iterator pos,
std::vector<cyclone::Particle *>::value_type x) {
return self->insert(pos, x);
}

SWIGINTERN void std_vector_Sl_cyclone_Particle_Sm__Sg__insert__SWIG_1(std::vector<cyclone::Particle *> *self,
std::vector<cyclone::Particle *>::iterator pos,
std::vector<cyclone::Particle *>::size_type n,
std::vector<cyclone::Particle *>::value_type x) {
self->insert(pos, n, x);
}

static int *new_intArray(size_t nelements) {
return (new int[nelements]());
}

static void delete_intArray(int *ary) {
delete[] ary;
}

static int intArray_getitem(int *ary, size_t index) {
return ary[index];
}

static void intArray_setitem(int *ary, size_t index, int value) {
ary[index] = value;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int(int value) {
return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int(PyObject *obj, int *val) {
long v;
int res = SWIG_AsVal_long(obj, &v);
if (SWIG_IsOK(res)) {
if ((v < INT_MIN || v > INT_MAX)) {
return SWIG_OverflowError;
} else {
if (val) *val = static_cast< int >(v);
}
}
return res;
}


static float *new_floatArray(size_t nelements) {
return (new float[nelements]());
}

static void delete_floatArray(float *ary) {
delete[] ary;
}

static float floatArray_getitem(float *ary, size_t index) {
return ary[index];
}

static void floatArray_setitem(float *ary, size_t index, float value) {
ary[index] = value;
}


#define
SWIG_From_double   PyFloat_FromDouble


SWIGINTERNINLINE PyObject *
SWIG_From_float(float value) {
return SWIG_From_double(value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef
SWIG_isfinite
/* isfinite() is a macro for C99 */
# if
defined(isfinite)
#  define
SWIG_isfinite(X) (isfinite(X))
# elif
defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std {
}
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
using namespace std;
return isfinite(x);
}
#  define
SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif
defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define
SWIG_isfinite(X) (__builtin_isfinite(X))
# elif
defined(__clang__) && defined(__has_builtin)
#  if
__has_builtin(__builtin_isfinite)
#   define
SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif
defined(_MSC_VER)
#  define
SWIG_isfinite(X) (_finite(X))
# elif
defined(__sun) && defined(__SVR4)
#  include
<ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef
SWIG_isfinite
# define
SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define
SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float(PyObject *obj, float *val) {
double v;
int res = SWIG_AsVal_double(obj, &v);
if (SWIG_IsOK(res)) {
if (SWIG_Float_Overflow_Check(v)) {
return SWIG_OverflowError;
} else {
if (val) *val = static_cast< float >(v);
}
}
return res;
}


static double *new_doubleArray(size_t nelements) {
return (new double[nelements]());
}

static void delete_doubleArray(double *ary) {
delete[] ary;
}

static double doubleArray_getitem(double *ary, size_t index) {
return ary[index];
}

static void doubleArray_setitem(double *ary, size_t index, double value) {
ary[index] = value;
}


static double *new_realArray(size_t nelements) {
return (new double[nelements]());
}

static void delete_realArray(double *ary) {
delete[] ary;
}

static double realArray_getitem(double *ary, size_t index) {
return ary[index];
}

static void realArray_setitem(double *ary, size_t index, double value) {
ary[index] = value;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val) {
unsigned long v;
int res = SWIG_AsVal_unsigned_SS_long(obj, &v);
if (SWIG_IsOK(res)) {
if ((v > UINT_MAX)) {
return SWIG_OverflowError;
} else {
if (val) *val = static_cast< unsigned int >(v);
}
}
return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int(unsigned int value) {
return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_bool(PyObject *obj, bool *val) {
int r;
if (!PyBool_Check(obj))
return SWIG_ERROR;
r = PyObject_IsTrue(obj);
if (r == -1)
return SWIG_ERROR;
if (val) *val = r ? true : false;
return SWIG_OK;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include
"cyclone_wrapper.h"

SwigDirector_ParticleContactGenerator::SwigDirector_ParticleContactGenerator(PyObject *self)
: cyclone::ParticleContactGenerator(), Swig::Director(self) {
SWIG_DIRECTOR_RGTR((cyclone::ParticleContactGenerator * )
this, this);
}


SwigDirector_ParticleContactGenerator::~SwigDirector_ParticleContactGenerator() {
}

unsigned int
SwigDirector_ParticleContactGenerator::addContact(cyclone::ParticleContact *contact, unsigned int limit) const {
unsigned int c_result = SwigValueInit<unsigned int>();

swig::SwigVar_PyObject obj0;
obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(contact), SWIGTYPE_p_cyclone__ParticleContact, 0);
swig::SwigVar_PyObject obj1;
obj1 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(limit));
if (!swig_get_self()) {
Swig::DirectorException::raise(
"'self' uninitialized, maybe you forgot to call ParticleContactGenerator.__init__.");
}
#if
defined(SWIG_PYTHON_DIRECTOR_VTABLE)
const size_t swig_method_index = 0;
const char *const swig_method_name = "addContact";
PyObject *method = swig_get_method(swig_method_index, swig_method_name);
swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method, (PyObject *)obj0, (PyObject *)obj1, NULL);
#else
swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("addContact");
swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name,
(PyObject *) obj0, (PyObject *) obj1, NULL);
#endif
if (!result) {
PyObject *error = PyErr_Occurred();
if (error) {
Swig::DirectorMethodException::raise("Error detected when calling 'ParticleContactGenerator.addContact'");
}
}
unsigned int swig_val;
int swig_res = SWIG_AsVal_unsigned_SS_int(result, &swig_val);
if (!SWIG_IsOK(swig_res)) {
Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)),
"in output value of type '""unsigned int""'");
}
c_result = static_cast< unsigned int >(swig_val);
return (unsigned int) c_result;
}


SwigDirector_ParticleForceGenerator::SwigDirector_ParticleForceGenerator(PyObject *self)
: cyclone::ParticleForceGenerator(), Swig::Director(self) {
SWIG_DIRECTOR_RGTR((cyclone::ParticleForceGenerator * )
this, this);
}


SwigDirector_ParticleForceGenerator::~SwigDirector_ParticleForceGenerator() {
}

void SwigDirector_ParticleForceGenerator::updateForce(cyclone::Particle *particle, cyclone::real duration) {
swig::SwigVar_PyObject obj0;
obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(particle), SWIGTYPE_p_cyclone__Particle, 0);
swig::SwigVar_PyObject obj1;
obj1 = SWIG_From_double(static_cast< double >(duration));
if (!swig_get_self()) {
Swig::DirectorException::raise(
"'self' uninitialized, maybe you forgot to call ParticleForceGenerator.__init__.");
}
#if
defined(SWIG_PYTHON_DIRECTOR_VTABLE)
const size_t swig_method_index = 0;
const char *const swig_method_name = "updateForce";
PyObject *method = swig_get_method(swig_method_index, swig_method_name);
swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method, (PyObject *)obj0, (PyObject *)obj1, NULL);
#else
swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("updateForce");
swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name,
(PyObject *) obj0, (PyObject *) obj1, NULL);
#endif
if (!result) {
PyObject *error = PyErr_Occurred();
if (error) {
Swig::DirectorMethodException::raise("Error detected when calling 'ParticleForceGenerator.updateForce'");
}
}
}


#ifdef
__cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
PyObject *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (PyObject * )((swig::SwigPyIterator const *) arg1)->value();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = result;
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
swig::SwigPyIterator *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
try {
result = (swig::SwigPyIterator *) (arg1)->incr(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (swig::SwigPyIterator *) (arg1)->incr();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_size_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
"  Possible C/C++ prototypes are:\n"
"    swig::SwigPyIterator::incr(size_t)\n"
"    swig::SwigPyIterator::incr()\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
swig::SwigPyIterator *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
try {
result = (swig::SwigPyIterator *) (arg1)->decr(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (swig::SwigPyIterator *) (arg1)->decr();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_size_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
"  Possible C/C++ prototypes are:\n"
"    swig::SwigPyIterator::decr(size_t)\n"
"    swig::SwigPyIterator::decr()\n");
return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
swig::SwigPyIterator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
ptrdiff_t result;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
try {
result = ((swig::SwigPyIterator const *) arg1)->distance((swig::SwigPyIterator const &) *arg2);
} catch (std::invalid_argument &_e) {
SWIG_Python_Raise(
SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument & >(_e))),
SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "std::invalid_argument",
SWIGTYPE_p_std__invalid_argument);
SWIG_fail;
}
resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
swig::SwigPyIterator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
try {
result = (bool) ((swig::SwigPyIterator const *) arg1)->equal((swig::SwigPyIterator const &) *arg2);
} catch (std::invalid_argument &_e) {
SWIG_Python_Raise(
SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument & >(_e))),
SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "std::invalid_argument",
SWIGTYPE_p_std__invalid_argument);
SWIG_fail;
}
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
swig::SwigPyIterator *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
result = (swig::SwigPyIterator *) ((swig::SwigPyIterator const *) arg1)->copy();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
PyObject *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (PyObject * )(arg1)->next();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = result;
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
PyObject *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (PyObject * )(arg1)->__next__();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = result;
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
PyObject *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
try {
result = (PyObject * )(arg1)->previous();
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = result;
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
ptrdiff_t arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
swig::SwigPyIterator *result = 0;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
}
arg2 = static_cast< ptrdiff_t >(val2);
try {
result = (swig::SwigPyIterator *) (arg1)->advance(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
swig::SwigPyIterator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
result = (bool) ((swig::SwigPyIterator const *) arg1)->operator==((swig::SwigPyIterator const &) *arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
swig::SwigPyIterator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
result = (bool) ((swig::SwigPyIterator const *) arg1)->operator!=((swig::SwigPyIterator const &) *arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
ptrdiff_t arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
swig::SwigPyIterator *result = 0;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
}
arg2 = static_cast< ptrdiff_t >(val2);
try {
result = (swig::SwigPyIterator *) &(arg1)->operator+=(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
ptrdiff_t arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
swig::SwigPyIterator *result = 0;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
}
arg2 = static_cast< ptrdiff_t >(val2);
try {
result = (swig::SwigPyIterator *) &(arg1)->operator-=(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
ptrdiff_t arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
swig::SwigPyIterator *result = 0;

if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
}
arg2 = static_cast< ptrdiff_t >(val2);
try {
result = (swig::SwigPyIterator *) ((swig::SwigPyIterator const *) arg1)->operator+(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
ptrdiff_t arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
swig::SwigPyIterator *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
}
arg2 = static_cast< ptrdiff_t >(val2);
try {
result = (swig::SwigPyIterator *) ((swig::SwigPyIterator const *) arg1)->operator-(arg2);
} catch (swig::stop_iteration &_e) {
{
(void) _e;
SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
SWIG_fail;
}
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *
_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
swig::SwigPyIterator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
ptrdiff_t result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
}
arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
}
arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
result = ((swig::SwigPyIterator const *) arg1)->operator-((swig::SwigPyIterator const &) *arg2);
resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
}
}
}

fail:
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ParticleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
PyObject **arg2 = (PyObject **) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
swig::SwigPyIterator *result = 0;

arg2 = &swig_obj[0];
if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_iterator" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (swig::SwigPyIterator *) std_vector_Sl_cyclone_Particle_Sm__Sg__iterator(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___nonzero__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (bool) std_vector_Sl_cyclone_Particle_Sm__Sg____nonzero__((std::vector<cyclone::Particle *> const *) arg1);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___bool__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (bool) std_vector_Sl_cyclone_Particle_Sm__Sg____bool__((std::vector<cyclone::Particle *> const *) arg1);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::size_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___len__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = std_vector_Sl_cyclone_Particle_Sm__Sg____len__((std::vector<cyclone::Particle *> const *) arg1);
resultobj = SWIG_From_size_t(static_cast< size_t >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
std::vector<cyclone::Particle *>::difference_type arg3;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
ptrdiff_t val3;
int ecode3 = 0;
PyObject *swig_obj[3];
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *result = 0;

if (!SWIG_Python_UnpackTuple(args, "ParticleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___getslice__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___getslice__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleVector___getslice__" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg3 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val3);
try {
result = (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *) std_vector_Sl_cyclone_Particle_Sm__Sg____getslice__(
arg1, arg2, arg3);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
std::vector<cyclone::Particle *>::difference_type arg3;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
ptrdiff_t val3;
int ecode3 = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___setslice__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___setslice__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleVector___setslice__" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg3 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val3);
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____setslice____SWIG_0(arg1, arg2, arg3);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
std::vector<cyclone::Particle *>::difference_type arg3;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *arg4 = 0;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
ptrdiff_t val3;
int ecode3 = 0;
int res4 = SWIG_OLDOBJ;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___setslice__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___setslice__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleVector___setslice__" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg3 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val3);
{
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *ptr = (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *) 0;
res4 = swig::asptr(swig_obj[3], &ptr);
if (!SWIG_IsOK(res4)) {
SWIG_exception_fail(SWIG_ArgError(res4),
"in method '" "ParticleVector___setslice__" "', argument " "4"" of type '" "std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &""'");
}
if (!ptr) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "ParticleVector___setslice__" "', argument " "4"" of type '" "std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &""'");
}
arg4 = ptr;
}
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____setslice____SWIG_1(arg1, arg2, arg3,
(std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > const &) *arg4);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
if (SWIG_IsNewObj(res4)) delete arg4;
return resultobj;
fail:
if (SWIG_IsNewObj(res4)) delete arg4;
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___setslice__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector___setslice__", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ParticleVector___setslice____SWIG_0(self, argc, argv);
}
}
}
}
if (argc == 4) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
int res = swig::asptr(argv[3],
(std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector___setslice____SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector___setslice__'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::__setslice__(std::vector< cyclone::Particle * >::difference_type,std::vector< cyclone::Particle * >::difference_type)\n"
"    std::vector< cyclone::Particle * >::__setslice__(std::vector< cyclone::Particle * >::difference_type,std::vector< cyclone::Particle * >::difference_type,std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
std::vector<cyclone::Particle *>::difference_type arg3;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
ptrdiff_t val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___delslice__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___delslice__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleVector___delslice__" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg3 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val3);
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____delslice__(arg1, arg2, arg3);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___delitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___delitem__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____delitem____SWIG_0(arg1, arg2);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
PySliceObject *arg2 = (PySliceObject *) 0;
void *argp1 = 0;
int res1 = 0;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___getitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
{
if (!PySlice_Check(swig_obj[1])) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
}
arg2 = (PySliceObject *) swig_obj[1];
}
try {
result = (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *) std_vector_Sl_cyclone_Particle_Sm__Sg____getitem____SWIG_0(
arg1, arg2);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
PySliceObject *arg2 = (PySliceObject *) 0;
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
int res3 = SWIG_OLDOBJ;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___setitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
{
if (!PySlice_Check(swig_obj[1])) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
}
arg2 = (PySliceObject *) swig_obj[1];
}
{
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *ptr = (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *) 0;
res3 = swig::asptr(swig_obj[2], &ptr);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleVector___setitem__" "', argument " "3"" of type '" "std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &""'");
}
if (!ptr) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "ParticleVector___setitem__" "', argument " "3"" of type '" "std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &""'");
}
arg3 = ptr;
}
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_0(arg1, arg2,
(std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > const &) *arg3);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
if (SWIG_IsNewObj(res3)) delete arg3;
return resultobj;
fail:
if (SWIG_IsNewObj(res3)) delete arg3;
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
PySliceObject *arg2 = (PySliceObject *) 0;
void *argp1 = 0;
int res1 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___setitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
{
if (!PySlice_Check(swig_obj[1])) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
}
arg2 = (PySliceObject *) swig_obj[1];
}
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_1(arg1, arg2);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
PySliceObject *arg2 = (PySliceObject *) 0;
void *argp1 = 0;
int res1 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___delitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
{
if (!PySlice_Check(swig_obj[1])) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
}
arg2 = (PySliceObject *) swig_obj[1];
}
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____delitem____SWIG_1(arg1, arg2);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
} catch (std::invalid_argument &_e) {
SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___delitem__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector___delitem__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
_v = PySlice_Check(argv[1]);
}
if (_v) {
return _wrap_ParticleVector___delitem____SWIG_1(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ParticleVector___delitem____SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector___delitem__'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::__delitem__(std::vector< cyclone::Particle * >::difference_type)\n"
"    std::vector< cyclone::Particle * >::__delitem__(PySliceObject *)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
std::vector<cyclone::Particle *>::value_type result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___getitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___getitem__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
try {
result = (std::vector<cyclone::Particle *>::value_type) std_vector_Sl_cyclone_Particle_Sm__Sg____getitem____SWIG_1(
arg1, arg2);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___getitem__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector___getitem__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
_v = PySlice_Check(argv[1]);
}
if (_v) {
return _wrap_ParticleVector___getitem____SWIG_0(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ParticleVector___getitem____SWIG_1(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector___getitem__'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::__getitem__(PySliceObject *)\n"
"    std::vector< cyclone::Particle * >::__getitem__(std::vector< cyclone::Particle * >::difference_type)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_ParticleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::difference_type arg2;
std::vector<cyclone::Particle *>::value_type arg3 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
ptrdiff_t val2;
int ecode2 = 0;
void *argp3 = 0;
int res3 = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector___setitem__" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector___setitem__" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::difference_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::difference_type >(val2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleVector___setitem__" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg3 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp3);
try {
std_vector_Sl_cyclone_Particle_Sm__Sg____setitem____SWIG_2(arg1, arg2, arg3);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector___setitem__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector___setitem__", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
_v = PySlice_Check(argv[1]);
}
if (_v) {
return _wrap_ParticleVector___setitem____SWIG_1(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
_v = PySlice_Check(argv[1]);
}
if (_v) {
int res = swig::asptr(argv[2],
(std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector___setitem____SWIG_0(self, argc, argv);
}
}
}
}
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector___setitem____SWIG_2(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector___setitem__'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::__setitem__(PySliceObject *,std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > const &)\n"
"    std::vector< cyclone::Particle * >::__setitem__(PySliceObject *)\n"
"    std::vector< cyclone::Particle * >::__setitem__(std::vector< cyclone::Particle * >::difference_type,std::vector< cyclone::Particle * >::value_type)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::value_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_pop" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
try {
result = (std::vector<cyclone::Particle *>::value_type) std_vector_Sl_cyclone_Particle_Sm__Sg__pop(arg1);
} catch (std::out_of_range &_e) {
SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
}
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::value_type arg2 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector_append", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_append" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleVector_append" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg2 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp2);
std_vector_Sl_cyclone_Particle_Sm__Sg__append(arg1, arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **
SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (std::vector<cyclone::Particle *> *) new std::vector<cyclone::Particle *>();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ParticleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = 0;
int res1 = SWIG_OLDOBJ;
std::vector<cyclone::Particle *> *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
{
std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *ptr = (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > *) 0;
res1 = swig::asptr(swig_obj[0], &ptr);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleVector" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const &""'");
}
if (!ptr) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_ParticleVector" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const &""'");
}
arg1 = ptr;
}
result = (std::vector<cyclone::Particle *> *) new std::vector<cyclone::Particle *>(
(std::vector<cyclone::Particle *> const &) *arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_NEW | 0);
if (SWIG_IsNewObj(res1)) delete arg1;
return resultobj;
fail:
if (SWIG_IsNewObj(res1)) delete arg1;
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_empty" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (bool) ((std::vector<cyclone::Particle *> const *) arg1)->empty();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::size_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_size" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = ((std::vector<cyclone::Particle *> const *) arg1)->size();
resultobj = SWIG_From_size_t(static_cast< size_t >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *> *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector_swap", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_swap" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleVector_swap" "', argument " "2"" of type '" "std::vector< cyclone::Particle * > &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "ParticleVector_swap" "', argument " "2"" of type '" "std::vector< cyclone::Particle * > &""'");
}
arg2 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp2);
(arg1)->swap(*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::iterator result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_begin" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (arg1)->begin();
resultobj = SWIG_NewPointerObj(
swig::make_output_iterator(static_cast< const std::vector<cyclone::Particle *>::iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::iterator result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_end" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (arg1)->end();
resultobj = SWIG_NewPointerObj(
swig::make_output_iterator(static_cast< const std::vector<cyclone::Particle *>::iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::reverse_iterator result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_rbegin" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (arg1)->rbegin();
resultobj = SWIG_NewPointerObj(swig::make_output_iterator(
static_cast< const std::vector<cyclone::Particle *>::reverse_iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::reverse_iterator result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_rend" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (arg1)->rend();
resultobj = SWIG_NewPointerObj(swig::make_output_iterator(
static_cast< const std::vector<cyclone::Particle *>::reverse_iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_clear" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
(arg1)->clear();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
SwigValueWrapper<std::allocator<cyclone::Particle *> > result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_get_allocator" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = ((std::vector<cyclone::Particle *> const *) arg1)->get_allocator();
resultobj = SWIG_NewPointerObj((new std::vector<cyclone::Particle *>::allocator_type(
static_cast< const std::vector<cyclone::Particle *>::allocator_type & >(result))),
SWIGTYPE_p_std__allocatorT_cyclone__Particle_p_t, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ParticleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *>::size_type arg1;
size_t val1;
int ecode1 = 0;
std::vector<cyclone::Particle *> *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleVector" "', argument " "1"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg1 = static_cast< std::vector<cyclone::Particle *>::size_type >(val1);
result = (std::vector<cyclone::Particle *> *) new std::vector<cyclone::Particle *>(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_pop_back" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
(arg1)->pop_back();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::size_type arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_resize" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector_resize" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::size_type >(val2);
(arg1)->resize(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::iterator arg2;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *iter2 = 0;
int res2;
std::vector<cyclone::Particle *>::iterator result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_erase" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
if (!SWIG_IsOK(res2) || !iter2) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
} else {
swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter2);
if (iter_t) {
arg2 = iter_t->get_current();
} else {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
}
}
result = std_vector_Sl_cyclone_Particle_Sm__Sg__erase__SWIG_0(arg1, arg2);
resultobj = SWIG_NewPointerObj(
swig::make_output_iterator(static_cast< const std::vector<cyclone::Particle *>::iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::iterator arg2;
std::vector<cyclone::Particle *>::iterator arg3;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *iter2 = 0;
int res2;
swig::SwigPyIterator *iter3 = 0;
int res3;
std::vector<cyclone::Particle *>::iterator result;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_erase" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
if (!SWIG_IsOK(res2) || !iter2) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
} else {
swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter2);
if (iter_t) {
arg2 = iter_t->get_current();
} else {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
}
}
res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
if (!SWIG_IsOK(res3) || !iter3) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
} else {
swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter3);
if (iter_t) {
arg3 = iter_t->get_current();
} else {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_erase" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
}
}
result = std_vector_Sl_cyclone_Particle_Sm__Sg__erase__SWIG_1(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(
swig::make_output_iterator(static_cast< const std::vector<cyclone::Particle *>::iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_erase(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector_erase", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
swig::SwigPyIterator *iter = 0;
int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
_v = (SWIG_IsOK(res) && iter &&
(dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter) != 0));
if (_v) {
return _wrap_ParticleVector_erase__SWIG_0(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
swig::SwigPyIterator *iter = 0;
int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
_v = (SWIG_IsOK(res) && iter &&
(dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter) != 0));
if (_v) {
swig::SwigPyIterator *iter = 0;
int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
_v = (SWIG_IsOK(res) && iter &&
(dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter) != 0));
if (_v) {
return _wrap_ParticleVector_erase__SWIG_1(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector_erase'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::erase(std::vector< cyclone::Particle * >::iterator)\n"
"    std::vector< cyclone::Particle * >::erase(std::vector< cyclone::Particle * >::iterator,std::vector< cyclone::Particle * >::iterator)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_new_ParticleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *>::size_type arg1;
std::vector<cyclone::Particle *>::value_type arg2 = (std::vector<cyclone::Particle *>::value_type) 0;
size_t val1;
int ecode1 = 0;
void *argp2 = 0;
int res2 = 0;
std::vector<cyclone::Particle *> *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleVector" "', argument " "1"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg1 = static_cast< std::vector<cyclone::Particle *>::size_type >(val1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_ParticleVector" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg2 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp2);
result = (std::vector<cyclone::Particle *> *) new std::vector<cyclone::Particle *>(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleVector(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParticleVector", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_ParticleVector__SWIG_0(self, argc, argv);
}
if (argc == 1) {
int _v;
{
int res = SWIG_AsVal_size_t(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleVector__SWIG_2(self, argc, argv);
}
}
if (argc == 1) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_new_ParticleVector__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
{
int res = SWIG_AsVal_size_t(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_new_ParticleVector__SWIG_3(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'new_ParticleVector'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::vector()\n"
"    std::vector< cyclone::Particle * >::vector(std::vector< cyclone::Particle * > const &)\n"
"    std::vector< cyclone::Particle * >::vector(std::vector< cyclone::Particle * >::size_type)\n"
"    std::vector< cyclone::Particle * >::vector(std::vector< cyclone::Particle * >::size_type,std::vector< cyclone::Particle * >::value_type)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::value_type arg2 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_push_back" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleVector_push_back" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg2 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp2);
(arg1)->push_back(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::value_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_front" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (std::vector<cyclone::Particle *>::value_type) ((std::vector<cyclone::Particle *> const *) arg1)->front();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::value_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_back" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = (std::vector<cyclone::Particle *>::value_type) ((std::vector<cyclone::Particle *> const *) arg1)->back();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::size_type arg2;
std::vector<cyclone::Particle *>::value_type arg3 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector_assign", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_assign" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector_assign" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::size_type >(val2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleVector_assign" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg3 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp3);
(arg1)->assign(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::size_type arg2;
std::vector<cyclone::Particle *>::value_type arg3 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
void *argp3 = 0;
int res3 = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_resize" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector_resize" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::size_type >(val2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleVector_resize" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg3 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp3);
(arg1)->resize(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_resize(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector_resize", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_size_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ParticleVector_resize__SWIG_0(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_size_t(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector_resize__SWIG_1(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector_resize'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::resize(std::vector< cyclone::Particle * >::size_type)\n"
"    std::vector< cyclone::Particle * >::resize(std::vector< cyclone::Particle * >::size_type,std::vector< cyclone::Particle * >::value_type)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::iterator arg2;
std::vector<cyclone::Particle *>::value_type arg3 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *iter2 = 0;
int res2;
void *argp3 = 0;
int res3 = 0;
std::vector<cyclone::Particle *>::iterator result;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_insert" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
if (!SWIG_IsOK(res2) || !iter2) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_insert" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
} else {
swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter2);
if (iter_t) {
arg2 = iter_t->get_current();
} else {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_insert" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
}
}
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleVector_insert" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg3 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp3);
result = std_vector_Sl_cyclone_Particle_Sm__Sg__insert__SWIG_0(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(
swig::make_output_iterator(static_cast< const std::vector<cyclone::Particle *>::iterator & >(result)),
swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ParticleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::iterator arg2;
std::vector<cyclone::Particle *>::size_type arg3;
std::vector<cyclone::Particle *>::value_type arg4 = (std::vector<cyclone::Particle *>::value_type) 0;
void *argp1 = 0;
int res1 = 0;
swig::SwigPyIterator *iter2 = 0;
int res2;
size_t val3;
int ecode3 = 0;
void *argp4 = 0;
int res4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_insert" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
if (!SWIG_IsOK(res2) || !iter2) {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_insert" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
} else {
swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter2);
if (iter_t) {
arg2 = iter_t->get_current();
} else {
SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError),
"in method '" "ParticleVector_insert" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::iterator""'");
}
}
ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleVector_insert" "', argument " "3"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg3 = static_cast< std::vector<cyclone::Particle *>::size_type >(val3);
res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res4)) {
SWIG_exception_fail(SWIG_ArgError(res4),
"in method '" "ParticleVector_insert" "', argument " "4"" of type '" "std::vector< cyclone::Particle * >::value_type""'");
}
arg4 = reinterpret_cast< std::vector<cyclone::Particle *>::value_type >(argp4);
std_vector_Sl_cyclone_Particle_Sm__Sg__insert__SWIG_1(arg1, arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_insert(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ParticleVector_insert", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 3) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
swig::SwigPyIterator *iter = 0;
int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
_v = (SWIG_IsOK(res) && iter &&
(dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter) != 0));
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector_insert__SWIG_0(self, argc, argv);
}
}
}
}
if (argc == 4) {
int _v;
int res = swig::asptr(argv[0], (std::vector<cyclone::Particle *, std::allocator<cyclone::Particle *> > **) (0));
_v = SWIG_CheckState(res);
if (_v) {
swig::SwigPyIterator *iter = 0;
int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
_v = (SWIG_IsOK(res) && iter &&
(dynamic_cast<swig::SwigPyIterator_T<std::vector<cyclone::Particle *>::iterator> *>(iter) != 0));
if (_v) {
{
int res = SWIG_AsVal_size_t(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_ParticleVector_insert__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ParticleVector_insert'.\n"
"  Possible C/C++ prototypes are:\n"
"    std::vector< cyclone::Particle * >::insert(std::vector< cyclone::Particle * >::iterator,std::vector< cyclone::Particle * >::value_type)\n"
"    std::vector< cyclone::Particle * >::insert(std::vector< cyclone::Particle * >::iterator,std::vector< cyclone::Particle * >::size_type,std::vector< cyclone::Particle * >::value_type)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
std::vector<cyclone::Particle *>::size_type arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_reserve" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleVector_reserve" "', argument " "2"" of type '" "std::vector< cyclone::Particle * >::size_type""'");
}
arg2 = static_cast< std::vector<cyclone::Particle *>::size_type >(val2);
(arg1)->reserve(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
std::vector<cyclone::Particle *>::size_type result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleVector_capacity" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > const *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
result = ((std::vector<cyclone::Particle *> const *) arg1)->capacity();
resultobj = SWIG_From_size_t(static_cast< size_t >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
std::vector<cyclone::Particle *> *arg1 = (std::vector<cyclone::Particle *> *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleVector" "', argument " "1"" of type '" "std::vector< cyclone::Particle * > *""'");
}
arg1 = reinterpret_cast< std::vector<cyclone::Particle *> * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_intArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
size_t arg1;
size_t val1;
int ecode1 = 0;
PyObject *swig_obj[1];
int *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_intArray" "', argument " "1"" of type '" "size_t""'");
}
arg1 = static_cast< size_t >(val1);
result = (int *) new_intArray(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
int *arg1 = (int *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_int, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_intArray" "', argument " "1"" of type '" "int *""'");
}
arg1 = reinterpret_cast< int * >(argp1);
delete_intArray(arg1);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
int *arg1 = (int *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
int result;

if (!SWIG_Python_UnpackTuple(args, "intArray_getitem", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_int, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "intArray_getitem" "', argument " "1"" of type '" "int *""'");
}
arg1 = reinterpret_cast< int * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "intArray_getitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
result = (int) intArray_getitem(arg1, arg2);
resultobj = SWIG_From_int(static_cast< int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_intArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
int *arg1 = (int *) 0;
size_t arg2;
int arg3;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
int val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "intArray_setitem", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_int, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "intArray_setitem" "', argument " "1"" of type '" "int *""'");
}
arg1 = reinterpret_cast< int * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "intArray_setitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "intArray_setitem" "', argument " "3"" of type '" "int""'");
}
arg3 = static_cast< int >(val3);
intArray_setitem(arg1, arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_floatArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
size_t arg1;
size_t val1;
int ecode1 = 0;
PyObject *swig_obj[1];
float *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_floatArray" "', argument " "1"" of type '" "size_t""'");
}
arg1 = static_cast< size_t >(val1);
result = (float *) new_floatArray(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_floatArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
float *arg1 = (float *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_float, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_floatArray" "', argument " "1"" of type '" "float *""'");
}
arg1 = reinterpret_cast< float * >(argp1);
delete_floatArray(arg1);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_floatArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
float *arg1 = (float *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
float result;

if (!SWIG_Python_UnpackTuple(args, "floatArray_getitem", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_float, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "floatArray_getitem" "', argument " "1"" of type '" "float *""'");
}
arg1 = reinterpret_cast< float * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "floatArray_getitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
result = (float) floatArray_getitem(arg1, arg2);
resultobj = SWIG_From_float(static_cast< float >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_floatArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
float *arg1 = (float *) 0;
size_t arg2;
float arg3;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
float val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "floatArray_setitem", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_float, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "floatArray_setitem" "', argument " "1"" of type '" "float *""'");
}
arg1 = reinterpret_cast< float * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "floatArray_setitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "floatArray_setitem" "', argument " "3"" of type '" "float""'");
}
arg3 = static_cast< float >(val3);
floatArray_setitem(arg1, arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_doubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
size_t arg1;
size_t val1;
int ecode1 = 0;
PyObject *swig_obj[1];
double *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_doubleArray" "', argument " "1"" of type '" "size_t""'");
}
arg1 = static_cast< size_t >(val1);
result = (double *) new_doubleArray(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_doubleArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_doubleArray" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
delete_doubleArray(arg1);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_doubleArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
double result;

if (!SWIG_Python_UnpackTuple(args, "doubleArray_getitem", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "doubleArray_getitem" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "doubleArray_getitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
result = (double) doubleArray_getitem(arg1, arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_doubleArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
size_t arg2;
double arg3;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "doubleArray_setitem", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "doubleArray_setitem" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "doubleArray_setitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "doubleArray_setitem" "', argument " "3"" of type '" "double""'");
}
arg3 = static_cast< double >(val3);
doubleArray_setitem(arg1, arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_realArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
size_t arg1;
size_t val1;
int ecode1 = 0;
PyObject *swig_obj[1];
double *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_realArray" "', argument " "1"" of type '" "size_t""'");
}
arg1 = static_cast< size_t >(val1);
result = (double *) new_realArray(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_realArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_realArray" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
delete_realArray(arg1);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_realArray_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
size_t arg2;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
PyObject *swig_obj[2];
double result;

if (!SWIG_Python_UnpackTuple(args, "realArray_getitem", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "realArray_getitem" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "realArray_getitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
result = (double) realArray_getitem(arg1, arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_realArray_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
double *arg1 = (double *) 0;
size_t arg2;
double arg3;
void *argp1 = 0;
int res1 = 0;
size_t val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "realArray_setitem", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "realArray_setitem" "', argument " "1"" of type '" "double *""'");
}
arg1 = reinterpret_cast< double * >(argp1);
ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "realArray_setitem" "', argument " "2"" of type '" "size_t""'");
}
arg2 = static_cast< size_t >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "realArray_setitem" "', argument " "3"" of type '" "double""'");
}
arg3 = static_cast< double >(val3);
realArray_setitem(arg1, arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN int Swig_var_sleepEpsilon_set(PyObject *_val) {
{
double val;
int res = SWIG_AsVal_double(_val, &val);
if (!SWIG_IsOK(res)) {
SWIG_exception_fail(SWIG_ArgError(res),
"in variable '""cyclone::sleepEpsilon""' of type '""cyclone::real""'");
}
cyclone::sleepEpsilon = static_cast< cyclone::real >(val);
}
return 0;
fail:
return 1;
}


SWIGINTERN PyObject *Swig_var_sleepEpsilon_get(void) {
PyObject *pyobj = 0;

pyobj = SWIG_From_double(static_cast< double >(cyclone::sleepEpsilon));
return pyobj;
}


SWIGINTERN PyObject *_wrap_setSleepEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::real arg1;
double val1;
int ecode1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "setSleepEpsilon" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
cyclone::setSleepEpsilon(arg1);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_getSleepEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::real result;

if (!SWIG_Python_UnpackTuple(args, "getSleepEpsilon", 0, 0, 0)) SWIG_fail;
result = (cyclone::real) cyclone::getSleepEpsilon();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3_x_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_x_set" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3_x_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->x = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_x_get" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::real)((arg1)->x);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3_y_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_y_set" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3_y_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->y = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_y_get" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::real)((arg1)->y);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3_z_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_z_set" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3_z_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->z = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_z_get" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::real)((arg1)->z);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_Vector3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
cyclone::Vector3 *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (cyclone::Vector3 * )
new cyclone::Vector3();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
cyclone::real arg3;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::Vector3 *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_Vector3" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_Vector3" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_Vector3" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::Vector3 * )
new cyclone::Vector3(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vector3(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_Vector3", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_Vector3__SWIG_0(self, argc, argv);
}
if (argc == 3) {
int _v;
{
int res = SWIG_AsVal_double(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Vector3__SWIG_1(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Vector3'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Vector3::Vector3()\n"
"    cyclone::Vector3::Vector3(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Vector3___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3___iadd__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___iadd__" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___iadd__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___iadd__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->operator+=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___add__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___add__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___add__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___add__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Vector3 const *) arg1)->operator+((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3___isub__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___isub__" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___isub__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___isub__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->operator-=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___sub__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___sub__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___sub__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___sub__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Vector3 const *) arg1)->operator-((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3___imul__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___imul__" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3___imul__" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->operator*=(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Vector3___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
cyclone::Vector3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___mul__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3___mul__" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = ((cyclone::Vector3 const *) arg1)->operator*(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3_componentProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Vector3_componentProduct", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_componentProduct" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3_componentProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3_componentProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Vector3 const *) arg1)->componentProduct((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_componentProductUpdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3_componentProductUpdate", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_componentProductUpdate" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3_componentProductUpdate" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3_componentProductUpdate" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->componentProductUpdate((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_vectorProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Vector3_vectorProduct", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_vectorProduct" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3_vectorProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3_vectorProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Vector3 const *) arg1)->vectorProduct((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3___imod__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3___imod__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___imod__" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___imod__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___imod__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->operator%=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3___mod__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___mod__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___mod__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___mod__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___mod__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Vector3 const *) arg1)->operator%((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3_scalarProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::real result;

if (!SWIG_Python_UnpackTuple(args, "Vector3_scalarProduct", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_scalarProduct" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3_scalarProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3_scalarProduct" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (cyclone::real)((cyclone::Vector3 const *) arg1)->scalarProduct((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Vector3___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::real result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___mul__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (cyclone::real)((cyclone::Vector3 const *) arg1)->operator*((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___mul__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Vector3___mul__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Vector3___mul____SWIG_1(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Vector3___mul____SWIG_0(self, argc, argv);
}
}
}

fail:
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3_addScaledVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Vector3_addScaledVector", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_addScaledVector" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3_addScaledVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3_addScaledVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Vector3_addScaledVector" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->addScaledVector((cyclone::Vector3 const &)*arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_magnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_magnitude" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::real)((cyclone::Vector3 const *) arg1)->magnitude();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_squareMagnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_squareMagnitude" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::real)((cyclone::Vector3 const *) arg1)->squareMagnitude();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_trim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Vector3_trim", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_trim" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Vector3_trim" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->trim(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_normalise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_normalise" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
(arg1)->normalise();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_unit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_unit" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = ((cyclone::Vector3 const *) arg1)->unit();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___eq__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___eq__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___eq__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___eq__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator==((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___ne__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___ne__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___ne__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___ne__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator!=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___lt__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___lt__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___lt__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___lt__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator<((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___gt__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___gt__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___gt__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___gt__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator>((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___le__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___le__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___le__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___le__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator<=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "Vector3___ge__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3___ge__" "', argument " "1"" of type '" "cyclone::Vector3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Vector3___ge__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Vector3___ge__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (bool) ((cyclone::Vector3 const *) arg1)->operator>=((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Vector3_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_clear" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
(arg1)->clear();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Vector3_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Vector3_invert" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
(arg1)->invert();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Vector3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Vector3" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Vector3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Vector3, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Vector3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Quaternion_r_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_r_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_r_set" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Quaternion_r_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->r = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_r_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_r_get" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
result = (cyclone::real)((arg1)->r);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_i_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_i_set" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Quaternion_i_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->i = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_i_get" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
result = (cyclone::real)((arg1)->i);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_j_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_j_set" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Quaternion_j_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->j = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_j_get" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
result = (cyclone::real)((arg1)->j);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_k_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_k_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_k_set" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Quaternion_k_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->k = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_k_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_k_get" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
result = (cyclone::real)((arg1)->k);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_Quaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
cyclone::Quaternion *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (cyclone::Quaternion * )
new cyclone::Quaternion();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_Quaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
cyclone::Quaternion *result = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_Quaternion" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_Quaternion" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_Quaternion" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_Quaternion" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
result = (cyclone::Quaternion * )
new cyclone::Quaternion(arg1, arg2, arg3, arg4);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Quaternion(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_Quaternion", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_Quaternion__SWIG_0(self, argc, argv);
}
if (argc == 4) {
int _v;
{
int res = SWIG_AsVal_double(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Quaternion__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Quaternion'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Quaternion::Quaternion()\n"
"    cyclone::Quaternion::Quaternion(cyclone::real const,cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Quaternion_normalise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_normalise" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
(arg1)->normalise();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::Quaternion *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion___imul__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion___imul__" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Quaternion___imul__" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Quaternion___imul__" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
arg2 = reinterpret_cast< cyclone::Quaternion * >(argp2);
(arg1)->operator*=((cyclone::Quaternion const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_addScaledVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_addScaledVector", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_addScaledVector" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Quaternion_addScaledVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Quaternion_addScaledVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Quaternion_addScaledVector" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->addScaledVector((cyclone::Vector3 const &)*arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Quaternion_rotateByVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Quaternion_rotateByVector", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Quaternion_rotateByVector" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Quaternion_rotateByVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Quaternion_rotateByVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->rotateByVector((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Quaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Quaternion *arg1 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Quaternion" "', argument " "1"" of type '" "cyclone::Quaternion *""'");
}
arg1 = reinterpret_cast< cyclone::Quaternion * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Quaternion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Quaternion, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Quaternion_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Matrix4_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::real *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix4_data_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_data_set" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_data_set" "', argument " "2"" of type '" "cyclone::real [12]""'");
}
arg2 = reinterpret_cast< cyclone::real * >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 12; ++ii) *(cyclone::real * ) & arg1->data[ii] = *((cyclone::real *) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""data""' of type '""cyclone::real [12]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_data_get" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
result = (cyclone::real * )(cyclone::real * )((arg1)->data);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Matrix4", 0, 0, 0)) SWIG_fail;
result = (cyclone::Matrix4 * )
new cyclone::Matrix4();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_setDiagonal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "Matrix4_setDiagonal", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_setDiagonal" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix4_setDiagonal" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix4_setDiagonal" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix4_setDiagonal" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setDiagonal(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix4___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Matrix4 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::Matrix4 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4___mul__" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4___mul__" "', argument " "2"" of type '" "cyclone::Matrix4 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4___mul__" "', argument " "2"" of type '" "cyclone::Matrix4 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix4 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->operator*((cyclone::Matrix4 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Matrix4(static_cast< const cyclone::Matrix4 & >(result))),
SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *
_wrap_Matrix4___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::Vector3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4___mul__" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->operator*((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix4___mul__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix4___mul__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix4, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Matrix4___mul____SWIG_0(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix4, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Matrix4___mul____SWIG_1(self, argc, argv);
}
}
}

fail:
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix4_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix4_transform", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_transform" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_transform" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_transform" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->transform((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_getDeterminant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_getDeterminant" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
result = (cyclone::real)((cyclone::Matrix4 const *) arg1)->getDeterminant();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_setInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Matrix4 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix4_setInverse", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_setInverse" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_setInverse" "', argument " "2"" of type '" "cyclone::Matrix4 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_setInverse" "', argument " "2"" of type '" "cyclone::Matrix4 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix4 * >(argp2);
(arg1)->setInverse((cyclone::Matrix4 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Matrix4 result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_inverse" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
result = ((cyclone::Matrix4 const *) arg1)->inverse();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix4(static_cast< const cyclone::Matrix4 & >(result))),
SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_invert" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
(arg1)->invert();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_transformDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix4_transformDirection", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_transformDirection" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_transformDirection" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_transformDirection" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->transformDirection((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_transformInverseDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix4_transformInverseDirection", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_transformInverseDirection" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_transformInverseDirection" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_transformInverseDirection" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->transformInverseDirection((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_transformInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix4_transformInverse", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_transformInverse" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_transformInverse" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_transformInverse" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix4 const *) arg1)->transformInverse((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_getAxisVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
int arg2;
void *argp1 = 0;
int res1 = 0;
int val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix4_getAxisVector", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_getAxisVector" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix4_getAxisVector" "', argument " "2"" of type '" "int""'");
}
arg2 = static_cast< int >(val2);
result = ((cyclone::Matrix4 const *) arg1)->getAxisVector(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_setOrientationAndPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
cyclone::Quaternion *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Matrix4_setOrientationAndPos", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_setOrientationAndPos" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_setOrientationAndPos" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_setOrientationAndPos" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
arg2 = reinterpret_cast< cyclone::Quaternion * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "Matrix4_setOrientationAndPos" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix4_setOrientationAndPos" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
(arg1)->setOrientationAndPos((cyclone::Quaternion const &)*arg2, (cyclone::Vector3 const &)*arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix4_fillGLArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
float *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix4_fillGLArray", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix4_fillGLArray" "', argument " "1"" of type '" "cyclone::Matrix4 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix4_fillGLArray" "', argument " "2"" of type '" "float [16]""'");
}
arg2 = reinterpret_cast< float * >(argp2);
((cyclone::Matrix4 const *) arg1)->fillGLArray(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matrix4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix4 *arg1 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Matrix4" "', argument " "1"" of type '" "cyclone::Matrix4 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix4 * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Matrix4_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Matrix4, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Matrix4_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Matrix3_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_data_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_data_set" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_data_set" "', argument " "2"" of type '" "cyclone::real [9]""'");
}
arg2 = reinterpret_cast< cyclone::real * >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 9; ++ii) *(cyclone::real * ) & arg1->data[ii] = *((cyclone::real *) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""data""' of type '""cyclone::real [9]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_data_get" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
result = (cyclone::real * )(cyclone::real * )((arg1)->data);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_Matrix3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
cyclone::Matrix3 *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (cyclone::Matrix3 * )
new cyclone::Matrix3();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
cyclone::Matrix3 *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Matrix3" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Matrix3" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_Matrix3" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Matrix3" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "new_Matrix3" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Matrix3" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
result = (cyclone::Matrix3 * )
new cyclone::Matrix3(
(cyclone::Vector3 const &)*arg1, (cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const &)*arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix3__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
cyclone::real arg6;
cyclone::real arg7;
cyclone::real arg8;
cyclone::real arg9;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
double val6;
int ecode6 = 0;
double val7;
int ecode7 = 0;
double val8;
int ecode8 = 0;
double val9;
int ecode9 = 0;
cyclone::Matrix3 *result = 0;

if ((nobjs < 9) || (nobjs > 9)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_Matrix3" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_Matrix3" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_Matrix3" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_Matrix3" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "new_Matrix3" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
if (!SWIG_IsOK(ecode6)) {
SWIG_exception_fail(SWIG_ArgError(ecode6),
"in method '" "new_Matrix3" "', argument " "6"" of type '" "cyclone::real""'");
}
arg6 = static_cast< cyclone::real >(val6);
ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
if (!SWIG_IsOK(ecode7)) {
SWIG_exception_fail(SWIG_ArgError(ecode7),
"in method '" "new_Matrix3" "', argument " "7"" of type '" "cyclone::real""'");
}
arg7 = static_cast< cyclone::real >(val7);
ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
if (!SWIG_IsOK(ecode8)) {
SWIG_exception_fail(SWIG_ArgError(ecode8),
"in method '" "new_Matrix3" "', argument " "8"" of type '" "cyclone::real""'");
}
arg8 = static_cast< cyclone::real >(val8);
ecode9 = SWIG_AsVal_double(swig_obj[8], &val9);
if (!SWIG_IsOK(ecode9)) {
SWIG_exception_fail(SWIG_ArgError(ecode9),
"in method '" "new_Matrix3" "', argument " "9"" of type '" "cyclone::real""'");
}
arg9 = static_cast< cyclone::real >(val9);
result = (cyclone::Matrix3 * )
new cyclone::Matrix3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Matrix3(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[10] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_Matrix3", 0, 9, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_Matrix3__SWIG_0(self, argc, argv);
}
if (argc == 3) {
int _v;
int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_new_Matrix3__SWIG_1(self, argc, argv);
}
}
}
}
if (argc == 9) {
int _v;
{
int res = SWIG_AsVal_double(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[5], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[6], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[7], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[8], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Matrix3__SWIG_2(self, argc, argv);
}
}
}
}
}
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Matrix3'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Matrix3::Matrix3()\n"
"    cyclone::Matrix3::Matrix3(cyclone::Vector3 const &,cyclone::Vector3 const &,cyclone::Vector3 const &)\n"
"    cyclone::Matrix3::Matrix3(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Matrix3_setDiagonal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setDiagonal", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setDiagonal" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_setDiagonal" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setDiagonal" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix3_setDiagonal" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setDiagonal(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3_setInertiaTensorCoeffs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
cyclone::real arg6;
cyclone::real arg7;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
double val6;
int ecode6 = 0;
double val7;
int ecode7 = 0;

if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
if (!SWIG_IsOK(ecode6)) {
SWIG_exception_fail(SWIG_ArgError(ecode6),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "6"" of type '" "cyclone::real""'");
}
arg6 = static_cast< cyclone::real >(val6);
ecode7 = SWIG_AsVal_double(swig_obj[6], &val7);
if (!SWIG_IsOK(ecode7)) {
SWIG_exception_fail(SWIG_ArgError(ecode7),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "7"" of type '" "cyclone::real""'");
}
arg7 = static_cast< cyclone::real >(val7);
(arg1)->setInertiaTensorCoeffs(arg2, arg3, arg4, arg5, arg6, arg7);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3_setInertiaTensorCoeffs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
cyclone::real arg6;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
double val6;
int ecode6 = 0;

if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
if (!SWIG_IsOK(ecode6)) {
SWIG_exception_fail(SWIG_ArgError(ecode6),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "6"" of type '" "cyclone::real""'");
}
arg6 = static_cast< cyclone::real >(val6);
(arg1)->setInertiaTensorCoeffs(arg2, arg3, arg4, arg5, arg6);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3_setInertiaTensorCoeffs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;

if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
(arg1)->setInertiaTensorCoeffs(arg2, arg3, arg4, arg5);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3_setInertiaTensorCoeffs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Matrix3_setInertiaTensorCoeffs" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setInertiaTensorCoeffs(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setInertiaTensorCoeffs(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[8] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix3_setInertiaTensorCoeffs", 0, 7, argv))) SWIG_fail;
--argc;
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_3(self, argc, argv);
}
}
}
}
}
if (argc == 5) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_2(self, argc, argv);
}
}
}
}
}
}
if (argc == 6) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[5], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_1(self, argc, argv);
}
}
}
}
}
}
}
if (argc == 7) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[5], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[6], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Matrix3_setInertiaTensorCoeffs__SWIG_0(self, argc, argv);
}
}
}
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Matrix3_setInertiaTensorCoeffs'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
"    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
"    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
"    cyclone::Matrix3::setInertiaTensorCoeffs(cyclone::real,cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Matrix3_setBlockInertiaTensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setBlockInertiaTensor", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setBlockInertiaTensor" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setBlockInertiaTensor" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setBlockInertiaTensor" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_setBlockInertiaTensor" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->setBlockInertiaTensor((cyclone::Vector3 const &)*arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setSkewSymmetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setSkewSymmetric", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setSkewSymmetric" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
{
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setSkewSymmetric" "', argument " "2"" of type '" "cyclone::Vector3 const""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setSkewSymmetric" "', argument " "2"" of type '" "cyclone::Vector3 const""'");
} else {
cyclone::Vector3 *temp = reinterpret_cast< cyclone::Vector3 * >(argp2);
arg2 = *temp;
if (SWIG_IsNewObj(res2)) delete temp;
}
}
(arg1)->setSkewSymmetric(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
cyclone::Vector3 *arg4 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
void *argp4 = 0;
int res4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setComponents", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setComponents" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setComponents" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setComponents" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "Matrix3_setComponents" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setComponents" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res4)) {
SWIG_exception_fail(SWIG_ArgError(res4),
"in method '" "Matrix3_setComponents" "', argument " "4"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp4) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setComponents" "', argument " "4"" of type '" "cyclone::Vector3 const &""'");
}
arg4 = reinterpret_cast< cyclone::Vector3 * >(argp4);
(arg1)->setComponents(
(cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const &)*arg3, (cyclone::Vector3 const &)*arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::Vector3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3___mul__" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3___mul__" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix3 const *) arg1)->operator*((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix3_transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix3_transform", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_transform" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_transform" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_transform" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix3 const *) arg1)->transform((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_transformTranspose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix3_transformTranspose", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_transformTranspose" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_transformTranspose" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_transformTranspose" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::Matrix3 const *) arg1)->transformTranspose((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_getRowVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
int arg2;
void *argp1 = 0;
int res1 = 0;
int val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix3_getRowVector", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_getRowVector" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_getRowVector" "', argument " "2"" of type '" "int""'");
}
arg2 = static_cast< int >(val2);
result = ((cyclone::Matrix3 const *) arg1)->getRowVector(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_getAxisVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
int arg2;
void *argp1 = 0;
int res1 = 0;
int val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix3_getAxisVector", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_getAxisVector" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3_getAxisVector" "', argument " "2"" of type '" "int""'");
}
arg2 = static_cast< int >(val2);
result = ((cyclone::Matrix3 const *) arg1)->getAxisVector(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setInverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setInverse", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setInverse" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setInverse" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setInverse" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->setInverse((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Matrix3 result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_inverse" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
result = ((cyclone::Matrix3 const *) arg1)->inverse();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_invert" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
(arg1)->invert();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setTranspose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setTranspose", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setTranspose" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setTranspose" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setTranspose" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->setTranspose((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Matrix3 result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_transpose" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
result = ((cyclone::Matrix3 const *) arg1)->transpose();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::Matrix3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3___mul__" "', argument " "1"" of type '" "cyclone::Matrix3 const *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3___mul__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3___mul__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
result = ((cyclone::Matrix3 const *) arg1)->operator*((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
PyErr_Clear();
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Matrix3___mul__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix3___mul__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Matrix3___mul____SWIG_0(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Matrix3___mul____SWIG_1(self, argc, argv);
}
}
}

fail:
Py_INCREF(Py_NotImplemented);
return Py_NotImplemented;
}


SWIGINTERN PyObject *
_wrap_Matrix3___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3___imul__" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3___imul__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3___imul__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->operator*=((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Matrix3___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3___imul__" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Matrix3___imul__" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->operator*=(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3___imul__(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Matrix3___imul__", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Matrix3___imul____SWIG_0(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Matrix3___imul____SWIG_1(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Matrix3___imul__'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Matrix3::operator *=(cyclone::Matrix3 const &)\n"
"    cyclone::Matrix3::operator *=(cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Matrix3___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3___iadd__", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3___iadd__" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3___iadd__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3___iadd__" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->operator+=((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_setOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
cyclone::Quaternion *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Matrix3_setOrientation", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_setOrientation" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_setOrientation" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_setOrientation" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
arg2 = reinterpret_cast< cyclone::Quaternion * >(argp2);
(arg1)->setOrientation((cyclone::Quaternion const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Matrix3_linearInterpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = 0;
cyclone::Matrix3 *arg2 = 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];
cyclone::Matrix3 result;

if (!SWIG_Python_UnpackTuple(args, "Matrix3_linearInterpolate", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Matrix3_linearInterpolate" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_linearInterpolate" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Matrix3_linearInterpolate" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Matrix3_linearInterpolate" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Matrix3_linearInterpolate" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = cyclone::Matrix3::linearInterpolate(
(cyclone::Matrix3 const &)*arg1, (cyclone::Matrix3 const &)*arg2, arg3);
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Matrix3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Matrix3" "', argument " "1"" of type '" "cyclone::Matrix3 *""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Matrix3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Matrix3, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Matrix3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Random_rotl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
unsigned int arg2;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "Random_rotl", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_rotl" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_rotl" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Random_rotl" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) (arg1)->rotl(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_rotr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
unsigned int arg2;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "Random_rotr", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_rotr" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_rotr" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Random_rotr" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) (arg1)->rotr(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_Random__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
cyclone::Random *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (cyclone::Random * )
new cyclone::Random();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Random, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Random__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int val1;
int ecode1 = 0;
cyclone::Random *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_Random" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
result = (cyclone::Random * )
new cyclone::Random(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Random, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Random(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[2] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_Random", 0, 1, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_Random__SWIG_0(self, argc, argv);
}
if (argc == 1) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Random__SWIG_1(self, argc, argv);
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Random'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Random::Random()\n"
"    cyclone::Random::Random(unsigned int)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Random_seed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Random_seed", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_seed" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_seed" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
(arg1)->seed(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_randomBits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
unsigned int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomBits" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
result = (unsigned int) (arg1)->randomBits();
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomReal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::real result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomReal" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
result = (cyclone::real)(arg1)->randomReal();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomReal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
cyclone::real result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomReal" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomReal" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (cyclone::real)(arg1)->randomReal(arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomReal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::real result;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomReal" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomReal" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Random_randomReal" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::real)(arg1)->randomReal(arg2, arg3);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_randomReal(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Random_randomReal", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Random_randomReal__SWIG_0(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Random_randomReal__SWIG_1(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Random_randomReal__SWIG_2(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Random_randomReal'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Random::randomReal()\n"
"    cyclone::Random::randomReal(cyclone::real)\n"
"    cyclone::Random::randomReal(cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Random_randomInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "Random_randomInt", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomInt" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomInt" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
result = (unsigned int) (arg1)->randomInt(arg2);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_randomBinomial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::real result;

if (!SWIG_Python_UnpackTuple(args, "Random_randomBinomial", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomBinomial" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomBinomial" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (cyclone::real)(arg1)->randomBinomial(arg2);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
cyclone::Vector3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomVector" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomVector" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (arg1)->randomVector(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
cyclone::Vector3 result;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomVector" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Random_randomVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Random_randomVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = (arg1)->randomVector((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Random_randomVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
cyclone::Vector3 result;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomVector" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Random_randomVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Random_randomVector" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "Random_randomVector" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Random_randomVector" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
result = (arg1)->randomVector((cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const &)*arg3);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_randomVector(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Random_randomVector", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Random_randomVector__SWIG_1(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Random_randomVector__SWIG_0(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Random, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Random_randomVector__SWIG_2(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Random_randomVector'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Random::randomVector(cyclone::real)\n"
"    cyclone::Random::randomVector(cyclone::Vector3 const &)\n"
"    cyclone::Random::randomVector(cyclone::Vector3 const &,cyclone::Vector3 const &)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Random_randomXZVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "Random_randomXZVector", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomXZVector" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Random_randomXZVector" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (arg1)->randomXZVector(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Random_randomQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Quaternion result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Random_randomQuaternion" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
result = (arg1)->randomQuaternion();
resultobj = SWIG_NewPointerObj((new cyclone::Quaternion(static_cast< const cyclone::Quaternion & >(result))),
SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Random *arg1 = (cyclone::Random *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Random, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Random" "', argument " "1"" of type '" "cyclone::Random *""'");
}
arg1 = reinterpret_cast< cyclone::Random * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Random_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Random, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Random_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Particle_integrate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Particle_integrate", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_integrate" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_integrate" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->integrate(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Particle_setMass", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setMass" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setMass" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setMass(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getMass" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = (cyclone::real)((cyclone::Particle const *) arg1)->getMass();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setInverseMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Particle_setInverseMass", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setInverseMass" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setInverseMass" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setInverseMass(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getInverseMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getInverseMass" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = (cyclone::real)((cyclone::Particle const *) arg1)->getInverseMass();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_hasFiniteMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_hasFiniteMass" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = (bool) ((cyclone::Particle const *) arg1)->hasFiniteMass();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Particle_setDamping", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setDamping" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setDamping" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setDamping(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getDamping" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = (cyclone::real)((cyclone::Particle const *) arg1)->getDamping();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_setPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setPosition" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_setPosition" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Particle_setPosition" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setPosition((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_setPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setPosition" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setPosition" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Particle_setPosition" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Particle_setPosition" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setPosition(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setPosition(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_setPosition", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_setPosition__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Particle_setPosition__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_setPosition'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::setPosition(cyclone::Vector3 const &)\n"
"    cyclone::Particle::setPosition(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_Particle_getPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getPosition" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_getPosition" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::Particle const *) arg1)->getPosition(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_getPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getPosition" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = ((cyclone::Particle const *) arg1)->getPosition();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getPosition(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_getPosition", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getPosition__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getPosition__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_getPosition'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::getPosition(cyclone::Vector3 *) const\n"
"    cyclone::Particle::getPosition() const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_Particle_setVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setVelocity" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_setVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Particle_setVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setVelocity((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_setVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setVelocity" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setVelocity" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Particle_setVelocity" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Particle_setVelocity" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setVelocity(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setVelocity(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_setVelocity", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_setVelocity__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Particle_setVelocity__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_setVelocity'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::setVelocity(cyclone::Vector3 const &)\n"
"    cyclone::Particle::setVelocity(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_Particle_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getVelocity" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_getVelocity" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::Particle const *) arg1)->getVelocity(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getVelocity" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = ((cyclone::Particle const *) arg1)->getVelocity();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getVelocity(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_getVelocity", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getVelocity__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getVelocity__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_getVelocity'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::getVelocity(cyclone::Vector3 *) const\n"
"    cyclone::Particle::getVelocity() const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_Particle_setAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setAcceleration" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_setAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Particle_setAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setAcceleration((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_setAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_setAcceleration" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Particle_setAcceleration" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Particle_setAcceleration" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Particle_setAcceleration" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setAcceleration(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_setAcceleration(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_setAcceleration", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_setAcceleration__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_Particle_setAcceleration__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_setAcceleration'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::setAcceleration(cyclone::Vector3 const &)\n"
"    cyclone::Particle::setAcceleration(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_Particle_getAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getAcceleration" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_getAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::Particle const *) arg1)->getAcceleration(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_Particle_getAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_getAcceleration" "', argument " "1"" of type '" "cyclone::Particle const *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
result = ((cyclone::Particle const *) arg1)->getAcceleration();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_getAcceleration(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "Particle_getAcceleration", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getAcceleration__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Particle, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_Particle_getAcceleration__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'Particle_getAcceleration'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Particle::getAcceleration(cyclone::Vector3 *) const\n"
"    cyclone::Particle::getAcceleration() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Particle_clearAccumulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_clearAccumulator" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
(arg1)->clearAccumulator();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Particle_addForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Particle_addForce", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Particle_addForce" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Particle_addForce" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Particle_addForce" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->addForce((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Particle", 0, 0, 0)) SWIG_fail;
result = (cyclone::Particle * )
new cyclone::Particle();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Particle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Particle" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Particle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Particle, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Particle_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_RigidBody_calculateDerivedData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_calculateDerivedData" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
(arg1)->calculateDerivedData();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_integrate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_integrate", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_integrate" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_integrate" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->integrate(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setMass", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setMass" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setMass" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setMass(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getMass" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (cyclone::real)((cyclone::RigidBody const *) arg1)->getMass();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setInverseMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setInverseMass", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setInverseMass" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setInverseMass" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setInverseMass(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getInverseMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInverseMass" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (cyclone::real)((cyclone::RigidBody const *) arg1)->getInverseMass();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_hasFiniteMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_hasFiniteMass" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (bool) ((cyclone::RigidBody const *) arg1)->hasFiniteMass();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setInertiaTensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setInertiaTensor", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->setInertiaTensor((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInertiaTensor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getInertiaTensor(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInertiaTensor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Matrix3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getInertiaTensor();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getInertiaTensor(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getInertiaTensor", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInertiaTensor__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInertiaTensor__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getInertiaTensor'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getInertiaTensor(cyclone::Matrix3 *) const\n"
"    cyclone::RigidBody::getInertiaTensor() const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInertiaTensorWorld__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInertiaTensorWorld" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getInertiaTensorWorld" "', argument " "2"" of type '" "cyclone::Matrix3 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getInertiaTensorWorld(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInertiaTensorWorld__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Matrix3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInertiaTensorWorld" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getInertiaTensorWorld();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getInertiaTensorWorld(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getInertiaTensorWorld", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInertiaTensorWorld__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInertiaTensorWorld__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getInertiaTensorWorld'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getInertiaTensorWorld(cyclone::Matrix3 *) const\n"
"    cyclone::RigidBody::getInertiaTensorWorld() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_setInverseInertiaTensor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setInverseInertiaTensor", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setInverseInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setInverseInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setInverseInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
(arg1)->setInverseInertiaTensor((cyclone::Matrix3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInverseInertiaTensor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInverseInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getInverseInertiaTensor" "', argument " "2"" of type '" "cyclone::Matrix3 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getInverseInertiaTensor(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInverseInertiaTensor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Matrix3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInverseInertiaTensor" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getInverseInertiaTensor();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getInverseInertiaTensor(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getInverseInertiaTensor", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInverseInertiaTensor__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInverseInertiaTensor__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getInverseInertiaTensor'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getInverseInertiaTensor(cyclone::Matrix3 *) const\n"
"    cyclone::RigidBody::getInverseInertiaTensor() const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs,
PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInverseInertiaTensorWorld" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getInverseInertiaTensorWorld" "', argument " "2"" of type '" "cyclone::Matrix3 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getInverseInertiaTensorWorld(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs,
PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Matrix3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getInverseInertiaTensorWorld" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getInverseInertiaTensorWorld();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix3(static_cast< const cyclone::Matrix3 & >(result))),
SWIGTYPE_p_cyclone__Matrix3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getInverseInertiaTensorWorld(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getInverseInertiaTensorWorld", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getInverseInertiaTensorWorld__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getInverseInertiaTensorWorld'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getInverseInertiaTensorWorld(cyclone::Matrix3 *) const\n"
"    cyclone::RigidBody::getInverseInertiaTensorWorld() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_setDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setDamping", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setDamping" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setDamping" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setDamping" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->setDamping(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setLinearDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setLinearDamping", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setLinearDamping" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setLinearDamping" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setLinearDamping(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getLinearDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getLinearDamping" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (cyclone::real)((cyclone::RigidBody const *) arg1)->getLinearDamping();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setAngularDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_setAngularDamping", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setAngularDamping" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setAngularDamping" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setAngularDamping(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getAngularDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getAngularDamping" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (cyclone::real)((cyclone::RigidBody const *) arg1)->getAngularDamping();
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setPosition" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setPosition" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setPosition" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setPosition((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setPosition" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setPosition" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setPosition" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "RigidBody_setPosition" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setPosition(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setPosition(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setPosition", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setPosition__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setPosition__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setPosition'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setPosition(cyclone::Vector3 const &)\n"
"    cyclone::RigidBody::setPosition(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getPosition" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getPosition" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getPosition(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getPosition" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getPosition();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getPosition(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getPosition", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getPosition__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getPosition__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getPosition'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getPosition(cyclone::Vector3 *) const\n"
"    cyclone::RigidBody::getPosition() const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setOrientation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Quaternion *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setOrientation" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setOrientation" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setOrientation" "', argument " "2"" of type '" "cyclone::Quaternion const &""'");
}
arg2 = reinterpret_cast< cyclone::Quaternion * >(argp2);
(arg1)->setOrientation((cyclone::Quaternion const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setOrientation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;

if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setOrientation" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setOrientation" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setOrientation" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "RigidBody_setOrientation" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "RigidBody_setOrientation" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
(arg1)->setOrientation(arg2, arg3, arg4, arg5);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setOrientation(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[6] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setOrientation", 0, 5, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setOrientation__SWIG_0(self, argc, argv);
}
}
}
if (argc == 5) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setOrientation__SWIG_1(self, argc, argv);
}
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setOrientation'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setOrientation(cyclone::Quaternion const &)\n"
"    cyclone::RigidBody::setOrientation(cyclone::real const,cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getOrientation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Quaternion *arg2 = (cyclone::Quaternion *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getOrientation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Quaternion, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getOrientation" "', argument " "2"" of type '" "cyclone::Quaternion *""'");
}
arg2 = reinterpret_cast< cyclone::Quaternion * >(argp2);
((cyclone::RigidBody const *) arg1)->getOrientation(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getOrientation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Quaternion result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getOrientation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getOrientation();
resultobj = SWIG_NewPointerObj((new cyclone::Quaternion(static_cast< const cyclone::Quaternion & >(result))),
SWIGTYPE_p_cyclone__Quaternion, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getOrientation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix3 *arg2 = (cyclone::Matrix3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getOrientation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getOrientation" "', argument " "2"" of type '" "cyclone::Matrix3 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getOrientation(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getOrientation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getOrientation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getOrientation" "', argument " "2"" of type '" "cyclone::real [9]""'");
}
arg2 = reinterpret_cast< cyclone::real * >(argp2);
((cyclone::RigidBody const *) arg1)->getOrientation(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getOrientation(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getOrientation", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getOrientation__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Quaternion, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getOrientation__SWIG_0(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getOrientation__SWIG_2(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getOrientation__SWIG_3(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getOrientation'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getOrientation(cyclone::Quaternion *) const\n"
"    cyclone::RigidBody::getOrientation() const\n"
"    cyclone::RigidBody::getOrientation(cyclone::Matrix3 *) const\n"
"    cyclone::RigidBody::getOrientation(cyclone::real [9]) const\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getTransform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Matrix4 *arg2 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getTransform" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getTransform" "', argument " "2"" of type '" "cyclone::Matrix4 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix4 * >(argp2);
((cyclone::RigidBody const *) arg1)->getTransform(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getTransform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getTransform" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getTransform" "', argument " "2"" of type '" "cyclone::real [16]""'");
}
arg2 = reinterpret_cast< cyclone::real * >(argp2);
((cyclone::RigidBody const *) arg1)->getTransform(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getGLTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
float *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_getGLTransform", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getGLTransform" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getGLTransform" "', argument " "2"" of type '" "float [16]""'");
}
arg2 = reinterpret_cast< float * >(argp2);
((cyclone::RigidBody const *) arg1)->getGLTransform(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getTransform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Matrix4 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getTransform" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getTransform();
resultobj = SWIG_NewPointerObj((new cyclone::Matrix4(static_cast< const cyclone::Matrix4 & >(result))),
SWIGTYPE_p_cyclone__Matrix4, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getTransform(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getTransform", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getTransform__SWIG_2(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getTransform__SWIG_1(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Matrix4, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getTransform__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getTransform'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getTransform(cyclone::Matrix4 *) const\n"
"    cyclone::RigidBody::getTransform(cyclone::real [16]) const\n"
"    cyclone::RigidBody::getTransform() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_getPointInLocalSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "RigidBody_getPointInLocalSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getPointInLocalSpace" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getPointInLocalSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_getPointInLocalSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::RigidBody const *) arg1)->getPointInLocalSpace((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getPointInWorldSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "RigidBody_getPointInWorldSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getPointInWorldSpace" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getPointInWorldSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_getPointInWorldSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::RigidBody const *) arg1)->getPointInWorldSpace((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getDirectionInLocalSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "RigidBody_getDirectionInLocalSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getDirectionInLocalSpace" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getDirectionInLocalSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_getDirectionInLocalSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::RigidBody const *) arg1)->getDirectionInLocalSpace((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getDirectionInWorldSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "RigidBody_getDirectionInWorldSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getDirectionInWorldSpace" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getDirectionInWorldSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_getDirectionInWorldSpace" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
result = ((cyclone::RigidBody const *) arg1)->getDirectionInWorldSpace((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setVelocity" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setVelocity((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setVelocity" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setVelocity" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setVelocity" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "RigidBody_setVelocity" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setVelocity(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setVelocity(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setVelocity", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setVelocity__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setVelocity__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setVelocity'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setVelocity(cyclone::Vector3 const &)\n"
"    cyclone::RigidBody::setVelocity(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getVelocity" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getVelocity" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getVelocity(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getVelocity" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getVelocity();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getVelocity(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getVelocity", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getVelocity__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getVelocity__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getVelocity'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getVelocity(cyclone::Vector3 *) const\n"
"    cyclone::RigidBody::getVelocity() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_addVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addVelocity", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addVelocity" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addVelocity" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->addVelocity((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setRotation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setRotation" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setRotation" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setRotation" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setRotation((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setRotation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setRotation" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setRotation" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setRotation" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "RigidBody_setRotation" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setRotation(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setRotation(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setRotation", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setRotation__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setRotation__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setRotation'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setRotation(cyclone::Vector3 const &)\n"
"    cyclone::RigidBody::setRotation(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getRotation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getRotation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getRotation" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getRotation(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getRotation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getRotation" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getRotation();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getRotation(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getRotation", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getRotation__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getRotation__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getRotation'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getRotation(cyclone::Vector3 *) const\n"
"    cyclone::RigidBody::getRotation() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_addRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addRotation", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addRotation" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addRotation" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addRotation" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->addRotation((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getAwake(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getAwake" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (bool) ((cyclone::RigidBody const *) arg1)->getAwake();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setAwake__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
bool arg2;
void *argp1 = 0;
int res1 = 0;
bool val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setAwake" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setAwake" "', argument " "2"" of type '" "bool""'");
}
arg2 = static_cast< bool >(val2);
(arg1)->setAwake(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setAwake__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setAwake" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
(arg1)->setAwake();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setAwake(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setAwake", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setAwake__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_bool(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setAwake__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setAwake'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setAwake(bool const)\n"
"    cyclone::RigidBody::setAwake()\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_getCanSleep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getCanSleep" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = (bool) ((cyclone::RigidBody const *) arg1)->getCanSleep();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setCanSleep__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
bool arg2;
void *argp1 = 0;
int res1 = 0;
bool val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setCanSleep" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setCanSleep" "', argument " "2"" of type '" "bool""'");
}
arg2 = static_cast< bool >(val2);
(arg1)->setCanSleep(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setCanSleep__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setCanSleep" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
(arg1)->setCanSleep();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setCanSleep(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setCanSleep", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setCanSleep__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_bool(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setCanSleep__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setCanSleep'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setCanSleep(bool const)\n"
"    cyclone::RigidBody::setCanSleep()\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_getLastFrameAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs,
PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getLastFrameAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getLastFrameAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getLastFrameAcceleration(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getLastFrameAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs,
PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getLastFrameAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getLastFrameAcceleration();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getLastFrameAcceleration(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getLastFrameAcceleration", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getLastFrameAcceleration__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getLastFrameAcceleration__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getLastFrameAcceleration'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getLastFrameAcceleration(cyclone::Vector3 *) const\n"
"    cyclone::RigidBody::getLastFrameAcceleration() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_RigidBody_clearAccumulators(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_clearAccumulators" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
(arg1)->clearAccumulators();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_addForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addForce", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addForce" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addForce" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addForce" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->addForce((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_addForceAtPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addForceAtPoint", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addForceAtPoint" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addForceAtPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addForceAtPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "RigidBody_addForceAtPoint" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addForceAtPoint" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
(arg1)->addForceAtPoint((cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const &)*arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_addForceAtBodyPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addForceAtBodyPoint", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addForceAtBodyPoint" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addForceAtBodyPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addForceAtBodyPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "RigidBody_addForceAtBodyPoint" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addForceAtBodyPoint" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
(arg1)->addForceAtBodyPoint((cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const &)*arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_addTorque(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "RigidBody_addTorque", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_addTorque" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_addTorque" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_addTorque" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->addTorque((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_setAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "RigidBody_setAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->setAcceleration((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_setAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_setAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "RigidBody_setAcceleration" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "RigidBody_setAcceleration" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "RigidBody_setAcceleration" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->setAcceleration(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_setAcceleration(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_setAcceleration", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_setAcceleration__SWIG_0(self, argc, argv);
}
}
}
if (argc == 4) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_RigidBody_setAcceleration__SWIG_1(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_setAcceleration'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::setAcceleration(cyclone::Vector3 const &)\n"
"    cyclone::RigidBody::setAcceleration(cyclone::real const,cyclone::real const,cyclone::real const)\n");
return 0;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getAcceleration__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "RigidBody_getAcceleration" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
((cyclone::RigidBody const *) arg1)->getAcceleration(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_RigidBody_getAcceleration__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
cyclone::Vector3 result;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "RigidBody_getAcceleration" "', argument " "1"" of type '" "cyclone::RigidBody const *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
result = ((cyclone::RigidBody const *) arg1)->getAcceleration();
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_RigidBody_getAcceleration(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "RigidBody_getAcceleration", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getAcceleration__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__RigidBody, 0);
_v = SWIG_CheckState(res);
if (_v) {
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
return _wrap_RigidBody_getAcceleration__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'RigidBody_getAcceleration'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::RigidBody::getAcceleration(cyclone::Vector3 *) const\n"
"    cyclone::RigidBody::getAcceleration() const\n");
return 0;
}


SWIGINTERN PyObject *_wrap_new_RigidBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_RigidBody", 0, 0, 0)) SWIG_fail;
result = (cyclone::RigidBody * )
new cyclone::RigidBody();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__RigidBody, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RigidBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::RigidBody *arg1 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__RigidBody, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_RigidBody" "', argument " "1"" of type '" "cyclone::RigidBody *""'");
}
arg1 = reinterpret_cast< cyclone::RigidBody * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *RigidBody_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__RigidBody, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *RigidBody_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleContact_particle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
cyclone::Particle **arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContact_particle_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_particle_set" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleContact_particle_set" "', argument " "2"" of type '" "cyclone::Particle *[2]""'");
}
arg2 = reinterpret_cast< cyclone::Particle ** >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::Particle * *) & arg1->particle[ii] = *((cyclone::Particle **) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""particle""' of type '""cyclone::Particle *[2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_particle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Particle **result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_particle_get" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
result = (cyclone::Particle * *)(cyclone::Particle * *)((arg1)->particle);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContact_restitution_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_restitution_set" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleContact_restitution_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->restitution = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_restitution_get" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
result = (cyclone::real)((arg1)->restitution);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_contactNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContact_contactNormal_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_contactNormal_set" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleContact_contactNormal_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->contactNormal = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_contactNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_contactNormal_get" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->contactNormal);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_penetration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContact_penetration_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_penetration_set" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleContact_penetration_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->penetration = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_penetration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_penetration_get" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
result = (cyclone::real)((arg1)->penetration);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_particleMovement_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
cyclone::Vector3 *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContact_particleMovement_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_particleMovement_set" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleContact_particleMovement_set" "', argument " "2"" of type '" "cyclone::Vector3 [2]""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::Vector3 * ) & arg1->particleMovement[ii] = *((cyclone::Vector3 *) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""particleMovement""' of type '""cyclone::Vector3 [2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContact_particleMovement_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContact_particleMovement_get" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
result = (cyclone::Vector3 * )(cyclone::Vector3 * )((arg1)->particleMovement);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleContact", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleContact * )
new cyclone::ParticleContact();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleContact, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContact *arg1 = (cyclone::ParticleContact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContact, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleContact" "', argument " "1"" of type '" "cyclone::ParticleContact *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContact * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleContact_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleContact, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleContact_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleContactResolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int val1;
int ecode1 = 0;
PyObject *swig_obj[1];
cyclone::ParticleContactResolver *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
result = (cyclone::ParticleContactResolver * )
new cyclone::ParticleContactResolver(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleContactResolver,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContactResolver_setIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleContactResolver_setIterations", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContactResolver_setIterations" "', argument " "1"" of type '" "cyclone::ParticleContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactResolver * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleContactResolver_setIterations" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
(arg1)->setIterations(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContactResolver_resolveContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "ParticleContactResolver_resolveContacts", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContactResolver_resolveContacts" "', argument " "1"" of type '" "cyclone::ParticleContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactResolver * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleContactResolver_resolveContacts" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleContactResolver_resolveContacts" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "ParticleContactResolver_resolveContacts" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->resolveContacts(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleContactResolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactResolver *arg1 = (cyclone::ParticleContactResolver *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactResolver, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleContactResolver" "', argument " "1"" of type '" "cyclone::ParticleContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactResolver * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleContactResolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleContactResolver, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleContactResolver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_ParticleContactGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactGenerator *arg1 = (cyclone::ParticleContactGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactGenerator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleContactGenerator" "', argument " "1"" of type '" "cyclone::ParticleContactGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactGenerator * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleContactGenerator_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactGenerator *arg1 = (cyclone::ParticleContactGenerator *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
Swig::Director *director = 0;
bool upcall = false;
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleContactGenerator_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleContactGenerator_addContact" "', argument " "1"" of type '" "cyclone::ParticleContactGenerator const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactGenerator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleContactGenerator_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleContactGenerator_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
director = SWIG_DIRECTOR_CAST(arg1);
upcall = (director && (director->swig_get_self() == swig_obj[0]));
try {
if (upcall) {
result = (unsigned int) ((cyclone::ParticleContactGenerator const *) arg1)->cyclone::ParticleContactGenerator::addContact(
arg2, arg3);
} else {
result = (unsigned int) ((cyclone::ParticleContactGenerator const *) arg1)->addContact(arg2, arg3);
}
} catch (Swig::DirectorException &) {
SWIG_fail;
}
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleContactGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
PyObject *arg1 = (PyObject *) 0;
PyObject *swig_obj[1];
cyclone::ParticleContactGenerator *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
arg1 = swig_obj[0];
if (arg1 != Py_None) {
/* subclassed */
result = (cyclone::ParticleContactGenerator * )
new SwigDirector_ParticleContactGenerator(arg1);
} else {
result = (cyclone::ParticleContactGenerator * )
new cyclone::ParticleContactGenerator();
}

resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleContactGenerator,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ParticleContactGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleContactGenerator *arg1 = (cyclone::ParticleContactGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleContactGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "disown_ParticleContactGenerator" "', argument " "1"" of type '" "cyclone::ParticleContactGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleContactGenerator * >(argp1);
{
Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
if (director) director->swig_disown();
}

resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleContactGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleContactGenerator, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleContactGenerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleLink_particle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
cyclone::Particle **arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleLink_particle_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_particle_set" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleLink_particle_set" "', argument " "2"" of type '" "cyclone::Particle *[2]""'");
}
arg2 = reinterpret_cast< cyclone::Particle ** >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::Particle * *) & arg1->particle[ii] = *((cyclone::Particle **) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""particle""' of type '""cyclone::Particle *[2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_particle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Particle **result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_particle_get" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
result = (cyclone::Particle * *)(cyclone::Particle * *)((arg1)->particle);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleLink_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_addContact" "', argument " "1"" of type '" "cyclone::ParticleLink const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleLink_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleLink_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleLink const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_setParticle0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleLink_setParticle0", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_setParticle0" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleLink_setParticle0" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
(arg1)->setParticle0(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_setParticle1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleLink_setParticle1", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_setParticle1" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleLink_setParticle1" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
(arg1)->setParticle1(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_getParticle0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Particle *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_getParticle0" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
result = (cyclone::Particle * )(arg1)->getParticle0();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleLink_getParticle1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Particle *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleLink_getParticle1" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
result = (cyclone::Particle * )(arg1)->getParticle1();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleLink", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleLink * )
new cyclone::ParticleLink();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleLink, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleLink *arg1 = (cyclone::ParticleLink *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleLink, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleLink" "', argument " "1"" of type '" "cyclone::ParticleLink *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleLink * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleLink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleLink, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleLink_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleCable_maxLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleCable_maxLength_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCable_maxLength_set" "', argument " "1"" of type '" "cyclone::ParticleCable *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleCable_maxLength_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->maxLength = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCable_maxLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCable_maxLength_get" "', argument " "1"" of type '" "cyclone::ParticleCable *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
result = (cyclone::real)((arg1)->maxLength);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCable_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleCable_restitution_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCable_restitution_set" "', argument " "1"" of type '" "cyclone::ParticleCable *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleCable_restitution_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->restitution = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCable_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCable_restitution_get" "', argument " "1"" of type '" "cyclone::ParticleCable *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
result = (cyclone::real)((arg1)->restitution);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCable_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleCable_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCable_addContact" "', argument " "1"" of type '" "cyclone::ParticleCable const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleCable_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleCable_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleCable const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleCable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleCable", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleCable * )
new cyclone::ParticleCable();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleCable, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleCable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCable *arg1 = (cyclone::ParticleCable *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCable, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleCable" "', argument " "1"" of type '" "cyclone::ParticleCable *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCable * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleCable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleCable, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleCable_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleRod_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleRod_length_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRod, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRod_length_set" "', argument " "1"" of type '" "cyclone::ParticleRod *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRod * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleRod_length_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->length = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleRod_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRod, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRod_length_get" "', argument " "1"" of type '" "cyclone::ParticleRod *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRod * >(argp1);
result = (cyclone::real)((arg1)->length);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleRod_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleRod_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRod, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRod_addContact" "', argument " "1"" of type '" "cyclone::ParticleRod const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRod * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleRod_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleRod_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleRod const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleRod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRod *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleRod", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleRod * )
new cyclone::ParticleRod();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleRod, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleRod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRod *arg1 = (cyclone::ParticleRod *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRod, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleRod" "', argument " "1"" of type '" "cyclone::ParticleRod *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRod * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleRod_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleRod, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleRod_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleConstraint_particle_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleConstraint_particle_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleConstraint_particle_set" "', argument " "1"" of type '" "cyclone::ParticleConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleConstraint_particle_set" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
if (arg1) (arg1)->particle = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleConstraint_particle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Particle *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleConstraint_particle_get" "', argument " "1"" of type '" "cyclone::ParticleConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
result = (cyclone::Particle * )((arg1)->particle);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Particle, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleConstraint_anchor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleConstraint_anchor_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleConstraint_anchor_set" "', argument " "1"" of type '" "cyclone::ParticleConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleConstraint_anchor_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->anchor = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleConstraint_anchor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleConstraint_anchor_get" "', argument " "1"" of type '" "cyclone::ParticleConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->anchor);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleConstraint_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleConstraint_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleConstraint_addContact" "', argument " "1"" of type '" "cyclone::ParticleConstraint const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleConstraint_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleConstraint_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleConstraint const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleConstraint *arg1 = (cyclone::ParticleConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleConstraint, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleConstraint" "', argument " "1"" of type '" "cyclone::ParticleConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleConstraint * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleConstraint, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ParticleCableConstraint_maxLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleCableConstraint_maxLength_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCableConstraint_maxLength_set" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleCableConstraint_maxLength_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->maxLength = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCableConstraint_maxLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCableConstraint_maxLength_get" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
result = (cyclone::real)((arg1)->maxLength);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCableConstraint_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleCableConstraint_restitution_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCableConstraint_restitution_set" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleCableConstraint_restitution_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->restitution = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCableConstraint_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCableConstraint_restitution_get" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
result = (cyclone::real)((arg1)->restitution);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleCableConstraint_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleCableConstraint_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleCableConstraint_addContact" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleCableConstraint_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleCableConstraint_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleCableConstraint const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleCableConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleCableConstraint", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleCableConstraint * )
new cyclone::ParticleCableConstraint();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleCableConstraint,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleCableConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleCableConstraint *arg1 = (cyclone::ParticleCableConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleCableConstraint, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleCableConstraint" "', argument " "1"" of type '" "cyclone::ParticleCableConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleCableConstraint * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleCableConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleCableConstraint, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleCableConstraint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleRodConstraint_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleRodConstraint_length_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRodConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRodConstraint_length_set" "', argument " "1"" of type '" "cyclone::ParticleRodConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRodConstraint * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleRodConstraint_length_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->length = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleRodConstraint_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRodConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRodConstraint_length_get" "', argument " "1"" of type '" "cyclone::ParticleRodConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRodConstraint * >(argp1);
result = (cyclone::real)((arg1)->length);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleRodConstraint_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ParticleRodConstraint_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRodConstraint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleRodConstraint_addContact" "', argument " "1"" of type '" "cyclone::ParticleRodConstraint const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRodConstraint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleRodConstraint_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleRodConstraint_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ParticleRodConstraint const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleRodConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRodConstraint *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleRodConstraint", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleRodConstraint * )
new cyclone::ParticleRodConstraint();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleRodConstraint,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleRodConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleRodConstraint *arg1 = (cyclone::ParticleRodConstraint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleRodConstraint, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleRodConstraint" "', argument " "1"" of type '" "cyclone::ParticleRodConstraint *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleRodConstraint * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleRodConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleRodConstraint, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleRodConstraint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_ParticleForceGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceGenerator *arg1 = (cyclone::ParticleForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceGenerator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleForceGenerator" "', argument " "1"" of type '" "cyclone::ParticleForceGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceGenerator * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleForceGenerator_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceGenerator *arg1 = (cyclone::ParticleForceGenerator *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];
Swig::Director *director = 0;
bool upcall = false;

if (!SWIG_Python_UnpackTuple(args, "ParticleForceGenerator_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleForceGenerator_updateForce" "', argument " "1"" of type '" "cyclone::ParticleForceGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceGenerator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleForceGenerator_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleForceGenerator_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
director = SWIG_DIRECTOR_CAST(arg1);
upcall = (director && (director->swig_get_self() == swig_obj[0]));
try {
if (upcall) {
(arg1)->cyclone::ParticleForceGenerator::updateForce(arg2, arg3);
} else {
(arg1)->updateForce(arg2, arg3);
}
} catch (Swig::DirectorException &) {
SWIG_fail;
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleForceGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
PyObject *arg1 = (PyObject *) 0;
PyObject *swig_obj[1];
cyclone::ParticleForceGenerator *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
arg1 = swig_obj[0];
if (arg1 != Py_None) {
/* subclassed */
result = (cyclone::ParticleForceGenerator * )
new SwigDirector_ParticleForceGenerator(arg1);
} else {
result = (cyclone::ParticleForceGenerator * )
new cyclone::ParticleForceGenerator();
}

resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleForceGenerator,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ParticleForceGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceGenerator *arg1 = (cyclone::ParticleForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "disown_ParticleForceGenerator" "', argument " "1"" of type '" "cyclone::ParticleForceGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceGenerator * >(argp1);
{
Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
if (director) director->swig_disown();
}

resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleForceGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleForceGenerator, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleForceGenerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::ParticleGravity *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleGravity" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_ParticleGravity" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::ParticleGravity * )
new cyclone::ParticleGravity((cyclone::Vector3 const &)*arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleGravity, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleGravity_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleGravity *arg1 = (cyclone::ParticleGravity *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleGravity_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleGravity, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleGravity_updateForce" "', argument " "1"" of type '" "cyclone::ParticleGravity *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleGravity * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleGravity_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleGravity_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleGravity *arg1 = (cyclone::ParticleGravity *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleGravity, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleGravity" "', argument " "1"" of type '" "cyclone::ParticleGravity *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleGravity * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleGravity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleGravity, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleGravity_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleDrag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::ParticleDrag *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleDrag", 2, 2, swig_obj)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleDrag" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleDrag" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (cyclone::ParticleDrag * )
new cyclone::ParticleDrag(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleDrag, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleDrag_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleDrag *arg1 = (cyclone::ParticleDrag *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleDrag_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleDrag, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleDrag_updateForce" "', argument " "1"" of type '" "cyclone::ParticleDrag *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleDrag * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleDrag_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleDrag_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleDrag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleDrag *arg1 = (cyclone::ParticleDrag *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleDrag, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleDrag" "', argument " "1"" of type '" "cyclone::ParticleDrag *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleDrag * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleDrag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleDrag, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleDrag_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *
_wrap_new_ParticleAnchoredSpring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **
SWIGUNUSEDPARM(swig_obj)) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredSpring *result = 0;

if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
result = (cyclone::ParticleAnchoredSpring * )
new cyclone::ParticleAnchoredSpring();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleAnchoredSpring,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ParticleAnchoredSpring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::ParticleAnchoredSpring *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleAnchoredSpring" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleAnchoredSpring" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleAnchoredSpring" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ParticleAnchoredSpring * )
new cyclone::ParticleAnchoredSpring(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleAnchoredSpring,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleAnchoredSpring(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParticleAnchoredSpring", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 0) {
return _wrap_new_ParticleAnchoredSpring__SWIG_0(self, argc, argv);
}
if (argc == 3) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__Vector3, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleAnchoredSpring__SWIG_1(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'new_ParticleAnchoredSpring'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring()\n"
"    cyclone::ParticleAnchoredSpring::ParticleAnchoredSpring(cyclone::Vector3 *,cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleAnchoredSpring_getAnchor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredSpring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleAnchoredSpring_getAnchor" "', argument " "1"" of type '" "cyclone::ParticleAnchoredSpring const *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredSpring * >(argp1);
result = (cyclone::Vector3 * )((cyclone::ParticleAnchoredSpring const *) arg1)->getAnchor();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleAnchoredSpring_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "ParticleAnchoredSpring_init", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredSpring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleAnchoredSpring_init" "', argument " "1"" of type '" "cyclone::ParticleAnchoredSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredSpring * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleAnchoredSpring_init" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleAnchoredSpring_init" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "ParticleAnchoredSpring_init" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->init(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleAnchoredSpring_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleAnchoredSpring_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredSpring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleAnchoredSpring_updateForce" "', argument " "1"" of type '" "cyclone::ParticleAnchoredSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredSpring * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleAnchoredSpring_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleAnchoredSpring_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleAnchoredSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredSpring *arg1 = (cyclone::ParticleAnchoredSpring *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredSpring, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleAnchoredSpring" "', argument " "1"" of type '" "cyclone::ParticleAnchoredSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredSpring * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleAnchoredSpring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleAnchoredSpring, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleAnchoredSpring_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleAnchoredBungee_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredBungee *arg1 = (cyclone::ParticleAnchoredBungee *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleAnchoredBungee_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredBungee, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleAnchoredBungee_updateForce" "', argument " "1"" of type '" "cyclone::ParticleAnchoredBungee *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredBungee * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleAnchoredBungee_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleAnchoredBungee_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleAnchoredBungee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredBungee *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleAnchoredBungee", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleAnchoredBungee * )
new cyclone::ParticleAnchoredBungee();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleAnchoredBungee,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleAnchoredBungee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleAnchoredBungee *arg1 = (cyclone::ParticleAnchoredBungee *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleAnchoredBungee, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleAnchoredBungee" "', argument " "1"" of type '" "cyclone::ParticleAnchoredBungee *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleAnchoredBungee * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleAnchoredBungee_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleAnchoredBungee, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleAnchoredBungee_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleFakeSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = (cyclone::Vector3 *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];
cyclone::ParticleFakeSpring *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleFakeSpring", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleFakeSpring" "', argument " "1"" of type '" "cyclone::Vector3 *""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleFakeSpring" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleFakeSpring" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ParticleFakeSpring * )
new cyclone::ParticleFakeSpring(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleFakeSpring,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleFakeSpring_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleFakeSpring *arg1 = (cyclone::ParticleFakeSpring *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleFakeSpring_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleFakeSpring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleFakeSpring_updateForce" "', argument " "1"" of type '" "cyclone::ParticleFakeSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleFakeSpring * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleFakeSpring_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleFakeSpring_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleFakeSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleFakeSpring *arg1 = (cyclone::ParticleFakeSpring *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleFakeSpring, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleFakeSpring" "', argument " "1"" of type '" "cyclone::ParticleFakeSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleFakeSpring * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleFakeSpring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleFakeSpring, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleFakeSpring_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];
cyclone::ParticleSpring *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleSpring", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleSpring" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleSpring" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleSpring" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ParticleSpring * )
new cyclone::ParticleSpring(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleSpring, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleSpring_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleSpring *arg1 = (cyclone::ParticleSpring *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleSpring_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleSpring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleSpring_updateForce" "', argument " "1"" of type '" "cyclone::ParticleSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleSpring * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleSpring_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleSpring_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleSpring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleSpring *arg1 = (cyclone::ParticleSpring *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleSpring, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleSpring" "', argument " "1"" of type '" "cyclone::ParticleSpring *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleSpring * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleSpring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleSpring, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleSpring_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParticleBungee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Particle *arg1 = (cyclone::Particle *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];
cyclone::ParticleBungee *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleBungee", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_ParticleBungee" "', argument " "1"" of type '" "cyclone::Particle *""'");
}
arg1 = reinterpret_cast< cyclone::Particle * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleBungee" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleBungee" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ParticleBungee * )
new cyclone::ParticleBungee(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleBungee, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleBungee_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleBungee *arg1 = (cyclone::ParticleBungee *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleBungee_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleBungee, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleBungee_updateForce" "', argument " "1"" of type '" "cyclone::ParticleBungee *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleBungee * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleBungee_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleBungee_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleBungee(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleBungee *arg1 = (cyclone::ParticleBungee *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleBungee, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleBungee" "', argument " "1"" of type '" "cyclone::ParticleBungee *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleBungee * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleBungee_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleBungee, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleBungee_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *
_wrap_new_ParticleBuoyancy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
cyclone::ParticleBuoyancy *result = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleBuoyancy" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleBuoyancy" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleBuoyancy" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_ParticleBuoyancy" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
result = (cyclone::ParticleBuoyancy * )
new cyclone::ParticleBuoyancy(arg1, arg2, arg3, arg4);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleBuoyancy, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ParticleBuoyancy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::real arg1;
cyclone::real arg2;
cyclone::real arg3;
double val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::ParticleBuoyancy *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleBuoyancy" "', argument " "1"" of type '" "cyclone::real""'");
}
arg1 = static_cast< cyclone::real >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleBuoyancy" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ParticleBuoyancy" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ParticleBuoyancy * )
new cyclone::ParticleBuoyancy(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleBuoyancy, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleBuoyancy(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParticleBuoyancy", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 3) {
int _v;
{
int res = SWIG_AsVal_double(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleBuoyancy__SWIG_1(self, argc, argv);
}
}
}
}
if (argc == 4) {
int _v;
{
int res = SWIG_AsVal_double(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleBuoyancy__SWIG_0(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'new_ParticleBuoyancy'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::ParticleBuoyancy::ParticleBuoyancy(cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
"    cyclone::ParticleBuoyancy::ParticleBuoyancy(cyclone::real,cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ParticleBuoyancy_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleBuoyancy *arg1 = (cyclone::ParticleBuoyancy *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleBuoyancy_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleBuoyancy, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleBuoyancy_updateForce" "', argument " "1"" of type '" "cyclone::ParticleBuoyancy *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleBuoyancy * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleBuoyancy_updateForce" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ParticleBuoyancy_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleBuoyancy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleBuoyancy *arg1 = (cyclone::ParticleBuoyancy *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleBuoyancy, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleBuoyancy" "', argument " "1"" of type '" "cyclone::ParticleBuoyancy *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleBuoyancy * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleBuoyancy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleBuoyancy, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleBuoyancy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ParticleForceRegistry_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::ParticleForceGenerator *arg3 = (cyclone::ParticleForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleForceRegistry_add", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleForceRegistry_add" "', argument " "1"" of type '" "cyclone::ParticleForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceRegistry * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleForceRegistry_add" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__ParticleForceGenerator, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleForceRegistry_add" "', argument " "3"" of type '" "cyclone::ParticleForceGenerator *""'");
}
arg3 = reinterpret_cast< cyclone::ParticleForceGenerator * >(argp3);
(arg1)->add(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleForceRegistry_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0;
cyclone::Particle *arg2 = (cyclone::Particle *) 0;
cyclone::ParticleForceGenerator *arg3 = (cyclone::ParticleForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ParticleForceRegistry_remove", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleForceRegistry_remove" "', argument " "1"" of type '" "cyclone::ParticleForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceRegistry * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleForceRegistry_remove" "', argument " "2"" of type '" "cyclone::Particle *""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__ParticleForceGenerator, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ParticleForceRegistry_remove" "', argument " "3"" of type '" "cyclone::ParticleForceGenerator *""'");
}
arg3 = reinterpret_cast< cyclone::ParticleForceGenerator * >(argp3);
(arg1)->remove(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleForceRegistry_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleForceRegistry_clear" "', argument " "1"" of type '" "cyclone::ParticleForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceRegistry * >(argp1);
(arg1)->clear();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleForceRegistry_updateForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleForceRegistry_updateForces", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleForceRegistry_updateForces" "', argument " "1"" of type '" "cyclone::ParticleForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceRegistry * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleForceRegistry_updateForces" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->updateForces(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleForceRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ParticleForceRegistry", 0, 0, 0)) SWIG_fail;
result = (cyclone::ParticleForceRegistry * )
new cyclone::ParticleForceRegistry();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleForceRegistry,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleForceRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleForceRegistry *arg1 = (cyclone::ParticleForceRegistry *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleForceRegistry, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleForceRegistry" "', argument " "1"" of type '" "cyclone::ParticleForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleForceRegistry * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleForceRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleForceRegistry, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleForceRegistry_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *
_wrap_new_ParticleWorld__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int arg2;
unsigned int val1;
int ecode1 = 0;
unsigned int val2;
int ecode2 = 0;
cyclone::ParticleWorld *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleWorld" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ParticleWorld" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
result = (cyclone::ParticleWorld * )
new cyclone::ParticleWorld(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleWorld, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ParticleWorld__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int val1;
int ecode1 = 0;
cyclone::ParticleWorld *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ParticleWorld" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
result = (cyclone::ParticleWorld * )
new cyclone::ParticleWorld(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleWorld, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleWorld(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[3] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParticleWorld", 0, 2, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleWorld__SWIG_1(self, argc, argv);
}
}
if (argc == 2) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ParticleWorld__SWIG_0(self, argc, argv);
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'new_ParticleWorld'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::ParticleWorld::ParticleWorld(unsigned int,unsigned int)\n"
"    cyclone::ParticleWorld::ParticleWorld(unsigned int)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_delete_ParticleWorld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ParticleWorld" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_generateContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
unsigned int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_generateContacts" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
result = (unsigned int) (arg1)->generateContacts();
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_integrate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleWorld_integrate", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_integrate" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleWorld_integrate" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->integrate(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_runPhysics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleWorld_runPhysics", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_runPhysics" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ParticleWorld_runPhysics" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->runPhysics(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_startFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_startFrame" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
(arg1)->startFrame();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_getParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::ParticleWorld::Particles *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_getParticles" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
result = (cyclone::ParticleWorld::Particles * ) & (arg1)->getParticles();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_getContactGenerators(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::ParticleWorld::ContactGenerators *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_getContactGenerators" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
result = (cyclone::ParticleWorld::ContactGenerators * ) & (arg1)->getContactGenerators();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result),
SWIGTYPE_p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t,
0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_getForceRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::ParticleForceRegistry *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_getForceRegistry" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
result = (cyclone::ParticleForceRegistry * ) & (arg1)->getForceRegistry();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ParticleForceRegistry, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_appendContactGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
cyclone::ParticleContactGenerator *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleWorld_appendContactGenerator", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_appendContactGenerator" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContactGenerator, 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleWorld_appendContactGenerator" "', argument " "2"" of type '" "cyclone::ParticleContactGenerator &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "ParticleWorld_appendContactGenerator" "', argument " "2"" of type '" "cyclone::ParticleContactGenerator &""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContactGenerator * >(argp2);
(arg1)->appendContactGenerator(*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleWorld_appendParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ParticleWorld *arg1 = (cyclone::ParticleWorld *) 0;
cyclone::Particle *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ParticleWorld_appendParticles", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ParticleWorld, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ParticleWorld_appendParticles" "', argument " "1"" of type '" "cyclone::ParticleWorld *""'");
}
arg1 = reinterpret_cast< cyclone::ParticleWorld * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Particle, 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ParticleWorld_appendParticles" "', argument " "2"" of type '" "cyclone::Particle &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "ParticleWorld_appendParticles" "', argument " "2"" of type '" "cyclone::Particle &""'");
}
arg2 = reinterpret_cast< cyclone::Particle * >(argp2);
(arg1)->appendParticles(*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ParticleWorld_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ParticleWorld, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParticleWorld_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GroundContacts_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) 0;
cyclone::ParticleWorld::Particles *arg2 = (cyclone::ParticleWorld::Particles *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "GroundContacts_init", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__GroundContacts, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "GroundContacts_init" "', argument " "1"" of type '" "cyclone::GroundContacts *""'");
}
arg1 = reinterpret_cast< cyclone::GroundContacts * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,
SWIGTYPE_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "GroundContacts_init" "', argument " "2"" of type '" "cyclone::ParticleWorld::Particles *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleWorld::Particles * >(argp2);
(arg1)->init(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_GroundContacts_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) 0;
cyclone::ParticleContact *arg2 = (cyclone::ParticleContact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "GroundContacts_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__GroundContacts, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "GroundContacts_addContact" "', argument " "1"" of type '" "cyclone::GroundContacts const *""'");
}
arg1 = reinterpret_cast< cyclone::GroundContacts * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__ParticleContact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "GroundContacts_addContact" "', argument " "2"" of type '" "cyclone::ParticleContact *""'");
}
arg2 = reinterpret_cast< cyclone::ParticleContact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "GroundContacts_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::GroundContacts const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_GroundContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::GroundContacts *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_GroundContacts", 0, 0, 0)) SWIG_fail;
result = (cyclone::GroundContacts * )
new cyclone::GroundContacts();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__GroundContacts, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GroundContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::GroundContacts *arg1 = (cyclone::GroundContacts *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__GroundContacts, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_GroundContacts" "', argument " "1"" of type '" "cyclone::GroundContacts *""'");
}
arg1 = reinterpret_cast< cyclone::GroundContacts * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *GroundContacts_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__GroundContacts, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *GroundContacts_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionPrimitive_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionPrimitive_body_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_body_set" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionPrimitive_body_set" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
if (arg1) (arg1)->body = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::RigidBody *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_body_get" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
result = (cyclone::RigidBody * )((arg1)->body);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
cyclone::Matrix4 *arg2 = (cyclone::Matrix4 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionPrimitive_offset_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_offset_set" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionPrimitive_offset_set" "', argument " "2"" of type '" "cyclone::Matrix4 *""'");
}
arg2 = reinterpret_cast< cyclone::Matrix4 * >(argp2);
if (arg1) (arg1)->offset = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Matrix4 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_offset_get" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
result = (cyclone::Matrix4 * ) & ((arg1)->offset);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_calculateInternals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_calculateInternals" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
(arg1)->calculateInternals();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_getAxis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];
cyclone::Vector3 result;

if (!SWIG_Python_UnpackTuple(args, "CollisionPrimitive_getAxis", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_getAxis" "', argument " "1"" of type '" "cyclone::CollisionPrimitive const *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionPrimitive_getAxis" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
result = ((cyclone::CollisionPrimitive const *) arg1)->getAxis(arg2);
resultobj = SWIG_NewPointerObj((new cyclone::Vector3(static_cast< const cyclone::Vector3 & >(result))),
SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_OWN | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPrimitive_getTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Matrix4 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPrimitive_getTransform" "', argument " "1"" of type '" "cyclone::CollisionPrimitive const *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
result = (cyclone::Matrix4 * ) & ((cyclone::CollisionPrimitive const *) arg1)->getTransform();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Matrix4, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionPrimitive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionPrimitive", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionPrimitive * )
new cyclone::CollisionPrimitive();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionPrimitive,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionPrimitive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPrimitive *arg1 = (cyclone::CollisionPrimitive *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPrimitive, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionPrimitive" "', argument " "1"" of type '" "cyclone::CollisionPrimitive *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPrimitive * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionPrimitive_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionPrimitive, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionPrimitive_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionSphere_radius_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionSphere_radius_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionSphere_radius_set" "', argument " "1"" of type '" "cyclone::CollisionSphere *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionSphere_radius_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->radius = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionSphere_radius_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionSphere_radius_get" "', argument " "1"" of type '" "cyclone::CollisionSphere *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
result = (cyclone::real)((arg1)->radius);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionSphere", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionSphere * )
new cyclone::CollisionSphere();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionSphere, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = (cyclone::CollisionSphere *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionSphere" "', argument " "1"" of type '" "cyclone::CollisionSphere *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionSphere_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionSphere, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionSphere_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionPlane_direction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionPlane_direction_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPlane_direction_set" "', argument " "1"" of type '" "cyclone::CollisionPlane *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPlane * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionPlane_direction_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->direction = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPlane_direction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPlane_direction_get" "', argument " "1"" of type '" "cyclone::CollisionPlane *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPlane * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->direction);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPlane_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionPlane_offset_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPlane_offset_set" "', argument " "1"" of type '" "cyclone::CollisionPlane *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPlane * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionPlane_offset_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->offset = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionPlane_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionPlane_offset_get" "', argument " "1"" of type '" "cyclone::CollisionPlane *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPlane * >(argp1);
result = (cyclone::real)((arg1)->offset);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionPlane", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionPlane * )
new cyclone::CollisionPlane();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionPlane, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionPlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionPlane *arg1 = (cyclone::CollisionPlane *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionPlane, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionPlane" "', argument " "1"" of type '" "cyclone::CollisionPlane *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionPlane * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionPlane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionPlane, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionPlane_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionBox_halfSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionBox_halfSize_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionBox_halfSize_set" "', argument " "1"" of type '" "cyclone::CollisionBox *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionBox_halfSize_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->halfSize = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionBox_halfSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionBox_halfSize_get" "', argument " "1"" of type '" "cyclone::CollisionBox *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->halfSize);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionBox", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionBox * )
new cyclone::CollisionBox();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionBox, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = (cyclone::CollisionBox *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionBox" "', argument " "1"" of type '" "cyclone::CollisionBox *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionBox_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionBox, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionBox_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IntersectionTests_sphereAndHalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = 0;
cyclone::CollisionPlane *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "IntersectionTests_sphereAndHalfSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "IntersectionTests_sphereAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_sphereAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "IntersectionTests_sphereAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_sphereAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionPlane * >(argp2);
result = (bool) cyclone::IntersectionTests::sphereAndHalfSpace(
(cyclone::CollisionSphere const &)*arg1, (cyclone::CollisionPlane const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_IntersectionTests_sphereAndSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = 0;
cyclone::CollisionSphere *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "IntersectionTests_sphereAndSphere", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "IntersectionTests_sphereAndSphere" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_sphereAndSphere" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "IntersectionTests_sphereAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_sphereAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionSphere * >(argp2);
result = (bool) cyclone::IntersectionTests::sphereAndSphere(
(cyclone::CollisionSphere const &)*arg1, (cyclone::CollisionSphere const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_IntersectionTests_boxAndBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::CollisionBox *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "IntersectionTests_boxAndBox", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "IntersectionTests_boxAndBox" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_boxAndBox" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "IntersectionTests_boxAndBox" "', argument " "2"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_boxAndBox" "', argument " "2"" of type '" "cyclone::CollisionBox const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionBox * >(argp2);
result = (bool) cyclone::IntersectionTests::boxAndBox(
(cyclone::CollisionBox const &)*arg1, (cyclone::CollisionBox const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_IntersectionTests_boxAndHalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::CollisionPlane *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];
bool result;

if (!SWIG_Python_UnpackTuple(args, "IntersectionTests_boxAndHalfSpace", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "IntersectionTests_boxAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_boxAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "IntersectionTests_boxAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "IntersectionTests_boxAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionPlane * >(argp2);
result = (bool) cyclone::IntersectionTests::boxAndHalfSpace(
(cyclone::CollisionBox const &)*arg1, (cyclone::CollisionPlane const &)*arg2);
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntersectionTests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::IntersectionTests *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_IntersectionTests", 0, 0, 0)) SWIG_fail;
result = (cyclone::IntersectionTests * )
new cyclone::IntersectionTests();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__IntersectionTests,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntersectionTests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::IntersectionTests *arg1 = (cyclone::IntersectionTests *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__IntersectionTests, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_IntersectionTests" "', argument " "1"" of type '" "cyclone::IntersectionTests *""'");
}
arg1 = reinterpret_cast< cyclone::IntersectionTests * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *IntersectionTests_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__IntersectionTests, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *IntersectionTests_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionData_contactArray_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
Contact *arg2 = (Contact *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_contactArray_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactArray_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Contact, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionData_contactArray_set" "', argument " "2"" of type '" "Contact *""'");
}
arg2 = reinterpret_cast< Contact * >(argp2);
if (arg1) (arg1)->contactArray = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contactArray_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
Contact *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactArray_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (Contact * )((arg1)->contactArray);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Contact, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contacts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
Contact *arg2 = (Contact *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_contacts_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contacts_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Contact, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionData_contacts_set" "', argument " "2"" of type '" "Contact *""'");
}
arg2 = reinterpret_cast< Contact * >(argp2);
if (arg1) (arg1)->contacts = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contacts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
Contact *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contacts_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (Contact * )((arg1)->contacts);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Contact, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contactsLeft_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
int arg2;
void *argp1 = 0;
int res1 = 0;
int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_contactsLeft_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactsLeft_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_contactsLeft_set" "', argument " "2"" of type '" "int""'");
}
arg2 = static_cast< int >(val2);
if (arg1) (arg1)->contactsLeft = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contactsLeft_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactsLeft_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (int) ((arg1)->contactsLeft);
resultobj = SWIG_From_int(static_cast< int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contactCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_contactCount_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactCount_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_contactCount_set" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
if (arg1) (arg1)->contactCount = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_contactCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
unsigned int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_contactCount_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (unsigned int) ((arg1)->contactCount);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_friction_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_friction_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_friction_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->friction = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_friction_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (cyclone::real)((arg1)->friction);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_restitution_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_restitution_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_restitution_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->restitution = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_restitution_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (cyclone::real)((arg1)->restitution);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_tolerance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_tolerance_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_tolerance_set" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_tolerance_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->tolerance = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_tolerance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_tolerance_get" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (cyclone::real)((arg1)->tolerance);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_hasMoreContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_hasMoreContacts" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
result = (bool) (arg1)->hasMoreContacts();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_reset", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_reset" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_reset" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
(arg1)->reset(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionData_addContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionData_addContacts", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionData_addContacts" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionData_addContacts" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
(arg1)->addContacts(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionData", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionData * )
new cyclone::CollisionData();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionData, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionData *arg1 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionData, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionData" "', argument " "1"" of type '" "cyclone::CollisionData *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionData * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionData, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionData_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CollisionDataEx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
int arg1;
int val1;
int ecode1 = 0;
PyObject *swig_obj[1];
cyclone::CollisionDataEx *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_CollisionDataEx" "', argument " "1"" of type '" "int""'");
}
arg1 = static_cast< int >(val1);
result = (cyclone::CollisionDataEx * )
new cyclone::CollisionDataEx(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionDataEx, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDataEx_resolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionDataEx *arg1 = (cyclone::CollisionDataEx *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "CollisionDataEx_resolve", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionDataEx, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDataEx_resolve" "', argument " "1"" of type '" "cyclone::CollisionDataEx *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionDataEx * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "CollisionDataEx_resolve" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->resolve(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionDataEx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionDataEx *arg1 = (cyclone::CollisionDataEx *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionDataEx, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionDataEx" "', argument " "1"" of type '" "cyclone::CollisionDataEx *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionDataEx * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionDataEx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionDataEx, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionDataEx_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_CollisionDetector_sphereAndHalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = 0;
cyclone::CollisionPlane *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_sphereAndHalfSpace", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_sphereAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_sphereAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionPlane * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_sphereAndHalfSpace" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::sphereAndHalfSpace(
(cyclone::CollisionSphere const &)*arg1, (cyclone::CollisionPlane const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_sphereAndTruePlane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = 0;
cyclone::CollisionPlane *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_sphereAndTruePlane", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_sphereAndTruePlane" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndTruePlane" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_sphereAndTruePlane" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndTruePlane" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionPlane * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_sphereAndTruePlane" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::sphereAndTruePlane(
(cyclone::CollisionSphere const &)*arg1, (cyclone::CollisionPlane const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_sphereAndSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionSphere *arg1 = 0;
cyclone::CollisionSphere *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_sphereAndSphere", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_sphereAndSphere" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndSphere" "', argument " "1"" of type '" "cyclone::CollisionSphere const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionSphere * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_sphereAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_sphereAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionSphere * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_sphereAndSphere" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::sphereAndSphere(
(cyclone::CollisionSphere const &)*arg1, (cyclone::CollisionSphere const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_boxAndHalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::CollisionPlane *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_boxAndHalfSpace", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_boxAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndHalfSpace" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionPlane, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_boxAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndHalfSpace" "', argument " "2"" of type '" "cyclone::CollisionPlane const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionPlane * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_boxAndHalfSpace" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::boxAndHalfSpace(
(cyclone::CollisionBox const &)*arg1, (cyclone::CollisionPlane const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_boxAndBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::CollisionBox *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_boxAndBox", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_boxAndBox" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndBox" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_boxAndBox" "', argument " "2"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndBox" "', argument " "2"" of type '" "cyclone::CollisionBox const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionBox * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_boxAndBox" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::boxAndBox(
(cyclone::CollisionBox const &)*arg1, (cyclone::CollisionBox const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_boxAndPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::Vector3 *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_boxAndPoint", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_boxAndPoint" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndPoint" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_boxAndPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndPoint" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_boxAndPoint" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::boxAndPoint(
(cyclone::CollisionBox const &)*arg1, (cyclone::Vector3 const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_CollisionDetector_boxAndSphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionBox *arg1 = 0;
cyclone::CollisionSphere *arg2 = 0;
cyclone::CollisionData *arg3 = (cyclone::CollisionData *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "CollisionDetector_boxAndSphere", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionBox, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "CollisionDetector_boxAndSphere" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndSphere" "', argument " "1"" of type '" "cyclone::CollisionBox const &""'");
}
arg1 = reinterpret_cast< cyclone::CollisionBox * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__CollisionSphere, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "CollisionDetector_boxAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "CollisionDetector_boxAndSphere" "', argument " "2"" of type '" "cyclone::CollisionSphere const &""'");
}
arg2 = reinterpret_cast< cyclone::CollisionSphere * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__CollisionData, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "CollisionDetector_boxAndSphere" "', argument " "3"" of type '" "cyclone::CollisionData *""'");
}
arg3 = reinterpret_cast< cyclone::CollisionData * >(argp3);
result = (unsigned int) cyclone::CollisionDetector::boxAndSphere(
(cyclone::CollisionBox const &)*arg1, (cyclone::CollisionSphere const &)*arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_CollisionDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionDetector *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_CollisionDetector", 0, 0, 0)) SWIG_fail;
result = (cyclone::CollisionDetector * )
new cyclone::CollisionDetector();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__CollisionDetector,
SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CollisionDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::CollisionDetector *arg1 = (cyclone::CollisionDetector *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__CollisionDetector, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_CollisionDetector" "', argument " "1"" of type '" "cyclone::CollisionDetector *""'");
}
arg1 = reinterpret_cast< cyclone::CollisionDetector * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *CollisionDetector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__CollisionDetector, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *CollisionDetector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Contact_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::RigidBody **arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_body_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_body_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Contact_body_set" "', argument " "2"" of type '" "cyclone::RigidBody *[2]""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody ** >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::RigidBody * *) & arg1->body[ii] = *((cyclone::RigidBody **) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""body""' of type '""cyclone::RigidBody *[2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::RigidBody **result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_body_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::RigidBody * *)(cyclone::RigidBody * *)((arg1)->body);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cyclone__RigidBody, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_friction_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_friction_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_friction_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Contact_friction_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->friction = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_friction_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_friction_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::real)((arg1)->friction);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_restitution_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_restitution_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_restitution_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Contact_restitution_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->restitution = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_restitution_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_restitution_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::real)((arg1)->restitution);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_contactPoint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_contactPoint_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_contactPoint_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Contact_contactPoint_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->contactPoint = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_contactPoint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_contactPoint_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->contactPoint);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_contactNormal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::Vector3 *arg2 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_contactNormal_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_contactNormal_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Contact_contactNormal_set" "', argument " "2"" of type '" "cyclone::Vector3 *""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
if (arg1) (arg1)->contactNormal = *arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_contactNormal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_contactNormal_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::Vector3 * ) & ((arg1)->contactNormal);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_penetration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Contact_penetration_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_penetration_set" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Contact_penetration_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->penetration = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_penetration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_penetration_get" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
result = (cyclone::real)((arg1)->penetration);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Contact_setBodyData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::RigidBody *arg3 = (cyclone::RigidBody *) 0;
cyclone::real arg4;
cyclone::real arg5;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
PyObject *swig_obj[5];

if (!SWIG_Python_UnpackTuple(args, "Contact_setBodyData", 5, 5, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Contact_setBodyData" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Contact_setBodyData" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "Contact_setBodyData" "', argument " "3"" of type '" "cyclone::RigidBody *""'");
}
arg3 = reinterpret_cast< cyclone::RigidBody * >(argp3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "Contact_setBodyData" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "Contact_setBodyData" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
(arg1)->setBodyData(arg2, arg3, arg4, arg5);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Contact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Contact", 0, 0, 0)) SWIG_fail;
result = (cyclone::Contact * )
new cyclone::Contact();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Contact, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Contact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Contact *arg1 = (cyclone::Contact *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Contact, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Contact" "', argument " "1"" of type '" "cyclone::Contact *""'");
}
arg1 = reinterpret_cast< cyclone::Contact * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Contact_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Contact, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Contact_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ContactResolver_velocityIterationsUsed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ContactResolver_velocityIterationsUsed_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_velocityIterationsUsed_set" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ContactResolver_velocityIterationsUsed_set" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
if (arg1) (arg1)->velocityIterationsUsed = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ContactResolver_velocityIterationsUsed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
unsigned int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_velocityIterationsUsed_get" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
result = (unsigned int) ((arg1)->velocityIterationsUsed);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ContactResolver_positionIterationsUsed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ContactResolver_positionIterationsUsed_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_positionIterationsUsed_set" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ContactResolver_positionIterationsUsed_set" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
if (arg1) (arg1)->positionIterationsUsed = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ContactResolver_positionIterationsUsed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
unsigned int result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_positionIterationsUsed_get" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
result = (unsigned int) ((arg1)->positionIterationsUsed);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
cyclone::real arg2;
cyclone::real arg3;
unsigned int val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ContactResolver" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ContactResolver" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
cyclone::real arg2;
unsigned int val1;
int ecode1 = 0;
double val2;
int ecode2 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ContactResolver" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int val1;
int ecode1 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int arg2;
cyclone::real arg3;
cyclone::real arg4;
unsigned int val1;
int ecode1 = 0;
unsigned int val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ContactResolver" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ContactResolver" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_ContactResolver" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1, arg2, arg3, arg4);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int arg2;
cyclone::real arg3;
unsigned int val1;
int ecode1 = 0;
unsigned int val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ContactResolver" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_ContactResolver" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1, arg2, arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_new_ContactResolver__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
unsigned int arg1;
unsigned int arg2;
unsigned int val1;
int ecode1 = 0;
unsigned int val2;
int ecode2 = 0;
cyclone::ContactResolver *result = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
if (!SWIG_IsOK(ecode1)) {
SWIG_exception_fail(SWIG_ArgError(ecode1),
"in method '" "new_ContactResolver" "', argument " "1"" of type '" "unsigned int""'");
}
arg1 = static_cast< unsigned int >(val1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_ContactResolver" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
result = (cyclone::ContactResolver * )
new cyclone::ContactResolver(arg1, arg2);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContactResolver(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[5] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_ContactResolver", 0, 4, argv))) SWIG_fail;
--argc;
if (argc == 1) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_2(self, argc, argv);
}
}
if (argc == 2) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_5(self, argc, argv);
}
}
}
if (argc == 2) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_1(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_4(self, argc, argv);
}
}
}
}
if (argc == 3) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_0(self, argc, argv);
}
}
}
}
if (argc == 4) {
int _v;
{
int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_ContactResolver__SWIG_3(self, argc, argv);
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'new_ContactResolver'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int,cyclone::real,cyclone::real)\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int,cyclone::real)\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int)\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int,cyclone::real,cyclone::real)\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int,cyclone::real)\n"
"    cyclone::ContactResolver::ContactResolver(unsigned int,unsigned int)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ContactResolver_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
bool result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_isValid" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
result = (bool) (arg1)->isValid();
resultobj = SWIG_From_bool(static_cast< bool >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ContactResolver_setIterations__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
unsigned int arg2;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;
unsigned int val3;
int ecode3 = 0;

if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_setIterations" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ContactResolver_setIterations" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ContactResolver_setIterations" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
(arg1)->setIterations(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *
_wrap_ContactResolver_setIterations__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
unsigned int arg2;
void *argp1 = 0;
int res1 = 0;
unsigned int val2;
int ecode2 = 0;

if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_setIterations" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ContactResolver_setIterations" "', argument " "2"" of type '" "unsigned int""'");
}
arg2 = static_cast< unsigned int >(val2);
(arg1)->setIterations(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ContactResolver_setIterations(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[4] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "ContactResolver_setIterations", 0, 3, argv))) SWIG_fail;
--argc;
if (argc == 2) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__ContactResolver, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ContactResolver_setIterations__SWIG_1(self, argc, argv);
}
}
}
if (argc == 3) {
int _v;
void *vptr = 0;
int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_cyclone__ContactResolver, 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_ContactResolver_setIterations__SWIG_0(self, argc, argv);
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError(
"Wrong number or type of arguments for overloaded function 'ContactResolver_setIterations'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::ContactResolver::setIterations(unsigned int,unsigned int)\n"
"    cyclone::ContactResolver::setIterations(unsigned int)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_ContactResolver_setEpsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
cyclone::real arg2;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ContactResolver_setEpsilon", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_setEpsilon" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ContactResolver_setEpsilon" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ContactResolver_setEpsilon" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->setEpsilon(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ContactResolver_resolveContacts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
cyclone::Contact *arg2 = (cyclone::Contact *) 0;
unsigned int arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
PyObject *swig_obj[4];

if (!SWIG_Python_UnpackTuple(args, "ContactResolver_resolveContacts", 4, 4, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactResolver_resolveContacts" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ContactResolver_resolveContacts" "', argument " "2"" of type '" "cyclone::Contact *""'");
}
arg2 = reinterpret_cast< cyclone::Contact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ContactResolver_resolveContacts" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "ContactResolver_resolveContacts" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
(arg1)->resolveContacts(arg2, arg3, arg4);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ContactResolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactResolver *arg1 = (cyclone::ContactResolver *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactResolver, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ContactResolver" "', argument " "1"" of type '" "cyclone::ContactResolver *""'");
}
arg1 = reinterpret_cast< cyclone::ContactResolver * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ContactResolver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ContactResolver, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ContactResolver_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ContactGenerator_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactGenerator *arg1 = (cyclone::ContactGenerator *) 0;
cyclone::Contact *arg2 = (cyclone::Contact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "ContactGenerator_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ContactGenerator_addContact" "', argument " "1"" of type '" "cyclone::ContactGenerator const *""'");
}
arg1 = reinterpret_cast< cyclone::ContactGenerator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ContactGenerator_addContact" "', argument " "2"" of type '" "cyclone::Contact *""'");
}
arg2 = reinterpret_cast< cyclone::Contact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ContactGenerator_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::ContactGenerator const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ContactGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ContactGenerator *arg1 = (cyclone::ContactGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ContactGenerator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ContactGenerator" "', argument " "1"" of type '" "cyclone::ContactGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ContactGenerator * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ContactGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ContactGenerator, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ForceGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceGenerator *arg1 = (cyclone::ForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceGenerator, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ForceGenerator" "', argument " "1"" of type '" "cyclone::ForceGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ForceGenerator * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ForceGenerator_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceGenerator *arg1 = (cyclone::ForceGenerator *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ForceGenerator_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceGenerator, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ForceGenerator_updateForce" "', argument " "1"" of type '" "cyclone::ForceGenerator *""'");
}
arg1 = reinterpret_cast< cyclone::ForceGenerator * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ForceGenerator_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "ForceGenerator_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ForceGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceGenerator *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ForceGenerator", 0, 0, 0)) SWIG_fail;
result = (cyclone::ForceGenerator * )
new cyclone::ForceGenerator();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ForceGenerator, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ForceGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ForceGenerator, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ForceGenerator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Gravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Gravity *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Gravity" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Gravity" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
result = (cyclone::Gravity * )
new cyclone::Gravity((cyclone::Vector3 const &)*arg1);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Gravity, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Gravity_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Gravity *arg1 = (cyclone::Gravity *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Gravity_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Gravity, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Gravity_updateForce" "', argument " "1"" of type '" "cyclone::Gravity *""'");
}
arg1 = reinterpret_cast< cyclone::Gravity * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Gravity_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Gravity_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Gravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Gravity *arg1 = (cyclone::Gravity *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Gravity, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Gravity" "', argument " "1"" of type '" "cyclone::Gravity *""'");
}
arg1 = reinterpret_cast< cyclone::Gravity * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Gravity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Gravity, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Gravity_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Spring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg3 = 0;
cyclone::real arg4;
cyclone::real arg5;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
PyObject *swig_obj[5];
cyclone::Spring *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Spring", 5, 5, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Spring" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Spring" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_Spring" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "new_Spring" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Spring" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_Spring" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "new_Spring" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
result = (cyclone::Spring * )
new cyclone::Spring((cyclone::Vector3 const &)*arg1, arg2, (cyclone::Vector3 const &)*arg3, arg4, arg5);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Spring, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Spring_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Spring *arg1 = (cyclone::Spring *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Spring_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Spring, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Spring_updateForce" "', argument " "1"" of type '" "cyclone::Spring *""'");
}
arg1 = reinterpret_cast< cyclone::Spring * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Spring_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Spring_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Spring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Spring *arg1 = (cyclone::Spring *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Spring, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Spring" "', argument " "1"" of type '" "cyclone::Spring *""'");
}
arg1 = reinterpret_cast< cyclone::Spring * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Spring_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Spring, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Spring_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Aero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
cyclone::Aero *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Aero", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Aero" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Aero" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_Aero" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Aero" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "new_Aero" "', argument " "3"" of type '" "cyclone::Vector3 const *""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
result = (cyclone::Aero * )
new cyclone::Aero(
(cyclone::Matrix3 const &)*arg1, (cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const *) arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Aero, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Aero_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Aero *arg1 = (cyclone::Aero *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Aero_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Aero, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Aero_updateForce" "', argument " "1"" of type '" "cyclone::Aero *""'");
}
arg1 = reinterpret_cast< cyclone::Aero * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Aero_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Aero_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Aero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Aero *arg1 = (cyclone::Aero *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Aero, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Aero" "', argument " "1"" of type '" "cyclone::Aero *""'");
}
arg1 = reinterpret_cast< cyclone::Aero * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Aero_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Aero, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Aero_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AeroEx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = 0;
cyclone::Vector3 *arg2 = 0;
cyclone::Vector3 *arg3 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];
cyclone::AeroEx *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_AeroEx", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_AeroEx" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroEx" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_AeroEx" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroEx" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "new_AeroEx" "', argument " "3"" of type '" "cyclone::Vector3 const *""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
result = (cyclone::AeroEx * )
new cyclone::AeroEx(
(cyclone::Matrix3 const &)*arg1, (cyclone::Vector3 const &)*arg2, (cyclone::Vector3 const *) arg3);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__AeroEx, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_AeroEx_updateWindspeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::AeroEx *arg1 = (cyclone::AeroEx *) 0;
cyclone::Vector3 *arg2 = 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "AeroEx_updateWindspeed", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__AeroEx, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "AeroEx_updateWindspeed" "', argument " "1"" of type '" "cyclone::AeroEx *""'");
}
arg1 = reinterpret_cast< cyclone::AeroEx * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "AeroEx_updateWindspeed" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "AeroEx_updateWindspeed" "', argument " "2"" of type '" "cyclone::Vector3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
(arg1)->updateWindspeed((cyclone::Vector3 const &)*arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AeroEx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::AeroEx *arg1 = (cyclone::AeroEx *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__AeroEx, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_AeroEx" "', argument " "1"" of type '" "cyclone::AeroEx *""'");
}
arg1 = reinterpret_cast< cyclone::AeroEx * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *AeroEx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__AeroEx, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *AeroEx_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AeroControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Matrix3 *arg1 = 0;
cyclone::Matrix3 *arg2 = 0;
cyclone::Matrix3 *arg3 = 0;
cyclone::Vector3 *arg4 = 0;
cyclone::Vector3 *arg5 = (cyclone::Vector3 *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
void *argp4 = 0;
int res4 = 0;
void *argp5 = 0;
int res5 = 0;
PyObject *swig_obj[5];
cyclone::AeroControl *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_AeroControl", 5, 5, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_AeroControl" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroControl" "', argument " "1"" of type '" "cyclone::Matrix3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Matrix3 * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "new_AeroControl" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp2) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroControl" "', argument " "2"" of type '" "cyclone::Matrix3 const &""'");
}
arg2 = reinterpret_cast< cyclone::Matrix3 * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Matrix3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "new_AeroControl" "', argument " "3"" of type '" "cyclone::Matrix3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroControl" "', argument " "3"" of type '" "cyclone::Matrix3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Matrix3 * >(argp3);
res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res4)) {
SWIG_exception_fail(SWIG_ArgError(res4),
"in method '" "new_AeroControl" "', argument " "4"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp4) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_AeroControl" "', argument " "4"" of type '" "cyclone::Vector3 const &""'");
}
arg4 = reinterpret_cast< cyclone::Vector3 * >(argp4);
res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res5)) {
SWIG_exception_fail(SWIG_ArgError(res5),
"in method '" "new_AeroControl" "', argument " "5"" of type '" "cyclone::Vector3 const *""'");
}
arg5 = reinterpret_cast< cyclone::Vector3 * >(argp5);
result = (cyclone::AeroControl * )
new cyclone::AeroControl(
(cyclone::Matrix3 const &)*arg1, (cyclone::Matrix3 const &)*arg2, (cyclone::Matrix3 const &)*arg3, (cyclone::Vector3 const &)*arg4, (cyclone::Vector3 const *) arg5);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__AeroControl, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_AeroControl_setControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::AeroControl *arg1 = (cyclone::AeroControl *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "AeroControl_setControl", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__AeroControl, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "AeroControl_setControl" "', argument " "1"" of type '" "cyclone::AeroControl *""'");
}
arg1 = reinterpret_cast< cyclone::AeroControl * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "AeroControl_setControl" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->setControl(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_AeroControl_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::AeroControl *arg1 = (cyclone::AeroControl *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "AeroControl_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__AeroControl, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "AeroControl_updateForce" "', argument " "1"" of type '" "cyclone::AeroControl *""'");
}
arg1 = reinterpret_cast< cyclone::AeroControl * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "AeroControl_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "AeroControl_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AeroControl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::AeroControl *arg1 = (cyclone::AeroControl *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__AeroControl, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_AeroControl" "', argument " "1"" of type '" "cyclone::AeroControl *""'");
}
arg1 = reinterpret_cast< cyclone::AeroControl * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *AeroControl_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__AeroControl, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *AeroControl_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Buoyancy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
cyclone::real arg5;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
double val5;
int ecode5 = 0;
cyclone::Buoyancy *result = 0;

if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Buoyancy" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Buoyancy" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_Buoyancy" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_Buoyancy" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_Buoyancy" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
if (!SWIG_IsOK(ecode5)) {
SWIG_exception_fail(SWIG_ArgError(ecode5),
"in method '" "new_Buoyancy" "', argument " "5"" of type '" "cyclone::real""'");
}
arg5 = static_cast< cyclone::real >(val5);
result = (cyclone::Buoyancy * )
new cyclone::Buoyancy((cyclone::Vector3 const &)*arg1, arg2, arg3, arg4, arg5);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Buoyancy, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Buoyancy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
PyObject *resultobj = 0;
cyclone::Vector3 *arg1 = 0;
cyclone::real arg2;
cyclone::real arg3;
cyclone::real arg4;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
double val3;
int ecode3 = 0;
double val4;
int ecode4 = 0;
cyclone::Buoyancy *result = 0;

if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "new_Buoyancy" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp1) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "new_Buoyancy" "', argument " "1"" of type '" "cyclone::Vector3 const &""'");
}
arg1 = reinterpret_cast< cyclone::Vector3 * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "new_Buoyancy" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "new_Buoyancy" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
if (!SWIG_IsOK(ecode4)) {
SWIG_exception_fail(SWIG_ArgError(ecode4),
"in method '" "new_Buoyancy" "', argument " "4"" of type '" "cyclone::real""'");
}
arg4 = static_cast< cyclone::real >(val4);
result = (cyclone::Buoyancy * )
new cyclone::Buoyancy((cyclone::Vector3 const &)*arg1, arg2, arg3, arg4);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Buoyancy, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Buoyancy(PyObject *self, PyObject *args) {
Py_ssize_t argc;
PyObject *argv[6] = {
0
};

if (!(argc = SWIG_Python_UnpackTuple(args, "new_Buoyancy", 0, 5, argv))) SWIG_fail;
--argc;
if (argc == 4) {
int _v;
int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Buoyancy__SWIG_1(self, argc, argv);
}
}
}
}
}
if (argc == 5) {
int _v;
int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_cyclone__Vector3, SWIG_POINTER_NO_NULL | 0);
_v = SWIG_CheckState(res);
if (_v) {
{
int res = SWIG_AsVal_double(argv[1], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[2], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[3], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
{
int res = SWIG_AsVal_double(argv[4], NULL);
_v = SWIG_CheckState(res);
}
if (_v) {
return _wrap_new_Buoyancy__SWIG_0(self, argc, argv);
}
}
}
}
}
}

fail:
SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Buoyancy'.\n"
"  Possible C/C++ prototypes are:\n"
"    cyclone::Buoyancy::Buoyancy(cyclone::Vector3 const &,cyclone::real,cyclone::real,cyclone::real,cyclone::real)\n"
"    cyclone::Buoyancy::Buoyancy(cyclone::Vector3 const &,cyclone::real,cyclone::real,cyclone::real)\n");
return 0;
}


SWIGINTERN PyObject *_wrap_Buoyancy_updateForce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Buoyancy *arg1 = (cyclone::Buoyancy *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::real arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
double val3;
int ecode3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "Buoyancy_updateForce", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Buoyancy, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Buoyancy_updateForce" "', argument " "1"" of type '" "cyclone::Buoyancy *""'");
}
arg1 = reinterpret_cast< cyclone::Buoyancy * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Buoyancy_updateForce" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Buoyancy_updateForce" "', argument " "3"" of type '" "cyclone::real""'");
}
arg3 = static_cast< cyclone::real >(val3);
(arg1)->updateForce(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Buoyancy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Buoyancy *arg1 = (cyclone::Buoyancy *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Buoyancy, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Buoyancy" "', argument " "1"" of type '" "cyclone::Buoyancy *""'");
}
arg1 = reinterpret_cast< cyclone::Buoyancy * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Buoyancy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Buoyancy, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Buoyancy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ForceRegistry_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::ForceGenerator *arg3 = (cyclone::ForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ForceRegistry_add", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ForceRegistry_add" "', argument " "1"" of type '" "cyclone::ForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ForceRegistry * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ForceRegistry_add" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__ForceGenerator, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ForceRegistry_add" "', argument " "3"" of type '" "cyclone::ForceGenerator *""'");
}
arg3 = reinterpret_cast< cyclone::ForceGenerator * >(argp3);
(arg1)->add(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ForceRegistry_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::ForceGenerator *arg3 = (cyclone::ForceGenerator *) 0;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
PyObject *swig_obj[3];

if (!SWIG_Python_UnpackTuple(args, "ForceRegistry_remove", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ForceRegistry_remove" "', argument " "1"" of type '" "cyclone::ForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ForceRegistry * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "ForceRegistry_remove" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__ForceGenerator, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "ForceRegistry_remove" "', argument " "3"" of type '" "cyclone::ForceGenerator *""'");
}
arg3 = reinterpret_cast< cyclone::ForceGenerator * >(argp3);
(arg1)->remove(arg2, arg3);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ForceRegistry_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ForceRegistry_clear" "', argument " "1"" of type '" "cyclone::ForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ForceRegistry * >(argp1);
(arg1)->clear();
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_ForceRegistry_updateForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "ForceRegistry_updateForces", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceRegistry, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "ForceRegistry_updateForces" "', argument " "1"" of type '" "cyclone::ForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ForceRegistry * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "ForceRegistry_updateForces" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
(arg1)->updateForces(arg2);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_ForceRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_ForceRegistry", 0, 0, 0)) SWIG_fail;
result = (cyclone::ForceRegistry * )
new cyclone::ForceRegistry();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__ForceRegistry, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ForceRegistry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::ForceRegistry *arg1 = (cyclone::ForceRegistry *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__ForceRegistry, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_ForceRegistry" "', argument " "1"" of type '" "cyclone::ForceRegistry *""'");
}
arg1 = reinterpret_cast< cyclone::ForceRegistry * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *ForceRegistry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__ForceRegistry, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *ForceRegistry_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Joint_body_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
cyclone::RigidBody **arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Joint_body_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_body_set" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Joint_body_set" "', argument " "2"" of type '" "cyclone::RigidBody *[2]""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody ** >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::RigidBody * *) & arg1->body[ii] = *((cyclone::RigidBody **) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""body""' of type '""cyclone::RigidBody *[2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_body_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::RigidBody **result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_body_get" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
result = (cyclone::RigidBody * *)(cyclone::RigidBody * *)((arg1)->body);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_cyclone__RigidBody, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_position_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
cyclone::Vector3 *arg2;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Joint_position_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_position_set" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Joint_position_set" "', argument " "2"" of type '" "cyclone::Vector3 [2]""'");
}
arg2 = reinterpret_cast< cyclone::Vector3 * >(argp2);
{
if (arg2) {
size_t ii = 0;
for (; ii < (size_t) 2; ++ii)
*(cyclone::Vector3 * ) & arg1->position[ii] = *((cyclone::Vector3 *) arg2 + ii);
} else {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in variable '""position""' of type '""cyclone::Vector3 [2]""'");
}
}
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_position_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::Vector3 *result = 0;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_position_get" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
result = (cyclone::Vector3 * )(cyclone::Vector3 * )((arg1)->position);
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Vector3, 0 | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_error_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
cyclone::real arg2;
void *argp1 = 0;
int res1 = 0;
double val2;
int ecode2 = 0;
PyObject *swig_obj[2];

if (!SWIG_Python_UnpackTuple(args, "Joint_error_set", 2, 2, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_error_set" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
if (!SWIG_IsOK(ecode2)) {
SWIG_exception_fail(SWIG_ArgError(ecode2),
"in method '" "Joint_error_set" "', argument " "2"" of type '" "cyclone::real""'");
}
arg2 = static_cast< cyclone::real >(val2);
if (arg1) (arg1)->error = arg2;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_error_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];
cyclone::real result;

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_error_get" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
result = (cyclone::real)((arg1)->error);
resultobj = SWIG_From_double(static_cast< double >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
cyclone::RigidBody *arg2 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg3 = 0;
cyclone::RigidBody *arg4 = (cyclone::RigidBody *) 0;
cyclone::Vector3 *arg5 = 0;
cyclone::real arg6;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
void *argp3 = 0;
int res3 = 0;
void *argp4 = 0;
int res4 = 0;
void *argp5 = 0;
int res5 = 0;
double val6;
int ecode6 = 0;
PyObject *swig_obj[6];

if (!SWIG_Python_UnpackTuple(args, "Joint_init", 6, 6, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_init" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Joint_init" "', argument " "2"" of type '" "cyclone::RigidBody *""'");
}
arg2 = reinterpret_cast< cyclone::RigidBody * >(argp2);
res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res3)) {
SWIG_exception_fail(SWIG_ArgError(res3),
"in method '" "Joint_init" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp3) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Joint_init" "', argument " "3"" of type '" "cyclone::Vector3 const &""'");
}
arg3 = reinterpret_cast< cyclone::Vector3 * >(argp3);
res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_cyclone__RigidBody, 0 | 0);
if (!SWIG_IsOK(res4)) {
SWIG_exception_fail(SWIG_ArgError(res4),
"in method '" "Joint_init" "', argument " "4"" of type '" "cyclone::RigidBody *""'");
}
arg4 = reinterpret_cast< cyclone::RigidBody * >(argp4);
res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_cyclone__Vector3, 0 | 0);
if (!SWIG_IsOK(res5)) {
SWIG_exception_fail(SWIG_ArgError(res5),
"in method '" "Joint_init" "', argument " "5"" of type '" "cyclone::Vector3 const &""'");
}
if (!argp5) {
SWIG_exception_fail(SWIG_ValueError,
"invalid null reference " "in method '" "Joint_init" "', argument " "5"" of type '" "cyclone::Vector3 const &""'");
}
arg5 = reinterpret_cast< cyclone::Vector3 * >(argp5);
ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
if (!SWIG_IsOK(ecode6)) {
SWIG_exception_fail(SWIG_ArgError(ecode6),
"in method '" "Joint_init" "', argument " "6"" of type '" "cyclone::real""'");
}
arg6 = static_cast< cyclone::real >(val6);
(arg1)->init(arg2, (cyclone::Vector3 const &)*arg3, arg4, (cyclone::Vector3 const &)*arg5, arg6);
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_Joint_addContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
cyclone::Contact *arg2 = (cyclone::Contact *) 0;
unsigned int arg3;
void *argp1 = 0;
int res1 = 0;
void *argp2 = 0;
int res2 = 0;
unsigned int val3;
int ecode3 = 0;
PyObject *swig_obj[3];
unsigned int result;

if (!SWIG_Python_UnpackTuple(args, "Joint_addContact", 3, 3, swig_obj)) SWIG_fail;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, 0 | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "Joint_addContact" "', argument " "1"" of type '" "cyclone::Joint const *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_cyclone__Contact, 0 | 0);
if (!SWIG_IsOK(res2)) {
SWIG_exception_fail(SWIG_ArgError(res2),
"in method '" "Joint_addContact" "', argument " "2"" of type '" "cyclone::Contact *""'");
}
arg2 = reinterpret_cast< cyclone::Contact * >(argp2);
ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
if (!SWIG_IsOK(ecode3)) {
SWIG_exception_fail(SWIG_ArgError(ecode3),
"in method '" "Joint_addContact" "', argument " "3"" of type '" "unsigned int""'");
}
arg3 = static_cast< unsigned int >(val3);
result = (unsigned int) ((cyclone::Joint const *) arg1)->addContact(arg2, arg3);
resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_new_Joint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *result = 0;

if (!SWIG_Python_UnpackTuple(args, "new_Joint", 0, 0, 0)) SWIG_fail;
result = (cyclone::Joint * )
new cyclone::Joint();
resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_cyclone__Joint, SWIG_POINTER_NEW | 0);
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Joint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *resultobj = 0;
cyclone::Joint *arg1 = (cyclone::Joint *) 0;
void *argp1 = 0;
int res1 = 0;
PyObject *swig_obj[1];

if (!args) SWIG_fail;
swig_obj[0] = args;
res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_cyclone__Joint, SWIG_POINTER_DISOWN | 0);
if (!SWIG_IsOK(res1)) {
SWIG_exception_fail(SWIG_ArgError(res1),
"in method '" "delete_Joint" "', argument " "1"" of type '" "cyclone::Joint *""'");
}
arg1 = reinterpret_cast< cyclone::Joint * >(argp1);
delete arg1;
resultobj = SWIG_Py_Void();
return resultobj;
fail:
return NULL;
}


SWIGINTERN PyObject *Joint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
PyObject *obj;
if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
SWIG_TypeNewClientData(SWIGTYPE_p_cyclone__Joint, SWIG_NewClientData(obj));
return SWIG_Py_Void();
}

SWIGINTERN PyObject *Joint_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
{
"SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL
},
{
"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL
},
{
"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL
},
{
"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL
},
{
"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL
},
{
"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL
},
{
"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL
},
{
"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL
},
{
"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL
},
{
"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL
},
{
"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL
},
{
"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL
},
{
"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL
},
{
"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL
},
{
"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL
},
{
"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL
},
{
"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL
},
{
"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL
},
{
"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL
},
{
"ParticleVector_iterator", _wrap_ParticleVector_iterator, METH_O, NULL
},
{
"ParticleVector___nonzero__", _wrap_ParticleVector___nonzero__, METH_O, NULL
},
{
"ParticleVector___bool__", _wrap_ParticleVector___bool__, METH_O, NULL
},
{
"ParticleVector___len__", _wrap_ParticleVector___len__, METH_O, NULL
},
{
"ParticleVector___getslice__", _wrap_ParticleVector___getslice__, METH_VARARGS, NULL
},
{
"ParticleVector___setslice__", _wrap_ParticleVector___setslice__, METH_VARARGS, NULL
},
{
"ParticleVector___delslice__", _wrap_ParticleVector___delslice__, METH_VARARGS, NULL
},
{
"ParticleVector___delitem__", _wrap_ParticleVector___delitem__, METH_VARARGS, NULL
},
{
"ParticleVector___getitem__", _wrap_ParticleVector___getitem__, METH_VARARGS, NULL
},
{
"ParticleVector___setitem__", _wrap_ParticleVector___setitem__, METH_VARARGS, NULL
},
{
"ParticleVector_pop", _wrap_ParticleVector_pop, METH_O, NULL
},
{
"ParticleVector_append", _wrap_ParticleVector_append, METH_VARARGS, NULL
},
{
"ParticleVector_empty", _wrap_ParticleVector_empty, METH_O, NULL
},
{
"ParticleVector_size", _wrap_ParticleVector_size, METH_O, NULL
},
{
"ParticleVector_swap", _wrap_ParticleVector_swap, METH_VARARGS, NULL
},
{
"ParticleVector_begin", _wrap_ParticleVector_begin, METH_O, NULL
},
{
"ParticleVector_end", _wrap_ParticleVector_end, METH_O, NULL
},
{
"ParticleVector_rbegin", _wrap_ParticleVector_rbegin, METH_O, NULL
},
{
"ParticleVector_rend", _wrap_ParticleVector_rend, METH_O, NULL
},
{
"ParticleVector_clear", _wrap_ParticleVector_clear, METH_O, NULL
},
{
"ParticleVector_get_allocator", _wrap_ParticleVector_get_allocator, METH_O, NULL
},
{
"ParticleVector_pop_back", _wrap_ParticleVector_pop_back, METH_O, NULL
},
{
"ParticleVector_erase", _wrap_ParticleVector_erase, METH_VARARGS, NULL
},
{
"new_ParticleVector", _wrap_new_ParticleVector, METH_VARARGS, NULL
},
{
"ParticleVector_push_back", _wrap_ParticleVector_push_back, METH_VARARGS, NULL
},
{
"ParticleVector_front", _wrap_ParticleVector_front, METH_O, NULL
},
{
"ParticleVector_back", _wrap_ParticleVector_back, METH_O, NULL
},
{
"ParticleVector_assign", _wrap_ParticleVector_assign, METH_VARARGS, NULL
},
{
"ParticleVector_resize", _wrap_ParticleVector_resize, METH_VARARGS, NULL
},
{
"ParticleVector_insert", _wrap_ParticleVector_insert, METH_VARARGS, NULL
},
{
"ParticleVector_reserve", _wrap_ParticleVector_reserve, METH_VARARGS, NULL
},
{
"ParticleVector_capacity", _wrap_ParticleVector_capacity, METH_O, NULL
},
{
"delete_ParticleVector", _wrap_delete_ParticleVector, METH_O, NULL
},
{
"ParticleVector_swigregister", ParticleVector_swigregister, METH_O, NULL
},
{
"ParticleVector_swiginit", ParticleVector_swiginit, METH_VARARGS, NULL
},
{
"new_intArray", _wrap_new_intArray, METH_O, NULL
},
{
"delete_intArray", _wrap_delete_intArray, METH_O, NULL
},
{
"intArray_getitem", _wrap_intArray_getitem, METH_VARARGS, NULL
},
{
"intArray_setitem", _wrap_intArray_setitem, METH_VARARGS, NULL
},
{
"new_floatArray", _wrap_new_floatArray, METH_O, NULL
},
{
"delete_floatArray", _wrap_delete_floatArray, METH_O, NULL
},
{
"floatArray_getitem", _wrap_floatArray_getitem, METH_VARARGS, NULL
},
{
"floatArray_setitem", _wrap_floatArray_setitem, METH_VARARGS, NULL
},
{
"new_doubleArray", _wrap_new_doubleArray, METH_O, NULL
},
{
"delete_doubleArray", _wrap_delete_doubleArray, METH_O, NULL
},
{
"doubleArray_getitem", _wrap_doubleArray_getitem, METH_VARARGS, NULL
},
{
"doubleArray_setitem", _wrap_doubleArray_setitem, METH_VARARGS, NULL
},
{
"new_realArray", _wrap_new_realArray, METH_O, NULL
},
{
"delete_realArray", _wrap_delete_realArray, METH_O, NULL
},
{
"realArray_getitem", _wrap_realArray_getitem, METH_VARARGS, NULL
},
{
"realArray_setitem", _wrap_realArray_setitem, METH_VARARGS, NULL
},
{
"setSleepEpsilon", _wrap_setSleepEpsilon, METH_O, NULL
},
{
"getSleepEpsilon", _wrap_getSleepEpsilon, METH_NOARGS, NULL
},
{
"Vector3_x_set", _wrap_Vector3_x_set, METH_VARARGS, NULL
},
{
"Vector3_x_get", _wrap_Vector3_x_get, METH_O, NULL
},
{
"Vector3_y_set", _wrap_Vector3_y_set, METH_VARARGS, NULL
},
{
"Vector3_y_get", _wrap_Vector3_y_get, METH_O, NULL
},
{
"Vector3_z_set", _wrap_Vector3_z_set, METH_VARARGS, NULL
},
{
"Vector3_z_get", _wrap_Vector3_z_get, METH_O, NULL
},
{
"new_Vector3", _wrap_new_Vector3, METH_VARARGS, NULL
},
{
"Vector3___iadd__", _wrap_Vector3___iadd__, METH_VARARGS, NULL
},
{
"Vector3___add__", _wrap_Vector3___add__, METH_VARARGS, NULL
},
{
"Vector3___isub__", _wrap_Vector3___isub__, METH_VARARGS, NULL
},
{
"Vector3___sub__", _wrap_Vector3___sub__, METH_VARARGS, NULL
},
{
"Vector3___imul__", _wrap_Vector3___imul__, METH_VARARGS, NULL
},
{
"Vector3_componentProduct", _wrap_Vector3_componentProduct, METH_VARARGS, NULL
},
{
"Vector3_componentProductUpdate", _wrap_Vector3_componentProductUpdate, METH_VARARGS, NULL
},
{
"Vector3_vectorProduct", _wrap_Vector3_vectorProduct, METH_VARARGS, NULL
},
{
"Vector3___imod__", _wrap_Vector3___imod__, METH_VARARGS, NULL
},
{
"Vector3___mod__", _wrap_Vector3___mod__, METH_VARARGS, NULL
},
{
"Vector3_scalarProduct", _wrap_Vector3_scalarProduct, METH_VARARGS, NULL
},
{
"Vector3___mul__", _wrap_Vector3___mul__, METH_VARARGS, NULL
},
{
"Vector3_addScaledVector", _wrap_Vector3_addScaledVector, METH_VARARGS, NULL
},
{
"Vector3_magnitude", _wrap_Vector3_magnitude, METH_O, NULL
},
{
"Vector3_squareMagnitude", _wrap_Vector3_squareMagnitude, METH_O, NULL
},
{
"Vector3_trim", _wrap_Vector3_trim, METH_VARARGS, NULL
},
{
"Vector3_normalise", _wrap_Vector3_normalise, METH_O, NULL
},
{
"Vector3_unit", _wrap_Vector3_unit, METH_O, NULL
},
{
"Vector3___eq__", _wrap_Vector3___eq__, METH_VARARGS, NULL
},
{
"Vector3___ne__", _wrap_Vector3___ne__, METH_VARARGS, NULL
},
{
"Vector3___lt__", _wrap_Vector3___lt__, METH_VARARGS, NULL
},
{
"Vector3___gt__", _wrap_Vector3___gt__, METH_VARARGS, NULL
},
{
"Vector3___le__", _wrap_Vector3___le__, METH_VARARGS, NULL
},
{
"Vector3___ge__", _wrap_Vector3___ge__, METH_VARARGS, NULL
},
{
"Vector3_clear", _wrap_Vector3_clear, METH_O, NULL
},
{
"Vector3_invert", _wrap_Vector3_invert, METH_O, NULL
},
{
"delete_Vector3", _wrap_delete_Vector3, METH_O, NULL
},
{
"Vector3_swigregister", Vector3_swigregister, METH_O, NULL
},
{
"Vector3_swiginit", Vector3_swiginit, METH_VARARGS, NULL
},
{
"Quaternion_r_set", _wrap_Quaternion_r_set, METH_VARARGS, NULL
},
{
"Quaternion_r_get", _wrap_Quaternion_r_get, METH_O, NULL
},
{
"Quaternion_i_set", _wrap_Quaternion_i_set, METH_VARARGS, NULL
},
{
"Quaternion_i_get", _wrap_Quaternion_i_get, METH_O, NULL
},
{
"Quaternion_j_set", _wrap_Quaternion_j_set, METH_VARARGS, NULL
},
{
"Quaternion_j_get", _wrap_Quaternion_j_get, METH_O, NULL
},
{
"Quaternion_k_set", _wrap_Quaternion_k_set, METH_VARARGS, NULL
},
{
"Quaternion_k_get", _wrap_Quaternion_k_get, METH_O, NULL
},
{
"new_Quaternion", _wrap_new_Quaternion, METH_VARARGS, NULL
},
{
"Quaternion_normalise", _wrap_Quaternion_normalise, METH_O, NULL
},
{
"Quaternion___imul__", _wrap_Quaternion___imul__, METH_VARARGS, NULL
},
{
"Quaternion_addScaledVector", _wrap_Quaternion_addScaledVector, METH_VARARGS, NULL
},
{
"Quaternion_rotateByVector", _wrap_Quaternion_rotateByVector, METH_VARARGS, NULL
},
{
"delete_Quaternion", _wrap_delete_Quaternion, METH_O, NULL
},
{
"Quaternion_swigregister", Quaternion_swigregister, METH_O, NULL
},
{
"Quaternion_swiginit", Quaternion_swiginit, METH_VARARGS, NULL
},
{
"Matrix4_data_set", _wrap_Matrix4_data_set, METH_VARARGS, NULL
},
{
"Matrix4_data_get", _wrap_Matrix4_data_get, METH_O, NULL
},
{
"new_Matrix4", _wrap_new_Matrix4, METH_NOARGS, NULL
},
{
"Matrix4_setDiagonal", _wrap_Matrix4_setDiagonal, METH_VARARGS, NULL
},
{
"Matrix4___mul__", _wrap_Matrix4___mul__, METH_VARARGS, NULL
},
{
"Matrix4_transform", _wrap_Matrix4_transform, METH_VARARGS, NULL
},
{
"Matrix4_getDeterminant", _wrap_Matrix4_getDeterminant, METH_O, NULL
},
{
"Matrix4_setInverse", _wrap_Matrix4_setInverse, METH_VARARGS, NULL
},
{
"Matrix4_inverse", _wrap_Matrix4_inverse, METH_O, NULL
},
{
"Matrix4_invert", _wrap_Matrix4_invert, METH_O, NULL
},
{
"Matrix4_transformDirection", _wrap_Matrix4_transformDirection, METH_VARARGS, NULL
},
{
"Matrix4_transformInverseDirection", _wrap_Matrix4_transformInverseDirection, METH_VARARGS, NULL
},
{
"Matrix4_transformInverse", _wrap_Matrix4_transformInverse, METH_VARARGS, NULL
},
{
"Matrix4_getAxisVector", _wrap_Matrix4_getAxisVector, METH_VARARGS, NULL
},
{
"Matrix4_setOrientationAndPos", _wrap_Matrix4_setOrientationAndPos, METH_VARARGS, NULL
},
{
"Matrix4_fillGLArray", _wrap_Matrix4_fillGLArray, METH_VARARGS, NULL
},
{
"delete_Matrix4", _wrap_delete_Matrix4, METH_O, NULL
},
{
"Matrix4_swigregister", Matrix4_swigregister, METH_O, NULL
},
{
"Matrix4_swiginit", Matrix4_swiginit, METH_VARARGS, NULL
},
{
"Matrix3_data_set", _wrap_Matrix3_data_set, METH_VARARGS, NULL
},
{
"Matrix3_data_get", _wrap_Matrix3_data_get, METH_O, NULL
},
{
"new_Matrix3", _wrap_new_Matrix3, METH_VARARGS, NULL
},
{
"Matrix3_setDiagonal", _wrap_Matrix3_setDiagonal, METH_VARARGS, NULL
},
{
"Matrix3_setInertiaTensorCoeffs", _wrap_Matrix3_setInertiaTensorCoeffs, METH_VARARGS, NULL
},
{
"Matrix3_setBlockInertiaTensor", _wrap_Matrix3_setBlockInertiaTensor, METH_VARARGS, NULL
},
{
"Matrix3_setSkewSymmetric", _wrap_Matrix3_setSkewSymmetric, METH_VARARGS, NULL
},
{
"Matrix3_setComponents", _wrap_Matrix3_setComponents, METH_VARARGS, NULL
},
{
"Matrix3_transform", _wrap_Matrix3_transform, METH_VARARGS, NULL
},
{
"Matrix3_transformTranspose", _wrap_Matrix3_transformTranspose, METH_VARARGS, NULL
},
{
"Matrix3_getRowVector", _wrap_Matrix3_getRowVector, METH_VARARGS, NULL
},
{
"Matrix3_getAxisVector", _wrap_Matrix3_getAxisVector, METH_VARARGS, NULL
},
{
"Matrix3_setInverse", _wrap_Matrix3_setInverse, METH_VARARGS, NULL
},
{
"Matrix3_inverse", _wrap_Matrix3_inverse, METH_O, NULL
},
{
"Matrix3_invert", _wrap_Matrix3_invert, METH_O, NULL
},
{
"Matrix3_setTranspose", _wrap_Matrix3_setTranspose, METH_VARARGS, NULL
},
{
"Matrix3_transpose", _wrap_Matrix3_transpose, METH_O, NULL
},
{
"Matrix3___mul__", _wrap_Matrix3___mul__, METH_VARARGS, NULL
},
{
"Matrix3___imul__", _wrap_Matrix3___imul__, METH_VARARGS, NULL
},
{
"Matrix3___iadd__", _wrap_Matrix3___iadd__, METH_VARARGS, NULL
},
{
"Matrix3_setOrientation", _wrap_Matrix3_setOrientation, METH_VARARGS, NULL
},
{
"Matrix3_linearInterpolate", _wrap_Matrix3_linearInterpolate, METH_VARARGS, NULL
},
{
"delete_Matrix3", _wrap_delete_Matrix3, METH_O, NULL
},
{
"Matrix3_swigregister", Matrix3_swigregister, METH_O, NULL
},
{
"Matrix3_swiginit", Matrix3_swiginit, METH_VARARGS, NULL
},
{
"Random_rotl", _wrap_Random_rotl, METH_VARARGS, NULL
},
{
"Random_rotr", _wrap_Random_rotr, METH_VARARGS, NULL
},
{
"new_Random", _wrap_new_Random, METH_VARARGS, NULL
},
{
"Random_seed", _wrap_Random_seed, METH_VARARGS, NULL
},
{
"Random_randomBits", _wrap_Random_randomBits, METH_O, NULL
},
{
"Random_randomReal", _wrap_Random_randomReal, METH_VARARGS, NULL
},
{
"Random_randomInt", _wrap_Random_randomInt, METH_VARARGS, NULL
},
{
"Random_randomBinomial", _wrap_Random_randomBinomial, METH_VARARGS, NULL
},
{
"Random_randomVector", _wrap_Random_randomVector, METH_VARARGS, NULL
},
{
"Random_randomXZVector", _wrap_Random_randomXZVector, METH_VARARGS, NULL
},
{
"Random_randomQuaternion", _wrap_Random_randomQuaternion, METH_O, NULL
},
{
"delete_Random", _wrap_delete_Random, METH_O, NULL
},
{
"Random_swigregister", Random_swigregister, METH_O, NULL
},
{
"Random_swiginit", Random_swiginit, METH_VARARGS, NULL
},
{
"Particle_integrate", _wrap_Particle_integrate, METH_VARARGS, NULL
},
{
"Particle_setMass", _wrap_Particle_setMass, METH_VARARGS, NULL
},
{
"Particle_getMass", _wrap_Particle_getMass, METH_O, NULL
},
{
"Particle_setInverseMass", _wrap_Particle_setInverseMass, METH_VARARGS, NULL
},
{
"Particle_getInverseMass", _wrap_Particle_getInverseMass, METH_O, NULL
},
{
"Particle_hasFiniteMass", _wrap_Particle_hasFiniteMass, METH_O, NULL
},
{
"Particle_setDamping", _wrap_Particle_setDamping, METH_VARARGS, NULL
},
{
"Particle_getDamping", _wrap_Particle_getDamping, METH_O, NULL
},
{
"Particle_setPosition", _wrap_Particle_setPosition, METH_VARARGS, NULL
},
{
"Particle_getPosition", _wrap_Particle_getPosition, METH_VARARGS, NULL
},
{
"Particle_setVelocity", _wrap_Particle_setVelocity, METH_VARARGS, NULL
},
{
"Particle_getVelocity", _wrap_Particle_getVelocity, METH_VARARGS, NULL
},
{
"Particle_setAcceleration", _wrap_Particle_setAcceleration, METH_VARARGS, NULL
},
{
"Particle_getAcceleration", _wrap_Particle_getAcceleration, METH_VARARGS, NULL
},
{
"Particle_clearAccumulator", _wrap_Particle_clearAccumulator, METH_O, NULL
},
{
"Particle_addForce", _wrap_Particle_addForce, METH_VARARGS, NULL
},
{
"new_Particle", _wrap_new_Particle, METH_NOARGS, NULL
},
{
"delete_Particle", _wrap_delete_Particle, METH_O, NULL
},
{
"Particle_swigregister", Particle_swigregister, METH_O, NULL
},
{
"Particle_swiginit", Particle_swiginit, METH_VARARGS, NULL
},
{
"RigidBody_calculateDerivedData", _wrap_RigidBody_calculateDerivedData, METH_O, NULL
},
{
"RigidBody_integrate", _wrap_RigidBody_integrate, METH_VARARGS, NULL
},
{
"RigidBody_setMass", _wrap_RigidBody_setMass, METH_VARARGS, NULL
},
{
"RigidBody_getMass", _wrap_RigidBody_getMass, METH_O, NULL
},
{
"RigidBody_setInverseMass", _wrap_RigidBody_setInverseMass, METH_VARARGS, NULL
},
{
"RigidBody_getInverseMass", _wrap_RigidBody_getInverseMass, METH_O, NULL
},
{
"RigidBody_hasFiniteMass", _wrap_RigidBody_hasFiniteMass, METH_O, NULL
},
{
"RigidBody_setInertiaTensor", _wrap_RigidBody_setInertiaTensor, METH_VARARGS, NULL
},
{
"RigidBody_getInertiaTensor", _wrap_RigidBody_getInertiaTensor, METH_VARARGS, NULL
},
{
"RigidBody_getInertiaTensorWorld", _wrap_RigidBody_getInertiaTensorWorld, METH_VARARGS, NULL
},
{
"RigidBody_setInverseInertiaTensor", _wrap_RigidBody_setInverseInertiaTensor, METH_VARARGS, NULL
},
{
"RigidBody_getInverseInertiaTensor", _wrap_RigidBody_getInverseInertiaTensor, METH_VARARGS, NULL
},
{
"RigidBody_getInverseInertiaTensorWorld", _wrap_RigidBody_getInverseInertiaTensorWorld, METH_VARARGS, NULL
},
{
"RigidBody_setDamping", _wrap_RigidBody_setDamping, METH_VARARGS, NULL
},
{
"RigidBody_setLinearDamping", _wrap_RigidBody_setLinearDamping, METH_VARARGS, NULL
},
{
"RigidBody_getLinearDamping", _wrap_RigidBody_getLinearDamping, METH_O, NULL
},
{
"RigidBody_setAngularDamping", _wrap_RigidBody_setAngularDamping, METH_VARARGS, NULL
},
{
"RigidBody_getAngularDamping", _wrap_RigidBody_getAngularDamping, METH_O, NULL
},
{
"RigidBody_setPosition", _wrap_RigidBody_setPosition, METH_VARARGS, NULL
},
{
"RigidBody_getPosition", _wrap_RigidBody_getPosition, METH_VARARGS, NULL
},
{
"RigidBody_setOrientation", _wrap_RigidBody_setOrientation, METH_VARARGS, NULL
},
{
"RigidBody_getOrientation", _wrap_RigidBody_getOrientation, METH_VARARGS, NULL
},
{
"RigidBody_getGLTransform", _wrap_RigidBody_getGLTransform, METH_VARARGS, NULL
},
{
"RigidBody_getTransform", _wrap_RigidBody_getTransform, METH_VARARGS, NULL
},
{
"RigidBody_getPointInLocalSpace", _wrap_RigidBody_getPointInLocalSpace, METH_VARARGS, NULL
},
{
"RigidBody_getPointInWorldSpace", _wrap_RigidBody_getPointInWorldSpace, METH_VARARGS, NULL
},
{
"RigidBody_getDirectionInLocalSpace", _wrap_RigidBody_getDirectionInLocalSpace, METH_VARARGS, NULL
},
{
"RigidBody_getDirectionInWorldSpace", _wrap_RigidBody_getDirectionInWorldSpace, METH_VARARGS, NULL
},
{
"RigidBody_setVelocity", _wrap_RigidBody_setVelocity, METH_VARARGS, NULL
},
{
"RigidBody_getVelocity", _wrap_RigidBody_getVelocity, METH_VARARGS, NULL
},
{
"RigidBody_addVelocity", _wrap_RigidBody_addVelocity, METH_VARARGS, NULL
},
{
"RigidBody_setRotation", _wrap_RigidBody_setRotation, METH_VARARGS, NULL
},
{
"RigidBody_getRotation", _wrap_RigidBody_getRotation, METH_VARARGS, NULL
},
{
"RigidBody_addRotation", _wrap_RigidBody_addRotation, METH_VARARGS, NULL
},
{
"RigidBody_getAwake", _wrap_RigidBody_getAwake, METH_O, NULL
},
{
"RigidBody_setAwake", _wrap_RigidBody_setAwake, METH_VARARGS, NULL
},
{
"RigidBody_getCanSleep", _wrap_RigidBody_getCanSleep, METH_O, NULL
},
{
"RigidBody_setCanSleep", _wrap_RigidBody_setCanSleep, METH_VARARGS, NULL
},
{
"RigidBody_getLastFrameAcceleration", _wrap_RigidBody_getLastFrameAcceleration, METH_VARARGS, NULL
},
{
"RigidBody_clearAccumulators", _wrap_RigidBody_clearAccumulators, METH_O, NULL
},
{
"RigidBody_addForce", _wrap_RigidBody_addForce, METH_VARARGS, NULL
},
{
"RigidBody_addForceAtPoint", _wrap_RigidBody_addForceAtPoint, METH_VARARGS, NULL
},
{
"RigidBody_addForceAtBodyPoint", _wrap_RigidBody_addForceAtBodyPoint, METH_VARARGS, NULL
},
{
"RigidBody_addTorque", _wrap_RigidBody_addTorque, METH_VARARGS, NULL
},
{
"RigidBody_setAcceleration", _wrap_RigidBody_setAcceleration, METH_VARARGS, NULL
},
{
"RigidBody_getAcceleration", _wrap_RigidBody_getAcceleration, METH_VARARGS, NULL
},
{
"new_RigidBody", _wrap_new_RigidBody, METH_NOARGS, NULL
},
{
"delete_RigidBody", _wrap_delete_RigidBody, METH_O, NULL
},
{
"RigidBody_swigregister", RigidBody_swigregister, METH_O, NULL
},
{
"RigidBody_swiginit", RigidBody_swiginit, METH_VARARGS, NULL
},
{
"ParticleContact_particle_set", _wrap_ParticleContact_particle_set, METH_VARARGS, NULL
},
{
"ParticleContact_particle_get", _wrap_ParticleContact_particle_get, METH_O, NULL
},
{
"ParticleContact_restitution_set", _wrap_ParticleContact_restitution_set, METH_VARARGS, NULL
},
{
"ParticleContact_restitution_get", _wrap_ParticleContact_restitution_get, METH_O, NULL
},
{
"ParticleContact_contactNormal_set", _wrap_ParticleContact_contactNormal_set, METH_VARARGS, NULL
},
{
"ParticleContact_contactNormal_get", _wrap_ParticleContact_contactNormal_get, METH_O, NULL
},
{
"ParticleContact_penetration_set", _wrap_ParticleContact_penetration_set, METH_VARARGS, NULL
},
{
"ParticleContact_penetration_get", _wrap_ParticleContact_penetration_get, METH_O, NULL
},
{
"ParticleContact_particleMovement_set", _wrap_ParticleContact_particleMovement_set, METH_VARARGS, NULL
},
{
"ParticleContact_particleMovement_get", _wrap_ParticleContact_particleMovement_get, METH_O, NULL
},
{
"new_ParticleContact", _wrap_new_ParticleContact, METH_NOARGS, NULL
},
{
"delete_ParticleContact", _wrap_delete_ParticleContact, METH_O, NULL
},
{
"ParticleContact_swigregister", ParticleContact_swigregister, METH_O, NULL
},
{
"ParticleContact_swiginit", ParticleContact_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleContactResolver", _wrap_new_ParticleContactResolver, METH_O, NULL
},
{
"ParticleContactResolver_setIterations", _wrap_ParticleContactResolver_setIterations, METH_VARARGS, NULL
},
{
"ParticleContactResolver_resolveContacts", _wrap_ParticleContactResolver_resolveContacts, METH_VARARGS, NULL
},
{
"delete_ParticleContactResolver", _wrap_delete_ParticleContactResolver, METH_O, NULL
},
{
"ParticleContactResolver_swigregister", ParticleContactResolver_swigregister, METH_O, NULL
},
{
"ParticleContactResolver_swiginit", ParticleContactResolver_swiginit, METH_VARARGS, NULL
},
{
"delete_ParticleContactGenerator", _wrap_delete_ParticleContactGenerator, METH_O, NULL
},
{
"ParticleContactGenerator_addContact", _wrap_ParticleContactGenerator_addContact, METH_VARARGS, NULL
},
{
"new_ParticleContactGenerator", _wrap_new_ParticleContactGenerator, METH_O, NULL
},
{
"disown_ParticleContactGenerator", _wrap_disown_ParticleContactGenerator, METH_O, NULL
},
{
"ParticleContactGenerator_swigregister", ParticleContactGenerator_swigregister, METH_O, NULL
},
{
"ParticleContactGenerator_swiginit", ParticleContactGenerator_swiginit, METH_VARARGS, NULL
},
{
"ParticleLink_particle_set", _wrap_ParticleLink_particle_set, METH_VARARGS, NULL
},
{
"ParticleLink_particle_get", _wrap_ParticleLink_particle_get, METH_O, NULL
},
{
"ParticleLink_addContact", _wrap_ParticleLink_addContact, METH_VARARGS, NULL
},
{
"ParticleLink_setParticle0", _wrap_ParticleLink_setParticle0, METH_VARARGS, NULL
},
{
"ParticleLink_setParticle1", _wrap_ParticleLink_setParticle1, METH_VARARGS, NULL
},
{
"ParticleLink_getParticle0", _wrap_ParticleLink_getParticle0, METH_O, NULL
},
{
"ParticleLink_getParticle1", _wrap_ParticleLink_getParticle1, METH_O, NULL
},
{
"new_ParticleLink", _wrap_new_ParticleLink, METH_NOARGS, NULL
},
{
"delete_ParticleLink", _wrap_delete_ParticleLink, METH_O, NULL
},
{
"ParticleLink_swigregister", ParticleLink_swigregister, METH_O, NULL
},
{
"ParticleLink_swiginit", ParticleLink_swiginit, METH_VARARGS, NULL
},
{
"ParticleCable_maxLength_set", _wrap_ParticleCable_maxLength_set, METH_VARARGS, NULL
},
{
"ParticleCable_maxLength_get", _wrap_ParticleCable_maxLength_get, METH_O, NULL
},
{
"ParticleCable_restitution_set", _wrap_ParticleCable_restitution_set, METH_VARARGS, NULL
},
{
"ParticleCable_restitution_get", _wrap_ParticleCable_restitution_get, METH_O, NULL
},
{
"ParticleCable_addContact", _wrap_ParticleCable_addContact, METH_VARARGS, NULL
},
{
"new_ParticleCable", _wrap_new_ParticleCable, METH_NOARGS, NULL
},
{
"delete_ParticleCable", _wrap_delete_ParticleCable, METH_O, NULL
},
{
"ParticleCable_swigregister", ParticleCable_swigregister, METH_O, NULL
},
{
"ParticleCable_swiginit", ParticleCable_swiginit, METH_VARARGS, NULL
},
{
"ParticleRod_length_set", _wrap_ParticleRod_length_set, METH_VARARGS, NULL
},
{
"ParticleRod_length_get", _wrap_ParticleRod_length_get, METH_O, NULL
},
{
"ParticleRod_addContact", _wrap_ParticleRod_addContact, METH_VARARGS, NULL
},
{
"new_ParticleRod", _wrap_new_ParticleRod, METH_NOARGS, NULL
},
{
"delete_ParticleRod", _wrap_delete_ParticleRod, METH_O, NULL
},
{
"ParticleRod_swigregister", ParticleRod_swigregister, METH_O, NULL
},
{
"ParticleRod_swiginit", ParticleRod_swiginit, METH_VARARGS, NULL
},
{
"ParticleConstraint_particle_set", _wrap_ParticleConstraint_particle_set, METH_VARARGS, NULL
},
{
"ParticleConstraint_particle_get", _wrap_ParticleConstraint_particle_get, METH_O, NULL
},
{
"ParticleConstraint_anchor_set", _wrap_ParticleConstraint_anchor_set, METH_VARARGS, NULL
},
{
"ParticleConstraint_anchor_get", _wrap_ParticleConstraint_anchor_get, METH_O, NULL
},
{
"ParticleConstraint_addContact", _wrap_ParticleConstraint_addContact, METH_VARARGS, NULL
},
{
"delete_ParticleConstraint", _wrap_delete_ParticleConstraint, METH_O, NULL
},
{
"ParticleConstraint_swigregister", ParticleConstraint_swigregister, METH_O, NULL
},
{
"ParticleCableConstraint_maxLength_set", _wrap_ParticleCableConstraint_maxLength_set, METH_VARARGS, NULL
},
{
"ParticleCableConstraint_maxLength_get", _wrap_ParticleCableConstraint_maxLength_get, METH_O, NULL
},
{
"ParticleCableConstraint_restitution_set", _wrap_ParticleCableConstraint_restitution_set, METH_VARARGS, NULL
},
{
"ParticleCableConstraint_restitution_get", _wrap_ParticleCableConstraint_restitution_get, METH_O, NULL
},
{
"ParticleCableConstraint_addContact", _wrap_ParticleCableConstraint_addContact, METH_VARARGS, NULL
},
{
"new_ParticleCableConstraint", _wrap_new_ParticleCableConstraint, METH_NOARGS, NULL
},
{
"delete_ParticleCableConstraint", _wrap_delete_ParticleCableConstraint, METH_O, NULL
},
{
"ParticleCableConstraint_swigregister", ParticleCableConstraint_swigregister, METH_O, NULL
},
{
"ParticleCableConstraint_swiginit", ParticleCableConstraint_swiginit, METH_VARARGS, NULL
},
{
"ParticleRodConstraint_length_set", _wrap_ParticleRodConstraint_length_set, METH_VARARGS, NULL
},
{
"ParticleRodConstraint_length_get", _wrap_ParticleRodConstraint_length_get, METH_O, NULL
},
{
"ParticleRodConstraint_addContact", _wrap_ParticleRodConstraint_addContact, METH_VARARGS, NULL
},
{
"new_ParticleRodConstraint", _wrap_new_ParticleRodConstraint, METH_NOARGS, NULL
},
{
"delete_ParticleRodConstraint", _wrap_delete_ParticleRodConstraint, METH_O, NULL
},
{
"ParticleRodConstraint_swigregister", ParticleRodConstraint_swigregister, METH_O, NULL
},
{
"ParticleRodConstraint_swiginit", ParticleRodConstraint_swiginit, METH_VARARGS, NULL
},
{
"delete_ParticleForceGenerator", _wrap_delete_ParticleForceGenerator, METH_O, NULL
},
{
"ParticleForceGenerator_updateForce", _wrap_ParticleForceGenerator_updateForce, METH_VARARGS, NULL
},
{
"new_ParticleForceGenerator", _wrap_new_ParticleForceGenerator, METH_O, NULL
},
{
"disown_ParticleForceGenerator", _wrap_disown_ParticleForceGenerator, METH_O, NULL
},
{
"ParticleForceGenerator_swigregister", ParticleForceGenerator_swigregister, METH_O, NULL
},
{
"ParticleForceGenerator_swiginit", ParticleForceGenerator_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleGravity", _wrap_new_ParticleGravity, METH_O, NULL
},
{
"ParticleGravity_updateForce", _wrap_ParticleGravity_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleGravity", _wrap_delete_ParticleGravity, METH_O, NULL
},
{
"ParticleGravity_swigregister", ParticleGravity_swigregister, METH_O, NULL
},
{
"ParticleGravity_swiginit", ParticleGravity_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleDrag", _wrap_new_ParticleDrag, METH_VARARGS, NULL
},
{
"ParticleDrag_updateForce", _wrap_ParticleDrag_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleDrag", _wrap_delete_ParticleDrag, METH_O, NULL
},
{
"ParticleDrag_swigregister", ParticleDrag_swigregister, METH_O, NULL
},
{
"ParticleDrag_swiginit", ParticleDrag_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleAnchoredSpring", _wrap_new_ParticleAnchoredSpring, METH_VARARGS, NULL
},
{
"ParticleAnchoredSpring_getAnchor", _wrap_ParticleAnchoredSpring_getAnchor, METH_O, NULL
},
{
"ParticleAnchoredSpring_init", _wrap_ParticleAnchoredSpring_init, METH_VARARGS, NULL
},
{
"ParticleAnchoredSpring_updateForce", _wrap_ParticleAnchoredSpring_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleAnchoredSpring", _wrap_delete_ParticleAnchoredSpring, METH_O, NULL
},
{
"ParticleAnchoredSpring_swigregister", ParticleAnchoredSpring_swigregister, METH_O, NULL
},
{
"ParticleAnchoredSpring_swiginit", ParticleAnchoredSpring_swiginit, METH_VARARGS, NULL
},
{
"ParticleAnchoredBungee_updateForce", _wrap_ParticleAnchoredBungee_updateForce, METH_VARARGS, NULL
},
{
"new_ParticleAnchoredBungee", _wrap_new_ParticleAnchoredBungee, METH_NOARGS, NULL
},
{
"delete_ParticleAnchoredBungee", _wrap_delete_ParticleAnchoredBungee, METH_O, NULL
},
{
"ParticleAnchoredBungee_swigregister", ParticleAnchoredBungee_swigregister, METH_O, NULL
},
{
"ParticleAnchoredBungee_swiginit", ParticleAnchoredBungee_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleFakeSpring", _wrap_new_ParticleFakeSpring, METH_VARARGS, NULL
},
{
"ParticleFakeSpring_updateForce", _wrap_ParticleFakeSpring_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleFakeSpring", _wrap_delete_ParticleFakeSpring, METH_O, NULL
},
{
"ParticleFakeSpring_swigregister", ParticleFakeSpring_swigregister, METH_O, NULL
},
{
"ParticleFakeSpring_swiginit", ParticleFakeSpring_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleSpring", _wrap_new_ParticleSpring, METH_VARARGS, NULL
},
{
"ParticleSpring_updateForce", _wrap_ParticleSpring_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleSpring", _wrap_delete_ParticleSpring, METH_O, NULL
},
{
"ParticleSpring_swigregister", ParticleSpring_swigregister, METH_O, NULL
},
{
"ParticleSpring_swiginit", ParticleSpring_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleBungee", _wrap_new_ParticleBungee, METH_VARARGS, NULL
},
{
"ParticleBungee_updateForce", _wrap_ParticleBungee_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleBungee", _wrap_delete_ParticleBungee, METH_O, NULL
},
{
"ParticleBungee_swigregister", ParticleBungee_swigregister, METH_O, NULL
},
{
"ParticleBungee_swiginit", ParticleBungee_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleBuoyancy", _wrap_new_ParticleBuoyancy, METH_VARARGS, NULL
},
{
"ParticleBuoyancy_updateForce", _wrap_ParticleBuoyancy_updateForce, METH_VARARGS, NULL
},
{
"delete_ParticleBuoyancy", _wrap_delete_ParticleBuoyancy, METH_O, NULL
},
{
"ParticleBuoyancy_swigregister", ParticleBuoyancy_swigregister, METH_O, NULL
},
{
"ParticleBuoyancy_swiginit", ParticleBuoyancy_swiginit, METH_VARARGS, NULL
},
{
"ParticleForceRegistry_add", _wrap_ParticleForceRegistry_add, METH_VARARGS, NULL
},
{
"ParticleForceRegistry_remove", _wrap_ParticleForceRegistry_remove, METH_VARARGS, NULL
},
{
"ParticleForceRegistry_clear", _wrap_ParticleForceRegistry_clear, METH_O, NULL
},
{
"ParticleForceRegistry_updateForces", _wrap_ParticleForceRegistry_updateForces, METH_VARARGS, NULL
},
{
"new_ParticleForceRegistry", _wrap_new_ParticleForceRegistry, METH_NOARGS, NULL
},
{
"delete_ParticleForceRegistry", _wrap_delete_ParticleForceRegistry, METH_O, NULL
},
{
"ParticleForceRegistry_swigregister", ParticleForceRegistry_swigregister, METH_O, NULL
},
{
"ParticleForceRegistry_swiginit", ParticleForceRegistry_swiginit, METH_VARARGS, NULL
},
{
"new_ParticleWorld", _wrap_new_ParticleWorld, METH_VARARGS, NULL
},
{
"delete_ParticleWorld", _wrap_delete_ParticleWorld, METH_O, NULL
},
{
"ParticleWorld_generateContacts", _wrap_ParticleWorld_generateContacts, METH_O, NULL
},
{
"ParticleWorld_integrate", _wrap_ParticleWorld_integrate, METH_VARARGS, NULL
},
{
"ParticleWorld_runPhysics", _wrap_ParticleWorld_runPhysics, METH_VARARGS, NULL
},
{
"ParticleWorld_startFrame", _wrap_ParticleWorld_startFrame, METH_O, NULL
},
{
"ParticleWorld_getParticles", _wrap_ParticleWorld_getParticles, METH_O, NULL
},
{
"ParticleWorld_getContactGenerators", _wrap_ParticleWorld_getContactGenerators, METH_O, NULL
},
{
"ParticleWorld_getForceRegistry", _wrap_ParticleWorld_getForceRegistry, METH_O, NULL
},
{
"ParticleWorld_appendContactGenerator", _wrap_ParticleWorld_appendContactGenerator, METH_VARARGS, NULL
},
{
"ParticleWorld_appendParticles", _wrap_ParticleWorld_appendParticles, METH_VARARGS, NULL
},
{
"ParticleWorld_swigregister", ParticleWorld_swigregister, METH_O, NULL
},
{
"ParticleWorld_swiginit", ParticleWorld_swiginit, METH_VARARGS, NULL
},
{
"GroundContacts_init", _wrap_GroundContacts_init, METH_VARARGS, NULL
},
{
"GroundContacts_addContact", _wrap_GroundContacts_addContact, METH_VARARGS, NULL
},
{
"new_GroundContacts", _wrap_new_GroundContacts, METH_NOARGS, NULL
},
{
"delete_GroundContacts", _wrap_delete_GroundContacts, METH_O, NULL
},
{
"GroundContacts_swigregister", GroundContacts_swigregister, METH_O, NULL
},
{
"GroundContacts_swiginit", GroundContacts_swiginit, METH_VARARGS, NULL
},
{
"CollisionPrimitive_body_set", _wrap_CollisionPrimitive_body_set, METH_VARARGS, NULL
},
{
"CollisionPrimitive_body_get", _wrap_CollisionPrimitive_body_get, METH_O, NULL
},
{
"CollisionPrimitive_offset_set", _wrap_CollisionPrimitive_offset_set, METH_VARARGS, NULL
},
{
"CollisionPrimitive_offset_get", _wrap_CollisionPrimitive_offset_get, METH_O, NULL
},
{
"CollisionPrimitive_calculateInternals", _wrap_CollisionPrimitive_calculateInternals, METH_O, NULL
},
{
"CollisionPrimitive_getAxis", _wrap_CollisionPrimitive_getAxis, METH_VARARGS, NULL
},
{
"CollisionPrimitive_getTransform", _wrap_CollisionPrimitive_getTransform, METH_O, NULL
},
{
"new_CollisionPrimitive", _wrap_new_CollisionPrimitive, METH_NOARGS, NULL
},
{
"delete_CollisionPrimitive", _wrap_delete_CollisionPrimitive, METH_O, NULL
},
{
"CollisionPrimitive_swigregister", CollisionPrimitive_swigregister, METH_O, NULL
},
{
"CollisionPrimitive_swiginit", CollisionPrimitive_swiginit, METH_VARARGS, NULL
},
{
"CollisionSphere_radius_set", _wrap_CollisionSphere_radius_set, METH_VARARGS, NULL
},
{
"CollisionSphere_radius_get", _wrap_CollisionSphere_radius_get, METH_O, NULL
},
{
"new_CollisionSphere", _wrap_new_CollisionSphere, METH_NOARGS, NULL
},
{
"delete_CollisionSphere", _wrap_delete_CollisionSphere, METH_O, NULL
},
{
"CollisionSphere_swigregister", CollisionSphere_swigregister, METH_O, NULL
},
{
"CollisionSphere_swiginit", CollisionSphere_swiginit, METH_VARARGS, NULL
},
{
"CollisionPlane_direction_set", _wrap_CollisionPlane_direction_set, METH_VARARGS, NULL
},
{
"CollisionPlane_direction_get", _wrap_CollisionPlane_direction_get, METH_O, NULL
},
{
"CollisionPlane_offset_set", _wrap_CollisionPlane_offset_set, METH_VARARGS, NULL
},
{
"CollisionPlane_offset_get", _wrap_CollisionPlane_offset_get, METH_O, NULL
},
{
"new_CollisionPlane", _wrap_new_CollisionPlane, METH_NOARGS, NULL
},
{
"delete_CollisionPlane", _wrap_delete_CollisionPlane, METH_O, NULL
},
{
"CollisionPlane_swigregister", CollisionPlane_swigregister, METH_O, NULL
},
{
"CollisionPlane_swiginit", CollisionPlane_swiginit, METH_VARARGS, NULL
},
{
"CollisionBox_halfSize_set", _wrap_CollisionBox_halfSize_set, METH_VARARGS, NULL
},
{
"CollisionBox_halfSize_get", _wrap_CollisionBox_halfSize_get, METH_O, NULL
},
{
"new_CollisionBox", _wrap_new_CollisionBox, METH_NOARGS, NULL
},
{
"delete_CollisionBox", _wrap_delete_CollisionBox, METH_O, NULL
},
{
"CollisionBox_swigregister", CollisionBox_swigregister, METH_O, NULL
},
{
"CollisionBox_swiginit", CollisionBox_swiginit, METH_VARARGS, NULL
},
{
"IntersectionTests_sphereAndHalfSpace", _wrap_IntersectionTests_sphereAndHalfSpace, METH_VARARGS, NULL
},
{
"IntersectionTests_sphereAndSphere", _wrap_IntersectionTests_sphereAndSphere, METH_VARARGS, NULL
},
{
"IntersectionTests_boxAndBox", _wrap_IntersectionTests_boxAndBox, METH_VARARGS, NULL
},
{
"IntersectionTests_boxAndHalfSpace", _wrap_IntersectionTests_boxAndHalfSpace, METH_VARARGS, NULL
},
{
"new_IntersectionTests", _wrap_new_IntersectionTests, METH_NOARGS, NULL
},
{
"delete_IntersectionTests", _wrap_delete_IntersectionTests, METH_O, NULL
},
{
"IntersectionTests_swigregister", IntersectionTests_swigregister, METH_O, NULL
},
{
"IntersectionTests_swiginit", IntersectionTests_swiginit, METH_VARARGS, NULL
},
{
"CollisionData_contactArray_set", _wrap_CollisionData_contactArray_set, METH_VARARGS, NULL
},
{
"CollisionData_contactArray_get", _wrap_CollisionData_contactArray_get, METH_O, NULL
},
{
"CollisionData_contacts_set", _wrap_CollisionData_contacts_set, METH_VARARGS, NULL
},
{
"CollisionData_contacts_get", _wrap_CollisionData_contacts_get, METH_O, NULL
},
{
"CollisionData_contactsLeft_set", _wrap_CollisionData_contactsLeft_set, METH_VARARGS, NULL
},
{
"CollisionData_contactsLeft_get", _wrap_CollisionData_contactsLeft_get, METH_O, NULL
},
{
"CollisionData_contactCount_set", _wrap_CollisionData_contactCount_set, METH_VARARGS, NULL
},
{
"CollisionData_contactCount_get", _wrap_CollisionData_contactCount_get, METH_O, NULL
},
{
"CollisionData_friction_set", _wrap_CollisionData_friction_set, METH_VARARGS, NULL
},
{
"CollisionData_friction_get", _wrap_CollisionData_friction_get, METH_O, NULL
},
{
"CollisionData_restitution_set", _wrap_CollisionData_restitution_set, METH_VARARGS, NULL
},
{
"CollisionData_restitution_get", _wrap_CollisionData_restitution_get, METH_O, NULL
},
{
"CollisionData_tolerance_set", _wrap_CollisionData_tolerance_set, METH_VARARGS, NULL
},
{
"CollisionData_tolerance_get", _wrap_CollisionData_tolerance_get, METH_O, NULL
},
{
"CollisionData_hasMoreContacts", _wrap_CollisionData_hasMoreContacts, METH_O, NULL
},
{
"CollisionData_reset", _wrap_CollisionData_reset, METH_VARARGS, NULL
},
{
"CollisionData_addContacts", _wrap_CollisionData_addContacts, METH_VARARGS, NULL
},
{
"new_CollisionData", _wrap_new_CollisionData, METH_NOARGS, NULL
},
{
"delete_CollisionData", _wrap_delete_CollisionData, METH_O, NULL
},
{
"CollisionData_swigregister", CollisionData_swigregister, METH_O, NULL
},
{
"CollisionData_swiginit", CollisionData_swiginit, METH_VARARGS, NULL
},
{
"new_CollisionDataEx", _wrap_new_CollisionDataEx, METH_O, NULL
},
{
"CollisionDataEx_resolve", _wrap_CollisionDataEx_resolve, METH_VARARGS, NULL
},
{
"delete_CollisionDataEx", _wrap_delete_CollisionDataEx, METH_O, NULL
},
{
"CollisionDataEx_swigregister", CollisionDataEx_swigregister, METH_O, NULL
},
{
"CollisionDataEx_swiginit", CollisionDataEx_swiginit, METH_VARARGS, NULL
},
{
"CollisionDetector_sphereAndHalfSpace", _wrap_CollisionDetector_sphereAndHalfSpace, METH_VARARGS, NULL
},
{
"CollisionDetector_sphereAndTruePlane", _wrap_CollisionDetector_sphereAndTruePlane, METH_VARARGS, NULL
},
{
"CollisionDetector_sphereAndSphere", _wrap_CollisionDetector_sphereAndSphere, METH_VARARGS, NULL
},
{
"CollisionDetector_boxAndHalfSpace", _wrap_CollisionDetector_boxAndHalfSpace, METH_VARARGS, NULL
},
{
"CollisionDetector_boxAndBox", _wrap_CollisionDetector_boxAndBox, METH_VARARGS, NULL
},
{
"CollisionDetector_boxAndPoint", _wrap_CollisionDetector_boxAndPoint, METH_VARARGS, NULL
},
{
"CollisionDetector_boxAndSphere", _wrap_CollisionDetector_boxAndSphere, METH_VARARGS, NULL
},
{
"new_CollisionDetector", _wrap_new_CollisionDetector, METH_NOARGS, NULL
},
{
"delete_CollisionDetector", _wrap_delete_CollisionDetector, METH_O, NULL
},
{
"CollisionDetector_swigregister", CollisionDetector_swigregister, METH_O, NULL
},
{
"CollisionDetector_swiginit", CollisionDetector_swiginit, METH_VARARGS, NULL
},
{
"Contact_body_set", _wrap_Contact_body_set, METH_VARARGS, NULL
},
{
"Contact_body_get", _wrap_Contact_body_get, METH_O, NULL
},
{
"Contact_friction_set", _wrap_Contact_friction_set, METH_VARARGS, NULL
},
{
"Contact_friction_get", _wrap_Contact_friction_get, METH_O, NULL
},
{
"Contact_restitution_set", _wrap_Contact_restitution_set, METH_VARARGS, NULL
},
{
"Contact_restitution_get", _wrap_Contact_restitution_get, METH_O, NULL
},
{
"Contact_contactPoint_set", _wrap_Contact_contactPoint_set, METH_VARARGS, NULL
},
{
"Contact_contactPoint_get", _wrap_Contact_contactPoint_get, METH_O, NULL
},
{
"Contact_contactNormal_set", _wrap_Contact_contactNormal_set, METH_VARARGS, NULL
},
{
"Contact_contactNormal_get", _wrap_Contact_contactNormal_get, METH_O, NULL
},
{
"Contact_penetration_set", _wrap_Contact_penetration_set, METH_VARARGS, NULL
},
{
"Contact_penetration_get", _wrap_Contact_penetration_get, METH_O, NULL
},
{
"Contact_setBodyData", _wrap_Contact_setBodyData, METH_VARARGS, NULL
},
{
"new_Contact", _wrap_new_Contact, METH_NOARGS, NULL
},
{
"delete_Contact", _wrap_delete_Contact, METH_O, NULL
},
{
"Contact_swigregister", Contact_swigregister, METH_O, NULL
},
{
"Contact_swiginit", Contact_swiginit, METH_VARARGS, NULL
},
{
"ContactResolver_velocityIterationsUsed_set", _wrap_ContactResolver_velocityIterationsUsed_set, METH_VARARGS, NULL
},
{
"ContactResolver_velocityIterationsUsed_get", _wrap_ContactResolver_velocityIterationsUsed_get, METH_O, NULL
},
{
"ContactResolver_positionIterationsUsed_set", _wrap_ContactResolver_positionIterationsUsed_set, METH_VARARGS, NULL
},
{
"ContactResolver_positionIterationsUsed_get", _wrap_ContactResolver_positionIterationsUsed_get, METH_O, NULL
},
{
"new_ContactResolver", _wrap_new_ContactResolver, METH_VARARGS, NULL
},
{
"ContactResolver_isValid", _wrap_ContactResolver_isValid, METH_O, NULL
},
{
"ContactResolver_setIterations", _wrap_ContactResolver_setIterations, METH_VARARGS, NULL
},
{
"ContactResolver_setEpsilon", _wrap_ContactResolver_setEpsilon, METH_VARARGS, NULL
},
{
"ContactResolver_resolveContacts", _wrap_ContactResolver_resolveContacts, METH_VARARGS, NULL
},
{
"delete_ContactResolver", _wrap_delete_ContactResolver, METH_O, NULL
},
{
"ContactResolver_swigregister", ContactResolver_swigregister, METH_O, NULL
},
{
"ContactResolver_swiginit", ContactResolver_swiginit, METH_VARARGS, NULL
},
{
"ContactGenerator_addContact", _wrap_ContactGenerator_addContact, METH_VARARGS, NULL
},
{
"delete_ContactGenerator", _wrap_delete_ContactGenerator, METH_O, NULL
},
{
"ContactGenerator_swigregister", ContactGenerator_swigregister, METH_O, NULL
},
{
"delete_ForceGenerator", _wrap_delete_ForceGenerator, METH_O, NULL
},
{
"ForceGenerator_updateForce", _wrap_ForceGenerator_updateForce, METH_VARARGS, NULL
},
{
"new_ForceGenerator", _wrap_new_ForceGenerator, METH_NOARGS, NULL
},
{
"ForceGenerator_swigregister", ForceGenerator_swigregister, METH_O, NULL
},
{
"ForceGenerator_swiginit", ForceGenerator_swiginit, METH_VARARGS, NULL
},
{
"new_Gravity", _wrap_new_Gravity, METH_O, NULL
},
{
"Gravity_updateForce", _wrap_Gravity_updateForce, METH_VARARGS, NULL
},
{
"delete_Gravity", _wrap_delete_Gravity, METH_O, NULL
},
{
"Gravity_swigregister", Gravity_swigregister, METH_O, NULL
},
{
"Gravity_swiginit", Gravity_swiginit, METH_VARARGS, NULL
},
{
"new_Spring", _wrap_new_Spring, METH_VARARGS, NULL
},
{
"Spring_updateForce", _wrap_Spring_updateForce, METH_VARARGS, NULL
},
{
"delete_Spring", _wrap_delete_Spring, METH_O, NULL
},
{
"Spring_swigregister", Spring_swigregister, METH_O, NULL
},
{
"Spring_swiginit", Spring_swiginit, METH_VARARGS, NULL
},
{
"new_Aero", _wrap_new_Aero, METH_VARARGS, NULL
},
{
"Aero_updateForce", _wrap_Aero_updateForce, METH_VARARGS, NULL
},
{
"delete_Aero", _wrap_delete_Aero, METH_O, NULL
},
{
"Aero_swigregister", Aero_swigregister, METH_O, NULL
},
{
"Aero_swiginit", Aero_swiginit, METH_VARARGS, NULL
},
{
"new_AeroEx", _wrap_new_AeroEx, METH_VARARGS, NULL
},
{
"AeroEx_updateWindspeed", _wrap_AeroEx_updateWindspeed, METH_VARARGS, NULL
},
{
"delete_AeroEx", _wrap_delete_AeroEx, METH_O, NULL
},
{
"AeroEx_swigregister", AeroEx_swigregister, METH_O, NULL
},
{
"AeroEx_swiginit", AeroEx_swiginit, METH_VARARGS, NULL
},
{
"new_AeroControl", _wrap_new_AeroControl, METH_VARARGS, NULL
},
{
"AeroControl_setControl", _wrap_AeroControl_setControl, METH_VARARGS, NULL
},
{
"AeroControl_updateForce", _wrap_AeroControl_updateForce, METH_VARARGS, NULL
},
{
"delete_AeroControl", _wrap_delete_AeroControl, METH_O, NULL
},
{
"AeroControl_swigregister", AeroControl_swigregister, METH_O, NULL
},
{
"AeroControl_swiginit", AeroControl_swiginit, METH_VARARGS, NULL
},
{
"new_Buoyancy", _wrap_new_Buoyancy, METH_VARARGS, NULL
},
{
"Buoyancy_updateForce", _wrap_Buoyancy_updateForce, METH_VARARGS, NULL
},
{
"delete_Buoyancy", _wrap_delete_Buoyancy, METH_O, NULL
},
{
"Buoyancy_swigregister", Buoyancy_swigregister, METH_O, NULL
},
{
"Buoyancy_swiginit", Buoyancy_swiginit, METH_VARARGS, NULL
},
{
"ForceRegistry_add", _wrap_ForceRegistry_add, METH_VARARGS, NULL
},
{
"ForceRegistry_remove", _wrap_ForceRegistry_remove, METH_VARARGS, NULL
},
{
"ForceRegistry_clear", _wrap_ForceRegistry_clear, METH_O, NULL
},
{
"ForceRegistry_updateForces", _wrap_ForceRegistry_updateForces, METH_VARARGS, NULL
},
{
"new_ForceRegistry", _wrap_new_ForceRegistry, METH_NOARGS, NULL
},
{
"delete_ForceRegistry", _wrap_delete_ForceRegistry, METH_O, NULL
},
{
"ForceRegistry_swigregister", ForceRegistry_swigregister, METH_O, NULL
},
{
"ForceRegistry_swiginit", ForceRegistry_swiginit, METH_VARARGS, NULL
},
{
"Joint_body_set", _wrap_Joint_body_set, METH_VARARGS, NULL
},
{
"Joint_body_get", _wrap_Joint_body_get, METH_O, NULL
},
{
"Joint_position_set", _wrap_Joint_position_set, METH_VARARGS, NULL
},
{
"Joint_position_get", _wrap_Joint_position_get, METH_O, NULL
},
{
"Joint_error_set", _wrap_Joint_error_set, METH_VARARGS, NULL
},
{
"Joint_error_get", _wrap_Joint_error_get, METH_O, NULL
},
{
"Joint_init", _wrap_Joint_init, METH_VARARGS, NULL
},
{
"Joint_addContact", _wrap_Joint_addContact, METH_VARARGS, NULL
},
{
"new_Joint", _wrap_new_Joint, METH_NOARGS, NULL
},
{
"delete_Joint", _wrap_delete_Joint, METH_O, NULL
},
{
"Joint_swigregister", Joint_swigregister, METH_O, NULL
},
{
"Joint_swiginit", Joint_swiginit, METH_VARARGS, NULL
},
{
NULL, NULL, 0, NULL
}
};

static PyMethodDef SwigMethods_proxydocs[] = {
{
NULL, NULL, 0, NULL
}
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_cyclone__ParticleLinkTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )((cyclone::ParticleLink *) x));
}
static void *_p_cyclone__ParticleRodTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )(cyclone::ParticleLink * )((cyclone::ParticleRod *) x));
}
static void *
_p_cyclone__ParticleConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )((cyclone::ParticleConstraint *) x));
}
static void *
_p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )(cyclone::ParticleConstraint * )(
(cyclone::ParticleCableConstraint *) x));
}
static void *
_p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )(cyclone::ParticleConstraint * )(
(cyclone::ParticleRodConstraint *) x));
}
static void *_p_cyclone__GroundContactsTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )((cyclone::GroundContacts *) x));
}
static void *_p_cyclone__ParticleCableTo_p_cyclone__ParticleContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleContactGenerator * )(cyclone::ParticleLink * )((cyclone::ParticleCable *) x));
}
static void *_p_cyclone__JointTo_p_cyclone__ContactGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ContactGenerator * )((cyclone::Joint *) x));
}
static void *_p_cyclone__GravityTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )((cyclone::Gravity *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )(cyclone::Aero * )(cyclone::AeroEx * )((cyclone::AeroControl *) x));
}
static void *_p_cyclone__SpringTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )((cyclone::Spring *) x));
}
static void *_p_cyclone__AeroExTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )(cyclone::Aero * )((cyclone::AeroEx *) x));
}
static void *_p_cyclone__BuoyancyTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )((cyclone::Buoyancy *) x));
}
static void *_p_cyclone__AeroTo_p_cyclone__ForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ForceGenerator * )((cyclone::Aero *) x));
}
static void *_p_cyclone__ParticleGravityTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleGravity *) x));
}
static void *
_p_cyclone__ParticleAnchoredSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleAnchoredSpring *) x));
}
static void *
_p_cyclone__ParticleFakeSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleFakeSpring *) x));
}
static void *_p_cyclone__ParticleSpringTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleSpring *) x));
}
static void *_p_cyclone__ParticleDragTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleDrag *) x));
}
static void *_p_cyclone__ParticleBuoyancyTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleBuoyancy *) x));
}
static void *
_p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )(cyclone::ParticleAnchoredSpring * )(
(cyclone::ParticleAnchoredBungee *) x));
}
static void *_p_cyclone__ParticleBungeeTo_p_cyclone__ParticleForceGenerator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleForceGenerator * )((cyclone::ParticleBungee *) x));
}
static void *
_p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleConstraint * )((cyclone::ParticleCableConstraint *) x));
}
static void *
_p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleConstraint * )((cyclone::ParticleRodConstraint *) x));
}
static void *_p_cyclone__CollisionDataExTo_p_cyclone__CollisionData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::CollisionData * )((cyclone::CollisionDataEx *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__Aero(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::Aero * )(cyclone::AeroEx * )((cyclone::AeroControl *) x));
}
static void *_p_cyclone__AeroExTo_p_cyclone__Aero(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::Aero * )((cyclone::AeroEx *) x));
}
static void *
_p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleAnchoredSpring(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleAnchoredSpring * )((cyclone::ParticleAnchoredBungee *) x));
}
static void *_p_cyclone__CollisionBoxTo_p_cyclone__CollisionPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::CollisionPrimitive * )((cyclone::CollisionBox *) x));
}
static void *_p_cyclone__CollisionSphereTo_p_cyclone__CollisionPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::CollisionPrimitive * )((cyclone::CollisionSphere *) x));
}
static void *_p_cyclone__ParticleRodTo_p_cyclone__ParticleLink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleLink * )((cyclone::ParticleRod *) x));
}
static void *_p_cyclone__ParticleCableTo_p_cyclone__ParticleLink(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::ParticleLink * )((cyclone::ParticleCable *) x));
}
static void *_p_cyclone__AeroControlTo_p_cyclone__AeroEx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
return (void *) ((cyclone::AeroEx * )((cyclone::AeroControl *) x));
}
static swig_type_info _swigt__p_Contact = {
"_p_Contact", "Contact *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_ContactGenerators = {
"_p_ContactGenerators", "ContactGenerators *", 0, 0, (void *) 0,
0
};
static swig_type_info _swigt__p_Particles = { "_p_Particles", "Particles *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_allocator_type = { "_p_allocator_type", "allocator_type *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_char = { "_p_char", "char *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Aero = { "_p_cyclone__Aero", "cyclone::Aero *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__AeroControl = {
"_p_cyclone__AeroControl", "cyclone::AeroControl *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__AeroEx = { "_p_cyclone__AeroEx", "cyclone::AeroEx *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Buoyancy = {
"_p_cyclone__Buoyancy", "cyclone::Buoyancy *", 0, 0, (void *) 0,
0
};
static swig_type_info _swigt__p_cyclone__CollisionBox = {
"_p_cyclone__CollisionBox", "cyclone::CollisionBox *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionData = {
"_p_cyclone__CollisionData", "cyclone::CollisionData *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionDataEx = {
"_p_cyclone__CollisionDataEx", "cyclone::CollisionDataEx *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionDetector = {
"_p_cyclone__CollisionDetector",
"cyclone::CollisionDetector *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionPlane = {
"_p_cyclone__CollisionPlane", "cyclone::CollisionPlane *", 0,
0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionPrimitive = {
"_p_cyclone__CollisionPrimitive",
"cyclone::CollisionPrimitive *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__CollisionSphere = {
"_p_cyclone__CollisionSphere", "cyclone::CollisionSphere *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__Contact = { "_p_cyclone__Contact", "cyclone::Contact *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__ContactGenerator = {
"_p_cyclone__ContactGenerator",
"cyclone::ContactGenerator *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ContactResolver = {
"_p_cyclone__ContactResolver", "cyclone::ContactResolver *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ForceGenerator = {
"_p_cyclone__ForceGenerator", "cyclone::ForceGenerator *", 0,
0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ForceRegistry = {
"_p_cyclone__ForceRegistry", "cyclone::ForceRegistry *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__Gravity = { "_p_cyclone__Gravity", "cyclone::Gravity *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__GroundContacts = {
"_p_cyclone__GroundContacts", "cyclone::GroundContacts *", 0,
0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__IntersectionTests = {
"_p_cyclone__IntersectionTests",
"cyclone::IntersectionTests *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__Joint = { "_p_cyclone__Joint", "cyclone::Joint *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Matrix3 = { "_p_cyclone__Matrix3", "cyclone::Matrix3 *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Matrix4 = { "_p_cyclone__Matrix4", "cyclone::Matrix4 *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Particle = {
"_p_cyclone__Particle",
"std::vector< cyclone::Particle * >::value_type|cyclone::Particle *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleAnchoredBungee = {
"_p_cyclone__ParticleAnchoredBungee",
"cyclone::ParticleAnchoredBungee *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleAnchoredSpring = {
"_p_cyclone__ParticleAnchoredSpring",
"cyclone::ParticleAnchoredSpring *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleBungee = {
"_p_cyclone__ParticleBungee", "cyclone::ParticleBungee *", 0,
0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleBuoyancy = {
"_p_cyclone__ParticleBuoyancy",
"cyclone::ParticleBuoyancy *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleCable = {
"_p_cyclone__ParticleCable", "cyclone::ParticleCable *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleCableConstraint = {
"_p_cyclone__ParticleCableConstraint",
"cyclone::ParticleCableConstraint *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleConstraint = {
"_p_cyclone__ParticleConstraint",
"cyclone::ParticleConstraint *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleContact = {
"_p_cyclone__ParticleContact", "cyclone::ParticleContact *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleContactGenerator = {
"_p_cyclone__ParticleContactGenerator",
"cyclone::ParticleContactGenerator *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleContactResolver = {
"_p_cyclone__ParticleContactResolver",
"cyclone::ParticleContactResolver *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleDrag = {
"_p_cyclone__ParticleDrag", "cyclone::ParticleDrag *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleFakeSpring = {
"_p_cyclone__ParticleFakeSpring",
"cyclone::ParticleFakeSpring *", 0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleForceGenerator = {
"_p_cyclone__ParticleForceGenerator",
"cyclone::ParticleForceGenerator *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleForceRegistry = {
"_p_cyclone__ParticleForceRegistry",
"cyclone::ParticleForceRegistry *", 0, 0, (void *) 0,
0
};
static swig_type_info _swigt__p_cyclone__ParticleGravity = {
"_p_cyclone__ParticleGravity", "cyclone::ParticleGravity *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleLink = {
"_p_cyclone__ParticleLink", "cyclone::ParticleLink *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleRod = {
"_p_cyclone__ParticleRod", "cyclone::ParticleRod *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleRodConstraint = {
"_p_cyclone__ParticleRodConstraint",
"cyclone::ParticleRodConstraint *", 0, 0, (void *) 0,
0
};
static swig_type_info _swigt__p_cyclone__ParticleSpring = {
"_p_cyclone__ParticleSpring", "cyclone::ParticleSpring *", 0,
0, (void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__ParticleWorld = {
"_p_cyclone__ParticleWorld", "cyclone::ParticleWorld *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__Quaternion = {
"_p_cyclone__Quaternion", "cyclone::Quaternion *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_cyclone__Random = { "_p_cyclone__Random", "cyclone::Random *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__RigidBody = {
"_p_cyclone__RigidBody", "cyclone::RigidBody *", 0, 0, (void *) 0,
0
};
static swig_type_info _swigt__p_cyclone__Spring = { "_p_cyclone__Spring", "cyclone::Spring *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_cyclone__Vector3 = { "_p_cyclone__Vector3", "cyclone::Vector3 *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_difference_type = { "_p_difference_type", "difference_type *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_double = { "_p_double", "cyclone::real *|double *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_float = { "_p_float", "float *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_int = { "_p_int", "int *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_p_PyObject = { "_p_p_PyObject", "PyObject **", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_p_cyclone__Particle = {
"_p_p_cyclone__Particle", "cyclone::Particle **", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_p_cyclone__RigidBody = {
"_p_p_cyclone__RigidBody", "cyclone::RigidBody **", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_size_type = { "_p_size_type", "size_type *", 0, 0, (void *) 0, 0 };
static swig_type_info _swigt__p_std__allocatorT_cyclone__Particle_p_t = {
"_p_std__allocatorT_cyclone__Particle_p_t",
"std::vector< cyclone::Particle * >::allocator_type *|std::allocator< cyclone::Particle * > *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_std__invalid_argument = {
"_p_std__invalid_argument", "std::invalid_argument *", 0, 0,
(void *) 0, 0
};
static swig_type_info _swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t = {
"_p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t",
"cyclone::ParticleWorld::ContactGenerators *|std::vector< cyclone::ParticleContactGenerator *,std::allocator< cyclone::ParticleContactGenerator * > > *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t = {
"_p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t",
"std::vector< cyclone::Particle *,std::allocator< cyclone::Particle * > > *|cyclone::ParticleWorld::Particles *|std::vector< cyclone::Particle * > *",
0, 0, (void *) 0, 0
};
static swig_type_info _swigt__p_swig__SwigPyIterator = {
"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0,
(void *) 0, 0
};

static swig_type_info *swig_type_initial[] = {
&_swigt__p_Contact,
&_swigt__p_ContactGenerators,
&_swigt__p_Particles,
&_swigt__p_allocator_type,
&_swigt__p_char,
&_swigt__p_cyclone__Aero,
&_swigt__p_cyclone__AeroControl,
&_swigt__p_cyclone__AeroEx,
&_swigt__p_cyclone__Buoyancy,
&_swigt__p_cyclone__CollisionBox,
&_swigt__p_cyclone__CollisionData,
&_swigt__p_cyclone__CollisionDataEx,
&_swigt__p_cyclone__CollisionDetector,
&_swigt__p_cyclone__CollisionPlane,
&_swigt__p_cyclone__CollisionPrimitive,
&_swigt__p_cyclone__CollisionSphere,
&_swigt__p_cyclone__Contact,
&_swigt__p_cyclone__ContactGenerator,
&_swigt__p_cyclone__ContactResolver,
&_swigt__p_cyclone__ForceGenerator,
&_swigt__p_cyclone__ForceRegistry,
&_swigt__p_cyclone__Gravity,
&_swigt__p_cyclone__GroundContacts,
&_swigt__p_cyclone__IntersectionTests,
&_swigt__p_cyclone__Joint,
&_swigt__p_cyclone__Matrix3,
&_swigt__p_cyclone__Matrix4,
&_swigt__p_cyclone__Particle,
&_swigt__p_cyclone__ParticleAnchoredBungee,
&_swigt__p_cyclone__ParticleAnchoredSpring,
&_swigt__p_cyclone__ParticleBungee,
&_swigt__p_cyclone__ParticleBuoyancy,
&_swigt__p_cyclone__ParticleCable,
&_swigt__p_cyclone__ParticleCableConstraint,
&_swigt__p_cyclone__ParticleConstraint,
&_swigt__p_cyclone__ParticleContact,
&_swigt__p_cyclone__ParticleContactGenerator,
&_swigt__p_cyclone__ParticleContactResolver,
&_swigt__p_cyclone__ParticleDrag,
&_swigt__p_cyclone__ParticleFakeSpring,
&_swigt__p_cyclone__ParticleForceGenerator,
&_swigt__p_cyclone__ParticleForceRegistry,
&_swigt__p_cyclone__ParticleGravity,
&_swigt__p_cyclone__ParticleLink,
&_swigt__p_cyclone__ParticleRod,
&_swigt__p_cyclone__ParticleRodConstraint,
&_swigt__p_cyclone__ParticleSpring,
&_swigt__p_cyclone__ParticleWorld,
&_swigt__p_cyclone__Quaternion,
&_swigt__p_cyclone__Random,
&_swigt__p_cyclone__RigidBody,
&_swigt__p_cyclone__Spring,
&_swigt__p_cyclone__Vector3,
&_swigt__p_difference_type,
&_swigt__p_double,
&_swigt__p_float,
&_swigt__p_int,
&_swigt__p_p_PyObject,
&_swigt__p_p_cyclone__Particle,
&_swigt__p_p_cyclone__RigidBody,
&_swigt__p_size_type,
&_swigt__p_std__allocatorT_cyclone__Particle_p_t,
&_swigt__p_std__invalid_argument,
&_swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t,
&_swigt__p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
&_swigt__p_swig__SwigPyIterator,
};

static swig_cast_info _swigc__p_Contact[] = {
{
&_swigt__p_Contact, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_ContactGenerators[] = {
{
&_swigt__p_ContactGenerators, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_Particles[] = {
{
&_swigt__p_Particles, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_allocator_type[] = {
{
&_swigt__p_allocator_type, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_char[] = {
{
&_swigt__p_char, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Aero[] = {
{
&_swigt__p_cyclone__Aero, 0, 0, 0
},
{
&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__Aero, 0, 0
},
{
&_swigt__p_cyclone__AeroEx, _p_cyclone__AeroExTo_p_cyclone__Aero, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__AeroControl[] = {
{
&_swigt__p_cyclone__AeroControl, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__AeroEx[] = {
{
&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__AeroEx, 0, 0
},
{
&_swigt__p_cyclone__AeroEx, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Buoyancy[] = {
{
&_swigt__p_cyclone__Buoyancy, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionBox[] = {
{
&_swigt__p_cyclone__CollisionBox, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionData[] = {
{
&_swigt__p_cyclone__CollisionDataEx, _p_cyclone__CollisionDataExTo_p_cyclone__CollisionData, 0, 0
},
{
&_swigt__p_cyclone__CollisionData, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionDataEx[] = {
{
&_swigt__p_cyclone__CollisionDataEx, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionDetector[] = {
{
&_swigt__p_cyclone__CollisionDetector, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionPlane[] = {
{
&_swigt__p_cyclone__CollisionPlane, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionPrimitive[] = {
{
&_swigt__p_cyclone__CollisionPrimitive, 0, 0, 0
},
{
&_swigt__p_cyclone__CollisionBox, _p_cyclone__CollisionBoxTo_p_cyclone__CollisionPrimitive, 0, 0
},
{
&_swigt__p_cyclone__CollisionSphere, _p_cyclone__CollisionSphereTo_p_cyclone__CollisionPrimitive, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__CollisionSphere[] = {
{
&_swigt__p_cyclone__CollisionSphere, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Contact[] = {
{
&_swigt__p_cyclone__Contact, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ContactGenerator[] = {
{
&_swigt__p_cyclone__Joint, _p_cyclone__JointTo_p_cyclone__ContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ContactGenerator, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ContactResolver[] = {
{
&_swigt__p_cyclone__ContactResolver, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ForceGenerator[] = {
{
&_swigt__p_cyclone__Gravity, _p_cyclone__GravityTo_p_cyclone__ForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__AeroControl, _p_cyclone__AeroControlTo_p_cyclone__ForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__Aero, _p_cyclone__AeroTo_p_cyclone__ForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ForceGenerator, 0, 0, 0
},
{
&_swigt__p_cyclone__Spring, _p_cyclone__SpringTo_p_cyclone__ForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__Buoyancy, _p_cyclone__BuoyancyTo_p_cyclone__ForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__AeroEx, _p_cyclone__AeroExTo_p_cyclone__ForceGenerator, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ForceRegistry[] = {
{
&_swigt__p_cyclone__ForceRegistry, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Gravity[] = {
{
&_swigt__p_cyclone__Gravity, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__GroundContacts[] = {
{
&_swigt__p_cyclone__GroundContacts, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__IntersectionTests[] = {
{
&_swigt__p_cyclone__IntersectionTests, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Joint[] = {
{
&_swigt__p_cyclone__Joint, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Matrix3[] = {
{
&_swigt__p_cyclone__Matrix3, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Matrix4[] = {
{
&_swigt__p_cyclone__Matrix4, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Particle[] = {
{
&_swigt__p_cyclone__Particle, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleAnchoredBungee[] = {
{
&_swigt__p_cyclone__ParticleAnchoredBungee, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleAnchoredSpring[] = {
{
&_swigt__p_cyclone__ParticleAnchoredSpring, 0, 0, 0
},
{
&_swigt__p_cyclone__ParticleAnchoredBungee, _p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleAnchoredSpring, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleBungee[] = {
{
&_swigt__p_cyclone__ParticleBungee, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleBuoyancy[] = {
{
&_swigt__p_cyclone__ParticleBuoyancy, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleCable[] = {
{
&_swigt__p_cyclone__ParticleCable, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleCableConstraint[] = {
{
&_swigt__p_cyclone__ParticleCableConstraint, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleConstraint[] = {
{
&_swigt__p_cyclone__ParticleConstraint, 0, 0, 0
},
{
&_swigt__p_cyclone__ParticleCableConstraint, _p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleConstraint, 0, 0
},
{
&_swigt__p_cyclone__ParticleRodConstraint, _p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleConstraint, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleContact[] = {
{
&_swigt__p_cyclone__ParticleContact, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleContactGenerator[] = {
{
&_swigt__p_cyclone__ParticleLink, _p_cyclone__ParticleLinkTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleRod, _p_cyclone__ParticleRodTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleConstraint, _p_cyclone__ParticleConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleCableConstraint, _p_cyclone__ParticleCableConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleRodConstraint, _p_cyclone__ParticleRodConstraintTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__GroundContacts, _p_cyclone__GroundContactsTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleContactGenerator, 0, 0, 0
},
{
&_swigt__p_cyclone__ParticleCable, _p_cyclone__ParticleCableTo_p_cyclone__ParticleContactGenerator, 0, 0
},
{
0, 0,                                                                         0, 0 }};
static swig_cast_info _swigc__p_cyclone__ParticleContactResolver[] = {
{
&_swigt__p_cyclone__ParticleContactResolver, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleDrag[] = {
{
&_swigt__p_cyclone__ParticleDrag, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleFakeSpring[] = {
{
&_swigt__p_cyclone__ParticleFakeSpring, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleForceGenerator[] = {
{
&_swigt__p_cyclone__ParticleGravity, _p_cyclone__ParticleGravityTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleAnchoredSpring, _p_cyclone__ParticleAnchoredSpringTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleForceGenerator, 0, 0, 0
},
{
&_swigt__p_cyclone__ParticleFakeSpring, _p_cyclone__ParticleFakeSpringTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleSpring, _p_cyclone__ParticleSpringTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleDrag, _p_cyclone__ParticleDragTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleBuoyancy, _p_cyclone__ParticleBuoyancyTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleAnchoredBungee, _p_cyclone__ParticleAnchoredBungeeTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
&_swigt__p_cyclone__ParticleBungee, _p_cyclone__ParticleBungeeTo_p_cyclone__ParticleForceGenerator, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleForceRegistry[] = {
{
&_swigt__p_cyclone__ParticleForceRegistry, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleGravity[] = {
{
&_swigt__p_cyclone__ParticleGravity, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleLink[] = {
{
&_swigt__p_cyclone__ParticleLink, 0, 0, 0
},
{
&_swigt__p_cyclone__ParticleRod, _p_cyclone__ParticleRodTo_p_cyclone__ParticleLink, 0, 0
},
{
&_swigt__p_cyclone__ParticleCable, _p_cyclone__ParticleCableTo_p_cyclone__ParticleLink, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleRod[] = {
{
&_swigt__p_cyclone__ParticleRod, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleRodConstraint[] = {
{
&_swigt__p_cyclone__ParticleRodConstraint, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleSpring[] = {
{
&_swigt__p_cyclone__ParticleSpring, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__ParticleWorld[] = {
{
&_swigt__p_cyclone__ParticleWorld, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Quaternion[] = {
{
&_swigt__p_cyclone__Quaternion, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Random[] = {
{
&_swigt__p_cyclone__Random, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__RigidBody[] = {
{
&_swigt__p_cyclone__RigidBody, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Spring[] = {
{
&_swigt__p_cyclone__Spring, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_cyclone__Vector3[] = {
{
&_swigt__p_cyclone__Vector3, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_difference_type[] = {
{
&_swigt__p_difference_type, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_double[] = {
{
&_swigt__p_double, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_float[] = {
{
&_swigt__p_float, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_int[] = {
{
&_swigt__p_int, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_p_PyObject[] = {
{
&_swigt__p_p_PyObject, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_p_cyclone__Particle[] = {
{
&_swigt__p_p_cyclone__Particle, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_p_cyclone__RigidBody[] = {
{
&_swigt__p_p_cyclone__RigidBody, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_size_type[] = {
{
&_swigt__p_size_type, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_std__allocatorT_cyclone__Particle_p_t[] = {
{
&_swigt__p_std__allocatorT_cyclone__Particle_p_t, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_std__invalid_argument[] = {
{
&_swigt__p_std__invalid_argument, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t[] = {
{
&_swigt__p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t[] = {
{
&_swigt__p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t, 0, 0, 0
},
{
0, 0, 0, 0
}
};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {
{
&_swigt__p_swig__SwigPyIterator, 0, 0, 0
},
{
0, 0, 0, 0
}
};

static swig_cast_info *swig_cast_initial[] = {
_swigc__p_Contact,
_swigc__p_ContactGenerators,
_swigc__p_Particles,
_swigc__p_allocator_type,
_swigc__p_char,
_swigc__p_cyclone__Aero,
_swigc__p_cyclone__AeroControl,
_swigc__p_cyclone__AeroEx,
_swigc__p_cyclone__Buoyancy,
_swigc__p_cyclone__CollisionBox,
_swigc__p_cyclone__CollisionData,
_swigc__p_cyclone__CollisionDataEx,
_swigc__p_cyclone__CollisionDetector,
_swigc__p_cyclone__CollisionPlane,
_swigc__p_cyclone__CollisionPrimitive,
_swigc__p_cyclone__CollisionSphere,
_swigc__p_cyclone__Contact,
_swigc__p_cyclone__ContactGenerator,
_swigc__p_cyclone__ContactResolver,
_swigc__p_cyclone__ForceGenerator,
_swigc__p_cyclone__ForceRegistry,
_swigc__p_cyclone__Gravity,
_swigc__p_cyclone__GroundContacts,
_swigc__p_cyclone__IntersectionTests,
_swigc__p_cyclone__Joint,
_swigc__p_cyclone__Matrix3,
_swigc__p_cyclone__Matrix4,
_swigc__p_cyclone__Particle,
_swigc__p_cyclone__ParticleAnchoredBungee,
_swigc__p_cyclone__ParticleAnchoredSpring,
_swigc__p_cyclone__ParticleBungee,
_swigc__p_cyclone__ParticleBuoyancy,
_swigc__p_cyclone__ParticleCable,
_swigc__p_cyclone__ParticleCableConstraint,
_swigc__p_cyclone__ParticleConstraint,
_swigc__p_cyclone__ParticleContact,
_swigc__p_cyclone__ParticleContactGenerator,
_swigc__p_cyclone__ParticleContactResolver,
_swigc__p_cyclone__ParticleDrag,
_swigc__p_cyclone__ParticleFakeSpring,
_swigc__p_cyclone__ParticleForceGenerator,
_swigc__p_cyclone__ParticleForceRegistry,
_swigc__p_cyclone__ParticleGravity,
_swigc__p_cyclone__ParticleLink,
_swigc__p_cyclone__ParticleRod,
_swigc__p_cyclone__ParticleRodConstraint,
_swigc__p_cyclone__ParticleSpring,
_swigc__p_cyclone__ParticleWorld,
_swigc__p_cyclone__Quaternion,
_swigc__p_cyclone__Random,
_swigc__p_cyclone__RigidBody,
_swigc__p_cyclone__Spring,
_swigc__p_cyclone__Vector3,
_swigc__p_difference_type,
_swigc__p_double,
_swigc__p_float,
_swigc__p_int,
_swigc__p_p_PyObject,
_swigc__p_p_cyclone__Particle,
_swigc__p_p_cyclone__RigidBody,
_swigc__p_size_type,
_swigc__p_std__allocatorT_cyclone__Particle_p_t,
_swigc__p_std__invalid_argument,
_swigc__p_std__vectorT_cyclone__ParticleContactGenerator_p_std__allocatorT_cyclone__ParticleContactGenerator_p_t_t,
_swigc__p_std__vectorT_cyclone__Particle_p_std__allocatorT_cyclone__Particle_p_t_t,
_swigc__p_swig__SwigPyIterator,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{
0, 0, 0, 0.0, 0, 0
}
};

#ifdef
__cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef
__cplusplus
extern "C" {
#if
0
} /* c-mode */
#endif
#endif

#if
0
#define
SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
size_t i;
swig_module_info *module_head, *iter;
int init;

/* check to see if the circular list has been setup, if not, set it up */
if (swig_module.next == 0) {
/* Initialize the swig_module */
swig_module.type_initial = swig_type_initial;
swig_module.cast_initial = swig_cast_initial;
swig_module.next = &swig_module;
init = 1;
} else {
init = 0;
}

/* Try and load any already created modules */
module_head = SWIG_GetModule(clientdata);
if (!module_head) {
/* This is the first module loaded for this interpreter */
/* so set the swig module into the interpreter */
SWIG_SetModule(clientdata, &swig_module);
} else {
/* the interpreter has loaded a SWIG module, but has it loaded this one? */
iter = module_head;
do {
if (iter == &swig_module) {
/* Our module is already in the list, so there's nothing more to do. */
return;
}
iter = iter->next;
} while (iter != module_head);

/* otherwise we must add our module into the list */
swig_module.next = module_head->next;
module_head->next = &swig_module;
}

/* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
if (init == 0) return;

/* Now work on filling in swig_module.types */
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
for (i = 0; i < swig_module.size; ++i) {
swig_type_info *type = 0;
swig_type_info *ret;
swig_cast_info *cast;

#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

/* if there is another module already loaded */
if (swig_module.next != &swig_module) {
type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
}
if (type) {
/* Overwrite clientdata field */
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
if (swig_module.type_initial[i]->clientdata) {
type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
}
} else {
type = swig_module.type_initial[i];
}

/* Insert casting types */
cast = swig_module.cast_initial[i];
while (cast->type) {
/* Don't need to add information already in the list */
ret = 0;
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
if (swig_module.next != &swig_module) {
ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef
SWIGRUNTIME_DEBUG
if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
}
if (ret) {
if (type == swig_module.type_initial[i]) {
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
cast->type = ret;
ret = 0;
} else {
/* Check for casting already in the list */
swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef
SWIGRUNTIME_DEBUG
if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
if (!ocast) ret = 0;
}
}

if (!ret) {
#ifdef
SWIGRUNTIME_DEBUG
printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
if (type->cast) {
type->cast->prev = cast;
cast->next = type->cast;
}
type->cast = cast;
}
cast++;
}
/* Set entry in modules->types array equal to the type */
swig_module.types[i] = type;
}
swig_module.types[i] = 0;

#ifdef
SWIGRUNTIME_DEBUG
printf("**** SWIG_InitializeModule: Cast List ******\n");
for (i = 0; i < swig_module.size; ++i) {
int j = 0;
swig_cast_info *cast = swig_module.cast_initial[i];
printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
while (cast->type) {
printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
cast++;
++j;
}
printf("---- Total casts: %d\n", j);
}
printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
size_t i;
swig_cast_info *equiv;
static int init_run = 0;

if (init_run) return;
init_run = 1;

for (i = 0; i < swig_module.size; i++) {
if (swig_module.types[i]->clientdata) {
equiv = swig_module.types[i]->cast;
while (equiv) {
if (!equiv->converter) {
if (equiv->type && !equiv->type->clientdata)
SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
}
equiv = equiv->next;
}
}
}
}

#ifdef
__cplusplus
#if
0
{
/* c-mode */
#endif
}
#endif


#ifdef
__cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define
SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define
SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define
SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)

/* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {
char *name;                  /* Name of global variable */
PyObject *(*get_attr)(void);       /* Return the current value */
int (*set_attr)(PyObject *); /* Set the value */
struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
PyObject_HEAD
swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if
PY_VERSION_HEX >= 0x03000000
return PyUnicode_InternFromString("<Swig global variables>");
#else
return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(swig_varlinkobject *v) {
#if
PY_VERSION_HEX >= 0x03000000
PyObject *str = PyUnicode_InternFromString("(");
PyObject *tail;
PyObject *joined;
swig_globalvar *var;
for (var = v->vars; var; var=var->next) {
tail = PyUnicode_FromString(var->name);
joined = PyUnicode_Concat(str, tail);
Py_DecRef(str);
Py_DecRef(tail);
str = joined;
if (var->next) {
tail = PyUnicode_InternFromString(", ");
joined = PyUnicode_Concat(str, tail);
Py_DecRef(str);
Py_DecRef(tail);
str = joined;
}
}
tail = PyUnicode_InternFromString(")");
joined = PyUnicode_Concat(str, tail);
Py_DecRef(str);
Py_DecRef(tail);
str = joined;
#else
PyObject *str = PyString_FromString("(");
swig_globalvar *var;
for (var = v->vars; var; var = var->next) {
PyString_ConcatAndDel(&str, PyString_FromString(var->name));
if (var->next) PyString_ConcatAndDel(&str, PyString_FromString(", "));
}
PyString_ConcatAndDel(&str, PyString_FromString(")"));
#endif
return str;
}

SWIGINTERN void
swig_varlink_dealloc(swig_varlinkobject *v) {
swig_globalvar *var = v->vars;
while (var) {
swig_globalvar *n = var->next;
free(var->name);
free(var);
var = n;
}
}

SWIGINTERN PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
PyObject *res = NULL;
swig_globalvar *var = v->vars;
while (var) {
if (strcmp(var->name, n) == 0) {
res = (*var->get_attr)();
break;
}
var = var->next;
}
if (res == NULL && !PyErr_Occurred()) {
PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
}
return res;
}

SWIGINTERN int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
int res = 1;
swig_globalvar *var = v->vars;
while (var) {
if (strcmp(var->name, n) == 0) {
res = (*var->set_attr)(p);
break;
}
var = var->next;
}
if (res == 1 && !PyErr_Occurred()) {
PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
}
return res;
}

SWIGINTERN PyTypeObject *
swig_varlink_type(void) {
static char varlink__doc__[] = "Swig var link object";
static PyTypeObject varlink_type;
static int type_init = 0;
if (!type_init) {
const PyTypeObject tmp = {
#if
PY_VERSION_HEX >= 0x03000000
PyVarObject_HEAD_INIT(NULL, 0)
#else
PyObject_HEAD_INIT(NULL)
0,                                  /* ob_size */
#endif
"swigvarlink",                      /* tp_name */
sizeof(swig_varlinkobject),         /* tp_basicsize */
0,                                  /* tp_itemsize */
(destructor) swig_varlink_dealloc,  /* tp_dealloc */
0,                                  /* tp_print */
(getattrfunc) swig_varlink_getattr, /* tp_getattr */
(setattrfunc) swig_varlink_setattr, /* tp_setattr */
0,                                  /* tp_compare */
(reprfunc) swig_varlink_repr,       /* tp_repr */
0,                                  /* tp_as_number */
0,                                  /* tp_as_sequence */
0,                                  /* tp_as_mapping */
0,                                  /* tp_hash */
0,                                  /* tp_call */
(reprfunc) swig_varlink_str,        /* tp_str */
0,                                  /* tp_getattro */
0,                                  /* tp_setattro */
0,                                  /* tp_as_buffer */
0,                                  /* tp_flags */
varlink__doc__,                     /* tp_doc */
0,                                  /* tp_traverse */
0,                                  /* tp_clear */
0,                                  /* tp_richcompare */
0,                                  /* tp_weaklistoffset */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /* tp_iter -> tp_weaklist */
0,                                  /* tp_del */
0,                                  /* tp_version_tag */
#if
PY_VERSION_HEX >= 0x03040000
0,                                  /* tp_finalize */
#endif
#ifdef
COUNT_ALLOCS
0,                                  /* tp_allocs */
0,                                  /* tp_frees */
0,                                  /* tp_maxalloc */
0,                                  /* tp_prev */
0                                   /* tp_next */
#endif
};
varlink_type = tmp;
type_init = 1;
if (PyType_Ready(&varlink_type) < 0)
return NULL;
}
return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
if (result) {
result->vars = 0;
}
return ((PyObject *) result);
}

SWIGINTERN void
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
swig_varlinkobject *v = (swig_varlinkobject *) p;
swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
if (gv) {
size_t size = strlen(name) + 1;
gv->name = (char *) malloc(size);
if (gv->name) {
memcpy(gv->name, name, size);
gv->get_attr = get_attr;
gv->set_attr = set_attr;
gv->next = v->vars;
}
}
v->vars = gv;
}

SWIGINTERN PyObject *
SWIG_globals(void) {
static PyObject *globals = 0;
if (!globals) {
globals = SWIG_newvarlink();
}
return globals;
}

/* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
PyObject *obj = 0;
size_t i;
for (i = 0; constants[i].type; ++i) {
switch (constants[i].type) {
case SWIG_PY_POINTER:
obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype, 0);
break;
case SWIG_PY_BINARY:
obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
break;
default:
obj = 0;
break;
}
if (obj) {
PyDict_SetItemString(d, constants[i].name, obj);
Py_DECREF(obj);
}
}
}

/* -----------------------------------------------------------------------------*/
/* Fix SwigMethods to carry the callback ptrs when needed */
/* -----------------------------------------------------------------------------*/

SWIGINTERN void
SWIG_Python_FixMethods(PyMethodDef *methods,
swig_const_info *const_table,
swig_type_info **types,
swig_type_info **types_initial) {
size_t i;
for (i = 0; methods[i].ml_name; ++i) {
const char *c = methods[i].ml_doc;
if (!c) continue;
c = strstr(c, "swig_ptr: ");
if (c) {
int j;
swig_const_info *ci = 0;
const char *name = c + 10;
for (j = 0; const_table[j].type; ++j) {
if (strncmp(const_table[j].name, name,
strlen(const_table[j].name)) == 0) {
ci = &(const_table[j]);
break;
}
}
if (ci) {
void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
if (ptr) {
size_t shift = (ci->ptype) - types;
swig_type_info *ty = types_initial[shift];
size_t ldoc = (c - methods[i].ml_doc);
size_t lptr = strlen(ty->name) + 2 * sizeof(void *) + 2;
char *ndoc = (char *) malloc(ldoc + lptr + 10);
if (ndoc) {
char *buff = ndoc;
memcpy(buff, methods[i].ml_doc, ldoc);
buff += ldoc;
memcpy(buff, "swig_ptr: ", 10);
buff += 10;
SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
methods[i].ml_doc = ndoc;
}
}
}
}
}
}

/* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */

/* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
/* Find the function in the modified method table */
size_t offset = 0;
int found = 0;
while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
found = 1;
break;
}
offset++;
}
/* Use the copy with the modified docstring if available */
return found ? &SwigMethods_proxydocs[offset] : NULL;
}

/* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */

SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
if (PyCFunction_Check(func)) {
PyCFunctionObject *funcobj = (PyCFunctionObject *) func;
PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
if (ml)
func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
}
#if
PY_VERSION_HEX >= 0x03000000
return PyInstanceMethod_New(func);
#else
return PyMethod_New(func, NULL, NULL);
#endif
}

/* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */

SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
if (PyCFunction_Check(func)) {
PyCFunctionObject *funcobj = (PyCFunctionObject *) func;
PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
if (ml)
func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
}
return PyStaticMethod_New(func);
}

#ifdef
__cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef
__cplusplus
extern "C"
#endif

SWIGEXPORT
#if
PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
PyObject *m, *d, *md, *globals;

#if
PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef SWIG_module = {
PyModuleDef_HEAD_INIT,
SWIG_name,
NULL,
-1,
SwigMethods,
NULL,
NULL,
NULL,
NULL
};
#endif

#if
defined(SWIGPYTHON_BUILTIN)
static SwigPyClientData SwigPyObject_clientdata = {
0, 0, 0, 0, 0, 0, 0
};
static PyGetSetDef this_getset_def = {
(char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
};
static SwigPyGetSet thisown_getset_closure = {
SwigPyObject_own,
SwigPyObject_own
};
static PyGetSetDef thisown_getset_def = {
(char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
};
PyTypeObject *builtin_pytype;
int builtin_base_count;
swig_type_info *builtin_basetype;
PyObject *tuple;
PyGetSetDescrObject *static_getset;
PyTypeObject *metatype;
PyTypeObject *swigpyobject;
SwigPyClientData *cd;
PyObject *public_interface, *public_symbol;
PyObject *this_descr;
PyObject *thisown_descr;
PyObject *self = 0;
int i;

(void)builtin_pytype;
(void)builtin_base_count;
(void)builtin_basetype;
(void)tuple;
(void)static_getset;
(void)self;

/* Metaclass is used to implement static member variables */
metatype = SwigPyObjectType();
assert(metatype);
#endif

(void) globals;

/* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
SWIG_This();
SWIG_Python_TypeCache();
SwigPyPacked_type();
#ifndef
SWIGPYTHON_BUILTIN
SwigPyObject_type();
#endif

/* Fix SwigMethods to carry the callback ptrs when needed */
SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);

#if
PY_VERSION_HEX >= 0x03000000
m = PyModule_Create(&SWIG_module);
#else
m = Py_InitModule(SWIG_name, SwigMethods);
#endif

md = d = PyModule_GetDict(m);
(void) md;

SWIG_InitializeModule(0);

#ifdef
SWIGPYTHON_BUILTIN
swigpyobject = SwigPyObject_TypeOnce();

SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
assert(SwigPyObject_stype);
cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
if (!cd) {
SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
SwigPyObject_clientdata.pytype = swigpyobject;
} else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if
PY_VERSION_HEX >= 0x03000000
return NULL;
# else
return;
# endif
}

/* All objects have a 'this' attribute */
this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
(void)this_descr;

/* All objects have a 'thisown' attribute */
thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
(void)thisown_descr;

public_interface = PyList_New(0);
public_symbol = 0;
(void)public_symbol;

PyDict_SetItemString(md, "__all__", public_interface);
Py_DECREF(public_interface);
for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
for (i = 0; swig_const_table[i].name != 0; ++i)
SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif

SWIG_InstallConstants(d, swig_const_table);

SWIG_Python_SetConstant(d, "R_PI", SWIG_From_double(static_cast< double >(3.14159265358979)));
globals = SWIG_globals();
if (!globals) {
PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if
PY_VERSION_HEX >= 0x03000000
return NULL;
#else
return;
#endif
}
PyDict_SetItemString(md, "cvar", globals);
Py_DECREF(globals);
SWIG_addvarlink(globals, "sleepEpsilon", Swig_var_sleepEpsilon_get, Swig_var_sleepEpsilon_set);
#if
PY_VERSION_HEX >= 0x03000000
return m;
#else
return;
#endif
}

