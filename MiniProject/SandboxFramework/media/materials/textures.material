/**
 * Copyright (c) 2013 David Young dayoung@goliathdesigns.com
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 *  1. The origin of this software must not be misrepresented; you must not
 *  claim that you wrote the original software. If you use this software
 *  in a product, an acknowledgment in the product documentation would be
 *  appreciated but is not required.
 *
 *  2. Altered source versions must be plainly marked as such, and must not be
 *  misrepresented as being the original software.
 *
 *  3. This notice may not be removed or altered from any source
 *  distribution.
 */

material Blue
{
	technique
	{
		pass
		{
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 0 1
			}
		}
	}
}

material BlueGlow
{
	technique
	{
		pass
		{
			lighting off
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 0 1
			}
		}
	}
}

material Green
{
	technique
	{
		pass
		{
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 1 0
			}
		}
	}
}

material GreenGlow
{
	technique
	{
		pass
		{
			lighting off
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 1 0
			}
		}
	}
}

material Red
{
	technique
	{
		pass
		{
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 0 0
			}
		}
	}
}

material RedGlow
{
	technique
	{
		pass
		{
			lighting off
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 0 0
			}
		}
	}
}

material White
{
	technique
	{
		pass
		{
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 1 1
			}
		}
	}
}

material TransparentBlue
{
	receive_shadows off
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			depth_check on
			depth_write off

			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 0 1
				alpha_op_ex source1 src_manual src_current 0.4
			}
		}
		pass
		{
			polygon_mode wireframe
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 0 1
			}
		}
	}
}

material TransparentGreen
{
	receive_shadows off
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			depth_check on
			depth_write off

			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 1 0
				alpha_op_ex source1 src_manual src_current 0.4
			}
		}
		pass
		{
			polygon_mode wireframe
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 0 1 0
			}
		}
	}
}

material TransparentRed
{
	receive_shadows off
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			depth_check on
			depth_write off

			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 0 0
				alpha_op_ex source1 src_manual src_current 0.4
			}
		}
		pass
		{
			polygon_mode wireframe
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 0 0
			}
		}
	}
}

material TransparentYellow
{
	receive_shadows off
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			depth_check on
			depth_write off

			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 1 0
				alpha_op_ex source1 src_manual src_current 0.4
			}
		}
		pass
		{
			polygon_mode wireframe
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 1 0
			}
		}
	}
}

material TransparentWhite
{
	receive_shadows off
	technique
	{
		pass
		{
			lighting off
			scene_blend alpha_blend
			depth_check on
			depth_write off

			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 1 1
				alpha_op_ex source1 src_manual src_current 0.4
			}
		}
		pass
		{
			polygon_mode wireframe
			texture_unit
			{
				colour_op_ex source1 src_manual src_current 1 1 1
			}
		}
	}
}
