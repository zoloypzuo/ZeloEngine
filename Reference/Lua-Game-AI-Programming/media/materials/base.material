/**
 * Ogre Wiki Source Code Public Domain (Un)License
 * The source code on the Ogre Wiki is free and unencumbered 
 * software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or 
 * distribute this software, either in source code form or as a compiled 
 * binary, for any purpose, commercial or non-commercial, and by any 
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors 
 * of this software dedicate any and all copyright interest in the 
 * software to the public domain. We make this dedication for the benefit 
 * of the public at large and to the detriment of our heirs and 
 * successors. We intend this dedication to be an overt act of 
 * relinquishment in perpetuity of all present and future rights to this 
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to http://unlicense.org/
 */

/**
 * The source code in this file is attributed to the Ogre wiki article at
 * http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Normal+AO+Specular+Mapping+Shader&structure=Cookbook
 */

material base_material
{
    set $diffuseCol "1 1 1 1"
    set $specularCol "1 1 1"
    set $shininess "32"

    technique
    {
        pass
        {
            illumination_stage ambient
 
            ambient 1 1 1 1
            diffuse $diffuseCol
            specular 0 0 0 0
            emissive 0 0 0 0
 
            vertex_program_ref ambient_vs
            {
            }
 
            fragment_program_ref ambient_ps
            {
            }
 
            texture_unit diffuseMap
            {
                texture textures/base/baseWhite.dds
                filtering linear linear linear
            }
 
            texture_unit aoMap
            {
                texture textures/base/baseWhite.dds
                filtering linear linear linear
            }
        }
 
        pass
        {
            illumination_stage per_light
 
            scene_blend add
 
            vertex_program_ref diffuse_vs
            {
            }
 
            fragment_program_ref diffuse_ps
            {
            }
 
            diffuse $diffuseCol
            specular $specularCol $shininess
            ambient 0 0 0 0
 
            texture_unit diffuseMap
            {
                texture textures/base/baseWhite.dds
                filtering linear linear linear
            }
 
            texture_unit specMap
            {
                texture textures/base/baseWhite.dds
                filtering linear linear linear
            }
 
            texture_unit normalMap
            {
                texture textures/base/baseFlatNormal.dds
                filtering linear linear linear
            }
        }
    }
}

material Ground : base_material
{
    set_texture_alias diffuseMap textures/nobiax_textures/groundDiffuse.tga
    set_texture_alias normalMap textures/nobiax_textures/groundNormal.tga
	set_texture_alias specMap textures/nobiax_textures/groundSpecular.dds
	set $shininess "512"
}

material Ground2 : base_material
{
    set_texture_alias diffuseMap textures/nobiax_textures/ground2Diffuse.tga
    set_texture_alias normalMap textures/nobiax_textures/ground2Normal.tga
	set_texture_alias specMap textures/nobiax_textures/ground2Specular.dds
	set $shininess "512"
}

material NobiaxModular : base_material
{
    set_texture_alias diffuseMap textures/nobiax_modular/modularDiffuse.dds
    set_texture_alias normalMap textures/nobiax_modular/modularNormal.dds
	set_texture_alias specMap textures/nobiax_modular/modularSpecular.dds
	set $shininess "256"
}

material SF_Soldier_HelmetVisor : base_material
{
    set_texture_alias diffuseMap textures/futuristic_soldier/head_d.dds
    set_texture_alias normalMap textures/futuristic_soldier/head_n.dds
	set_texture_alias specMap textures/futuristic_soldier/head_s.dds
    set_texture_alias emissiveMap textures/futuristic_soldier/head_i.dds
	set $shininess "32"
}

material SF_Soldier_Body : base_material
{
    set_texture_alias diffuseMap textures/futuristic_soldier/body_d.dds
    set_texture_alias normalMap textures/futuristic_soldier/body_n.dds
	set_texture_alias specMap textures/futuristic_soldier/body_s.dds
	set $shininess "32"
}

material SF_Weapon_WeaponBody : base_material
{
    set_texture_alias diffuseMap textures/futuristic_soldier/weapon_d.dds
    set_texture_alias normalMap textures/futuristic_soldier/weapon_n.dds
	set_texture_alias specMap textures/futuristic_soldier/weapon_s.dds
    set_texture_alias emissiveMap textures/futuristic_soldier/weapon_i.dds
    set $shininess "16"
}

material SF_Soldier_HelmetVisor_Dark : base_material
{
   set_texture_alias diffuseMap textures/futuristic_soldier/head_dark_d.dds
   set_texture_alias normalMap textures/futuristic_soldier/head_n.dds
   set_texture_alias specMap textures/futuristic_soldier/head_s.dds
   set_texture_alias emissiveMap textures/futuristic_soldier/head_dark_i.dds
   set $shininess "32"
}

material SF_Soldier_Body_Dark : base_material
{
   set_texture_alias diffuseMap textures/futuristic_soldier/body_dark_d.dds
   set_texture_alias normalMap textures/futuristic_soldier/body_n.dds
   set_texture_alias specMap textures/futuristic_soldier/body_s.dds
   set $shininess "32"
}

material SF_Weapon_Holo : base_material
{
    set $diffuseCol "0 0.5 1 1"
    set_texture_alias diffuseMap textures/futuristic_soldier/weapon_o.dds
}