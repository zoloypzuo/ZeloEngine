(a) Why do the names of the "bit" macros (such as _UPPER) and the _ctype array
    begin with an underscore?

    The C standard states that any file that includes a standard header must
    not reuse the names of macros contained within it. This ties in with the
    rule that states that any macro name starting with an
    underscore followed by a capital letter is reserved for use within
    the standard library.
    These restrictions gives programmers the ability to define common words as
    macro names in their own header files (such as DIGIT, or CONTROL) as macros
    within standard headers will likely be given names preceded by an underscore
    starting with a capital letter (such as _DIGIT, or _CONTROL in ctype.h)

(b) Explain what the _ctype array will contain. Assuming that the character
    set is ASCII, show the values of the array elements at positions 9 (the
    horizontal tab character), 32 (the space character), 65 (the letter A), and
    94 (the ^ character).

    The _ctype static array is used as a lookup table arranged by bitfields.
    Each bit corresponds to a particular property of the character being looked
    up (E.g if its a digit, alphanumeric, etc...). In the case of the examples
    provided by the textbook bit 0 would represent if the char were uppercase,
    bit 1 if it were lowercase, bit 2 if it's a digit, and so on...

    _ctype array contains:

    Position 9  (Horizontal tab char)
    This character is considered a whitespace character so it will have bit 5 set:
    00100000

    Position 32 (Space char)
    This character is considered a whitespace character so it will have bit 5 set:
    00100000

    Position 65 (Letter A):
    This character is considered an uppercase character, so it will have bit 0 set:
    00000001


(c) What's the advantage of using an array to implement these macros?
    By using an array as a lookup table, we can ensure that the macro arguments
    are only evaluated once, preventing the complications that arise when a macro
    argument contains a side effect. Another benefit is that we can save
    computation at runtime as an array access is simply retrieving a value from
    memory, rather than performing some calculation.
